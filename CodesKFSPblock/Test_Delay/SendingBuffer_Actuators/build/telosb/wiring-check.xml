<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="17:SendingBuffer_AppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7ff8df72fc40"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7ff8df9073f0"/></to>
    </wire>
    <wire loc="72:../../../..//tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7ff8df9073f0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7ff8df74b590"/></to>
    </wire>
    <wire loc="19:SendingBuffer_AppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7ff8df6c98f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7ff8de3cd020"/></to>
    </wire>
    <wire loc="64:../../../..//tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7ff8de3cd020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7ff8ddc4ab40"/></to>
    </wire>
    <wire loc="20:SendingBuffer_AppC.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x7ff8df6ad7a0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7ff8df23e140"/></to>
    </wire>
    <wire loc="78:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7ff8df23e140"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7ff8df216880"/></to>
    </wire>
    <wire loc="21:SendingBuffer_AppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7ff8df723590"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7ff8df53d260"/></to>
    </wire>
    <wire loc="51:../../../..//tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7ff8df53d260"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7ff8df539bc0"/></to>
    </wire>
    <wire loc="22:SendingBuffer_AppC.nc">
      <from><interface-ref name="Timer1" scoped="" ref="0x7ff8df6bc9e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8de3b5830"/></to>
    </wire>
    <wire loc="52:../../../..//tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8de3b5830"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7ff8de5dc2c0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="23:SendingBuffer_AppC.nc">
      <from><interface-ref name="Timer2" scoped="" ref="0x7ff8df6b8020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8de3ae140"/></to>
    </wire>
    <wire loc="52:../../../..//tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8de3ae140"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7ff8de5dc2c0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="26:SendingBuffer_AppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7ff8df6a35f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7ff8de3cdc30"/></to>
    </wire>
    <wire loc="31:SendingBuffer_AppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7ff8df6a35f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7ff8de3be020"/></to>
    </wire>
    <wire loc="55:../../../..//tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7ff8de3be020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7ff8df23b630"/></to>
    </wire>
    <wire loc="65:../../../..//tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7ff8de3cdc30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7ff8ddc498b0"/></to>
    </wire>
    <wire loc="29:SendingBuffer_AppC.nc">
      <from><interface-ref name="R_A" scoped="" ref="0x7ff8df6c5220"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8de3c4910"/></to>
    </wire>
    <wire loc="54:../../../..//tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7ff8de3c4910"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8df23c3f0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="30:SendingBuffer_AppC.nc">
      <from><interface-ref name="R_B" scoped="" ref="0x7ff8df6c58e0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8de3b93a0"/></to>
    </wire>
    <wire loc="32:SendingBuffer_AppC.nc">
      <from><interface-ref name="R_B" scoped="" ref="0x7ff8df6c58e0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8de3b93a0"/></to>
    </wire>
    <wire loc="54:../../../..//tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7ff8de3b93a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8df23c3f0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="35:SendingBuffer_AppC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8df69f810"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8de11f160"/></to>
    </wire>
    <wire loc="58:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8de11f160"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7ff8de1efd20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="36:SendingBuffer_AppC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x7ff8de11c020"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7ff8df678c40"/></to>
    </wire>
    <wire loc="37:SendingBuffer_AppC.nc">
      <from><interface-ref name="MultiChannel" scoped="" ref="0x7ff8df67f3a0"/></from>
      <to><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7ff8de11ed30"/></to>
    </wire>
    <wire loc="60:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7ff8de11ed30"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7ff8de3852e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="96:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8dd7fa3b0"/></to>
    </wire>
    <wire loc="56:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8de37d020"/></to>
    </wire>
    <wire loc="104:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8de4b1dd0"/></to>
    </wire>
    <wire loc="60:../../../..//tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8de539b70"/></to>
    </wire>
    <wire loc="58:../../../..//tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8de55a750"/></to>
    </wire>
    <wire loc="52:../../../..//tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8de577080"/></to>
    </wire>
    <wire loc="53:../../../..//tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8de6af130"/></to>
    </wire>
    <wire loc="66:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8de7af620"/></to>
    </wire>
    <wire loc="62:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8de89fc60"/></to>
    </wire>
    <wire loc="63:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8df09e7e0"/></to>
    </wire>
    <wire loc="103:../../../..//tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8dda37140"/></to>
    </wire>
    <wire loc="74:../../../..//tos/system/StateImplC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8ded68020"/></to>
    </wire>
    <wire loc="60:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8df14f510"/></to>
    </wire>
    <wire loc="67:../../../..//tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7ff8df74bc00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7ff8e02423a0"/></to>
    </wire>
    <wire loc="53:../../../..//tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7ff8e02423a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7ff8df94d140"/></to>
    </wire>
    <wire loc="68:../../../..//tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7ff8df73e6c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8df909880"/></to>
    </wire>
    <wire loc="48:../../../..//tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ff8df909880"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8df904a70"/></to>
    </wire>
    <wire loc="71:../../../..//tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df73edc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></to>
    </wire>
    <wire loc="49:../../../..//tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7ff8df9001c0"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7ff8df8e2020"/></to>
    </wire>
    <wire loc="46:../../../..//tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7ff8df8e2020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8df8df020"/></to>
    </wire>
    <wire loc="50:../../../..//tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7ff8df9008a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8df903c80"/></to>
    </wire>
    <wire loc="56:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7ff8df8ff020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8df510600"/></to>
    </wire>
    <wire loc="46:../../../..//tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ff8df8df020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8df8c9cb0"/></to>
    </wire>
    <wire loc="47:../../../..//tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7ff8df8d86c0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7ff8df8c83d0"/></to>
    </wire>
    <wire loc="48:../../../..//tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7ff8dfa254c0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7ff8df8c7680"/></to>
    </wire>
    <wire loc="113:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7ff8df8845a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7ff8df7c16d0"/></to>
    </wire>
    <wire loc="126:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7ff8df872020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7ff8df7bab30"/></to>
    </wire>
    <wire loc="108:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7ff8df87b700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7ff8df7c7160"/></to>
    </wire>
    <wire loc="149:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7ff8df85fa20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7ff8df7a0cb0"/></to>
    </wire>
    <wire loc="107:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7ff8df882aa0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7ff8df7c8480"/></to>
    </wire>
    <wire loc="148:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7ff8df865020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7ff8df7a0020"/></to>
    </wire>
    <wire loc="170:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7ff8df85ca20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7ff8df789cb0"/></to>
    </wire>
    <wire loc="154:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7ff8df86c5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7ff8df79a220"/></to>
    </wire>
    <wire loc="99:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7ff8df885b10"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7ff8df8179d0"/></to>
    </wire>
    <wire loc="135:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7ff8df861a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7ff8df7af2f0"/></to>
    </wire>
    <wire loc="134:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7ff8df8673e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7ff8df7b0610"/></to>
    </wire>
    <wire loc="133:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7ff8df8715a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7ff8df7b1220"/></to>
    </wire>
    <wire loc="115:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7ff8df87a700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7ff8df7bf7a0"/></to>
    </wire>
    <wire loc="156:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7ff8df85ea20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7ff8df7982f0"/></to>
    </wire>
    <wire loc="140:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7ff8df86fbe0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7ff8df7aa6d0"/></to>
    </wire>
    <wire loc="114:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7ff8df881890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7ff8df7c0ac0"/></to>
    </wire>
    <wire loc="93:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7ff8df895060"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df825540"/></to>
    </wire>
    <wire loc="155:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7ff8df865da0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7ff8df799610"/></to>
    </wire>
    <wire loc="106:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7ff8df88b0c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7ff8df7c9020"/></to>
    </wire>
    <wire loc="161:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7ff8df86ba50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7ff8df7926d0"/></to>
    </wire>
    <wire loc="101:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7ff8df8756d0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7ff8df7cfa90"/></to>
    </wire>
    <wire loc="142:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7ff8df860a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7ff8df7a87a0"/></to>
    </wire>
    <wire loc="100:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7ff8df87dcf0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7ff8df7d0de0"/></to>
    </wire>
    <wire loc="141:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7ff8df8661f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7ff8df7a9ac0"/></to>
    </wire>
    <wire loc="163:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7ff8df85da20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7ff8df7907a0"/></to>
    </wire>
    <wire loc="147:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7ff8df86d0c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7ff8df7a2b30"/></to>
    </wire>
    <wire loc="120:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7ff8df8746c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df81d3e0"/></to>
    </wire>
    <wire loc="162:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7ff8df864b80"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7ff8df791ac0"/></to>
    </wire>
    <wire loc="128:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7ff8df862a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7ff8df7b8cb0"/></to>
    </wire>
    <wire loc="169:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7ff8df863a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7ff8df789020"/></to>
    </wire>
    <wire loc="127:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7ff8df868570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7ff8df7b8020"/></to>
    </wire>
    <wire loc="168:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7ff8df869020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7ff8df78bb30"/></to>
    </wire>
    <wire loc="94:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7ff8df823450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df824d80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7ff8df823aa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7ff8df783a90"/></to>
    </wire>
    <wire loc="96:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7ff8df821120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7ff8df780260"/></to>
    </wire>
    <wire loc="102:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8df7ce930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df825540"/></to>
    </wire>
    <wire loc="103:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7ff8df7cc020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df824d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8df7c5020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df825540"/></to>
    </wire>
    <wire loc="110:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7ff8df7c47a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df824d80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8df7be610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df825540"/></to>
    </wire>
    <wire loc="117:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7ff8df7bdc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df824d80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7ff8df81b2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df81cbf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7ff8df81b940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7ff8df7809f0"/></to>
    </wire>
    <wire loc="123:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7ff8df81a020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7ff8df77f240"/></to>
    </wire>
    <wire loc="129:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8df7b7b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df81d3e0"/></to>
    </wire>
    <wire loc="130:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7ff8df7b42f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df81cbf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8df7ae160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df81d3e0"/></to>
    </wire>
    <wire loc="137:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7ff8df7ad7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df81cbf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8df7a7610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df81d3e0"/></to>
    </wire>
    <wire loc="144:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7ff8df7a5c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df81cbf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8df79fb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df81d3e0"/></to>
    </wire>
    <wire loc="151:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7ff8df79d2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df81cbf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8df797160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df81d3e0"/></to>
    </wire>
    <wire loc="158:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7ff8df7967a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df81cbf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8df78f610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df81d3e0"/></to>
    </wire>
    <wire loc="165:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7ff8df78ec50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df81cbf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8df788b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8df81d3e0"/></to>
    </wire>
    <wire loc="172:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7ff8df7862f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7ff8df81cbf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../..//tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8df94b040"/></to>
    </wire>
    <wire loc="55:../../../..//tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7ff8df947490"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7ff8dfd393b0"/></to>
    </wire>
    <wire loc="645:SendingBufferC.nc">
      <from><interface-ref name="getData" scoped="" ref="0x7ff8df5b3020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:SendingBufferC.nc">
      <from><interface-ref name="assignFlowstoSlots" scoped="" ref="0x7ff8df66e480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="69:SendingBufferC.nc">
      <from><interface-ref name="updateSchedule" scoped="" ref="0x7ff8df66a2a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:SendingBufferC.nc">
      <from><interface-ref name="initializeFlow" scoped="" ref="0x7ff8df66f4f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:SendingBufferC.nc">
      <from><interface-ref name="initializeSchedule" scoped="" ref="0x7ff8df66d3b0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:SendingBufferC.nc">
      <from><interface-ref name="initializeCluster" scoped="" ref="0x7ff8df6692b0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:SendingBufferC.nc">
      <from><interface-ref name="PermutateCipher" scoped="" ref="0x7ff8df66b2f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../../..//tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ff8df510600"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8df5395c0"/></to>
    </wire>
    <wire loc="54:../../../..//tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7ff8df5301d0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7ff8df53ad90"/></to>
    </wire>
    <wire loc="58:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7ff8df53ad90"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7ff8df2f9440"/></to>
    </wire>
    <wire loc="55:../../../..//tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7ff8df5364d0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7ff8df512020"/></to>
    </wire>
    <wire loc="61:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7ff8df512020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7ff8df2e4020"/></to>
    </wire>
    <wire loc="56:../../../..//tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7ff8df5357f0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7ff8df511380"/></to>
    </wire>
    <wire loc="64:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7ff8df511380"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7ff8df2e0b90"/></to>
    </wire>
    <wire loc="59:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8df2e8610"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x7ff8df4b99a0"/></to>
    </wire>
    <wire loc="486:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7ff8df4b99a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df396d10"/></to>
    </wire>
    <wire loc="62:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8df2e32f0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x7ff8df4b79a0"/></to>
    </wire>
    <wire loc="487:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7ff8df4b79a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df391740"/></to>
    </wire>
    <wire loc="65:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8df2dfde0"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x7ff8df4b59a0"/></to>
    </wire>
    <wire loc="488:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7ff8df4b59a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df38c100"/></to>
    </wire>
    <wire loc="442:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7ff8df4fb810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df42f740"/></to>
    </wire>
    <wire loc="455:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7ff8df4e6810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3ff100"/></to>
    </wire>
    <wire loc="531:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7ff8df49dca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3f0100"/></to>
    </wire>
    <wire loc="551:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7ff8df478cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df365740"/></to>
    </wire>
    <wire loc="532:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7ff8df49bcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3ecd10"/></to>
    </wire>
    <wire loc="460:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7ff8df4e2810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3f5740"/></to>
    </wire>
    <wire loc="473:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7ff8df4ce9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3c5460"/></to>
    </wire>
    <wire loc="497:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7ff8df4a99a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df36f100"/></to>
    </wire>
    <wire loc="535:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7ff8df494cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3e2100"/></to>
    </wire>
    <wire loc="545:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7ff8df484cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df382740"/></to>
    </wire>
    <wire loc="557:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7ff8df470cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df360100"/></to>
    </wire>
    <wire loc="445:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7ff8df4f5810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df421740"/></to>
    </wire>
    <wire loc="536:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7ff8df492cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3ded10"/></to>
    </wire>
    <wire loc="450:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7ff8df4f0810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df417d10"/></to>
    </wire>
    <wire loc="463:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7ff8df4dc810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3e7740"/></to>
    </wire>
    <wire loc="476:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7ff8df4c89a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3b7100"/></to>
    </wire>
    <wire loc="489:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7ff8df4b39a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df387d10"/></to>
    </wire>
    <wire loc="500:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7ff8df4a39a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df360100"/></to>
    </wire>
    <wire loc="440:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7ff8df4ff810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df438100"/></to>
    </wire>
    <wire loc="453:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7ff8df4ea810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df409d80"/></to>
    </wire>
    <wire loc="466:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7ff8df4d6810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3d9740"/></to>
    </wire>
    <wire loc="530:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7ff8df49fcc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3f0100"/></to>
    </wire>
    <wire loc="548:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7ff8df47ecb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df374740"/></to>
    </wire>
    <wire loc="555:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7ff8df472cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df360100"/></to>
    </wire>
    <wire loc="541:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7ff8df48acc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df39a100"/></to>
    </wire>
    <wire loc="471:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7ff8df4d2810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3cfe60"/></to>
    </wire>
    <wire loc="484:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7ff8df4bd9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df39f740"/></to>
    </wire>
    <wire loc="495:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7ff8df4ad9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df379d10"/></to>
    </wire>
    <wire loc="549:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7ff8df47ccb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df36f100"/></to>
    </wire>
    <wire loc="538:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7ff8df490cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3a8100"/></to>
    </wire>
    <wire loc="443:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7ff8df4f9810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df42a100"/></to>
    </wire>
    <wire loc="456:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7ff8df4e4810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3fbd10"/></to>
    </wire>
    <wire loc="493:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7ff8df4b19a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df382740"/></to>
    </wire>
    <wire loc="461:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7ff8df4e0810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3f0100"/></to>
    </wire>
    <wire loc="474:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7ff8df4cc9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3c1e00"/></to>
    </wire>
    <wire loc="498:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7ff8df4a79a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df36bd10"/></to>
    </wire>
    <wire loc="540:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7ff8df48ccc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df39f740"/></to>
    </wire>
    <wire loc="438:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7ff8df501870"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df469d10"/></to>
    </wire>
    <wire loc="451:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7ff8df4ee810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df412740"/></to>
    </wire>
    <wire loc="464:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7ff8df4da810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3e2100"/></to>
    </wire>
    <wire loc="477:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7ff8df4c69a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3b3d10"/></to>
    </wire>
    <wire loc="542:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7ff8df488cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3d9740"/></to>
    </wire>
    <wire loc="546:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7ff8df482cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df37d100"/></to>
    </wire>
    <wire loc="552:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7ff8df476cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df360100"/></to>
    </wire>
    <wire loc="482:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7ff8df4c19a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3a8100"/></to>
    </wire>
    <wire loc="543:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7ff8df486cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3d3100"/></to>
    </wire>
    <wire loc="441:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7ff8df4fd810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df434d10"/></to>
    </wire>
    <wire loc="454:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7ff8df4e8810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df404740"/></to>
    </wire>
    <wire loc="467:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7ff8df4d4810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3d3100"/></to>
    </wire>
    <wire loc="539:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7ff8df48ecc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3a4d10"/></to>
    </wire>
    <wire loc="550:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7ff8df47acb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df36bd10"/></to>
    </wire>
    <wire loc="472:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7ff8df4d09a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3ca9f0"/></to>
    </wire>
    <wire loc="485:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7ff8df4bb9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df39a100"/></to>
    </wire>
    <wire loc="496:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7ff8df4ab9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df374740"/></to>
    </wire>
    <wire loc="444:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7ff8df4f7810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df426d10"/></to>
    </wire>
    <wire loc="494:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7ff8df4af9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df37d100"/></to>
    </wire>
    <wire loc="449:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7ff8df4f2810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df41b100"/></to>
    </wire>
    <wire loc="462:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7ff8df4de810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3ecd10"/></to>
    </wire>
    <wire loc="475:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7ff8df4ca9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3bc740"/></to>
    </wire>
    <wire loc="499:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7ff8df4a59a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df365740"/></to>
    </wire>
    <wire loc="439:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7ff8df50b810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df43d740"/></to>
    </wire>
    <wire loc="452:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7ff8df4ec810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df40d100"/></to>
    </wire>
    <wire loc="465:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7ff8df4d8810"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3ded10"/></to>
    </wire>
    <wire loc="478:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7ff8df4c39a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3ad740"/></to>
    </wire>
    <wire loc="534:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7ff8df497ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3e7740"/></to>
    </wire>
    <wire loc="547:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7ff8df480cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df379d10"/></to>
    </wire>
    <wire loc="533:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7ff8df499cc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3e7740"/></to>
    </wire>
    <wire loc="483:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7ff8df4bf9a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3a4d10"/></to>
    </wire>
    <wire loc="554:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7ff8df474cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df365740"/></to>
    </wire>
    <wire loc="558:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7ff8df46ecc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df387d10"/></to>
    </wire>
    <wire loc="529:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7ff8df4a19f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7ff8df3f5740"/></to>
    </wire>
    <wire loc="63:../../../..//tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7ff8ddc4ab40"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7ff8ddc3dbc0"/></to>
    </wire>
    <wire loc="64:../../../..//tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7ff8ddc498b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7ff8df23b630"/></to>
    </wire>
    <wire loc="66:../../../..//tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7ff8de3cb8b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7ff8ddc48590"/></to>
    </wire>
    <wire loc="65:../../../..//tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7ff8ddc48590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7ff8df23a2d0"/></to>
    </wire>
    <wire loc="67:../../../..//tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7ff8de3c9020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7ff8ddc47c10"/></to>
    </wire>
    <wire loc="66:../../../..//tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7ff8ddc47c10"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8df239990"/></to>
    </wire>
    <wire loc="83:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7ff8df23b630"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7ff8df210760"/></to>
    </wire>
    <wire loc="84:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7ff8df23a2d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7ff8df211020"/></to>
    </wire>
    <wire loc="85:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8df239990"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8df20e810"/></to>
    </wire>
    <wire loc="60:../../../..//tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7ff8ddc3c910"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7ff8df294940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../..//tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7ff8ddc3b590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7ff8df23a2d0"/></to>
    </wire>
    <wire loc="53:../../../..//tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7ff8df294940"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7ff8df2484b0"/></to>
    </wire>
    <wire loc="54:../../../..//tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7ff8df247400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7ff8df23d1d0"/></to>
    </wire>
    <wire loc="80:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7ff8df23d1d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7ff8df215980"/></to>
    </wire>
    <wire loc="55:../../../..//tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7ff8df246060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7ff8df23a2d0"/></to>
    </wire>
    <wire loc="56:../../../..//tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7ff8df245720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7ff8df23b630"/></to>
    </wire>
    <wire loc="169:../../../..//tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7ff8df244480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../../..//tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7ff8df244c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7ff8df216880"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7ff8df1f1b70"/></to>
    </wire>
    <wire loc="85:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7ff8df215980"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7ff8de473020"/></to>
    </wire>
    <wire loc="82:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7ff8df23b020"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7ff8df212900"/></to>
    </wire>
    <wire loc="88:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7ff8df212900"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7ff8de471df0"/></to>
    </wire>
    <wire loc="84:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7ff8df210760"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7ff8de46fa80"/></to>
    </wire>
    <wire loc="89:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7ff8df233cd0"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7ff8de72b550"/></to>
    </wire>
    <wire loc="59:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7ff8de72b550"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7ff8de71ca80"/></to>
    </wire>
    <wire loc="86:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8df222b20"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8df204bb0"/></to>
    </wire>
    <wire loc="91:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8df204bb0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8df1e4080"/></to>
    </wire>
    <wire loc="81:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7ff8df23c3f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8df214cb0"/></to>
    </wire>
    <wire loc="87:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7ff8df214cb0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8de471210"/></to>
    </wire>
    <wire loc="93:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8df20e810"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8df1e5020"/></to>
    </wire>
    <wire loc="89:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7ff8df211020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7ff8de470470"/></to>
    </wire>
    <wire loc="90:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7ff8df22ddc0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7ff8de727660"/></to>
    </wire>
    <wire loc="60:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7ff8de727660"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7ff8de719af0"/></to>
    </wire>
    <wire loc="97:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7ff8df1f1b70"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7ff8de4a4b80"/></to>
    </wire>
    <wire loc="83:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8df1fcd40"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8de46d8b0"/></to>
    </wire>
    <wire loc="86:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7ff8df1efd20"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7ff8de46ece0"/></to>
    </wire>
    <wire loc="92:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8df207970"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8df1e6140"/></to>
    </wire>
    <wire loc="84:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8df1e6140"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de730670"/></to>
    </wire>
    <wire loc="83:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8df1e4080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8de4a4080"/></to>
    </wire>
    <wire loc="85:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8df1e5020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7ff8de72d6e0"/></to>
    </wire>
    <wire loc="90:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7ff8df1fa020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7ff8df1e4b70"/></to>
    </wire>
    <wire loc="82:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7ff8df1e4b70"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7ff8de48f020"/></to>
    </wire>
    <wire loc="94:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7ff8df203a80"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7ff8df1e59d0"/></to>
    </wire>
    <wire loc="86:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7ff8df1e59d0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7ff8de72ca70"/></to>
    </wire>
    <wire loc="97:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioResource" scoped="" ref="0x7ff8de4640f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8df1ecd00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="98:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7ff8de46c860"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7ff8df1e8d10"/></to>
    </wire>
    <wire loc="93:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7ff8df1e8d10"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7ff8de50dc90"/></to>
    </wire>
    <wire loc="99:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7ff8de46b690"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7ff8df1e7a90"/></to>
    </wire>
    <wire loc="94:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7ff8df1e7a90"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7ff8de50ca50"/></to>
    </wire>
    <wire loc="101:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7ff8de4664d0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7ff8de955b30"/></to>
    </wire>
    <wire loc="102:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de46bce0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de730670"/></to>
    </wire>
    <wire loc="55:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de730670"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de722d20"/></to>
    </wire>
    <wire loc="103:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de46ab70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de72c0c0"/></to>
    </wire>
    <wire loc="57:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de72c0c0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de71d640"/></to>
    </wire>
    <wire loc="104:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7ff8de468610"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7ff8df158dc0"/></to>
    </wire>
    <wire loc="55:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7ff8df158dc0"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7ff8df14e970"/></to>
    </wire>
    <wire loc="106:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7ff8de4651f0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8df1de330"/></to>
    </wire>
    <wire loc="54:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8df1de330"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8df1d97e0"/></to>
    </wire>
    <wire loc="109:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7ff8de464d30"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7ff8df53d260"/></to>
    </wire>
    <wire loc="63:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7ff8de4a4b80"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7ff8de4a1d90"/></to>
    </wire>
    <wire loc="58:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7ff8de72ca70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7ff8de71c020"/></to>
    </wire>
    <wire loc="53:../../../..//tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7ff8de48f020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7ff8de48d410"/></to>
    </wire>
    <wire loc="97:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7ff8de50dc90"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7ff8de502a20"/></to>
    </wire>
    <wire loc="64:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8de4a4080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8de49d2d0"/></to>
    </wire>
    <wire loc="90:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7ff8df1e9820"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8de50d5e0"/></to>
    </wire>
    <wire loc="92:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7ff8de50d5e0"/></from>
      <to><interface-ref name="BareReceive" scoped="" ref="0x7ff8de502370"/></to>
    </wire>
    <wire loc="56:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7ff8de72d6e0"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7ff8de71ec50"/></to>
    </wire>
    <wire loc="88:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8df1ecd00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8de50fbe0"/></to>
    </wire>
    <wire loc="96:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8de50fbe0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8de5047b0"/></to>
    </wire>
    <wire loc="89:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7ff8df1eaa00"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7ff8de50e8e0"/></to>
    </wire>
    <wire loc="91:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7ff8de50e8e0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7ff8de5034d0"/></to>
    </wire>
    <wire loc="91:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7ff8df1e8020"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7ff8de50b170"/></to>
    </wire>
    <wire loc="93:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7ff8de50b170"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7ff8de500020"/></to>
    </wire>
    <wire loc="98:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7ff8de50ca50"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7ff8de501840"/></to>
    </wire>
    <wire loc="98:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7ff8de4a1d90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7ff8df1e0390"/></to>
    </wire>
    <wire loc="55:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7ff8df1e0390"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7ff8df1dde80"/></to>
    </wire>
    <wire loc="101:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7ff8de50a6b0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7ff8de55f220"/></to>
    </wire>
    <wire loc="55:../../../..//tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7ff8de55f220"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7ff8de55da20"/></to>
    </wire>
    <wire loc="102:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7ff8de55e020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7ff8de493350"/></to>
    </wire>
    <wire loc="54:../../../..//tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7ff8de493350"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7ff8de48fd70"/></to>
    </wire>
    <wire loc="103:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7ff8de48fd70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7ff8de4a8ce0"/></to>
    </wire>
    <wire loc="61:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7ff8de4a8ce0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7ff8de4a2860"/></to>
    </wire>
    <wire loc="104:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7ff8de4a2860"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7ff8df1e0e80"/></to>
    </wire>
    <wire loc="56:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7ff8df1e0e80"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7ff8df1da990"/></to>
    </wire>
    <wire loc="107:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7ff8de50a020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8de4a5980"/></to>
    </wire>
    <wire loc="62:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7ff8de4a5980"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7ff8de4a1690"/></to>
    </wire>
    <wire loc="108:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7ff8de4a1690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8de541aa0"/></to>
    </wire>
    <wire loc="56:../../../..//tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7ff8de541aa0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8de53ce30"/></to>
    </wire>
    <wire loc="109:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7ff8de53d950"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8df1dfb40"/></to>
    </wire>
    <wire loc="68:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7ff8df1dfb40"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8de7b37c0"/></to>
    </wire>
    <wire loc="63:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7ff8de7b37c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7ff8de7ad020"/></to>
    </wire>
    <wire loc="59:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8df1d7640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8df168950"/></to>
    </wire>
    <wire loc="54:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8df168950"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8df14fb80"/></to>
    </wire>
    <wire loc="60:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7ff8df1cfb50"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7ff8df163bf0"/></to>
    </wire>
    <wire loc="56:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7ff8df163bf0"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7ff8df14c740"/></to>
    </wire>
    <wire loc="63:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7ff8df1cb760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7ff8de8ad6c0"/></to>
    </wire>
    <wire loc="69:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7ff8df1cb760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7ff8de7b65c0"/></to>
    </wire>
    <wire loc="61:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7ff8de7b65c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7ff8de7afca0"/></to>
    </wire>
    <wire loc="55:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7ff8de8ad6c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7ff8de89d320"/></to>
    </wire>
    <wire loc="64:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7ff8df1c42a0"/></from>
      <to><interface-ref name="CC2420Transmit" scoped="" ref="0x7ff8de8aa020"/></to>
    </wire>
    <wire loc="56:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7ff8de8aa020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7ff8de89dbc0"/></to>
    </wire>
    <wire loc="65:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7ff8df1cc060"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8de8aacb0"/></to>
    </wire>
    <wire loc="57:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8de8aacb0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8de89c970"/></to>
    </wire>
    <wire loc="72:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8df1c2330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de730670"/></to>
    </wire>
    <wire loc="73:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8df1b9920"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de72c0c0"/></to>
    </wire>
    <wire loc="76:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7ff8df1c0420"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7ff8de57ca20"/></to>
    </wire>
    <wire loc="56:../../../..//tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7ff8de57ca20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7ff8de576a20"/></to>
    </wire>
    <wire loc="79:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControlState" scoped="" ref="0x7ff8df1bd110"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7ff8de57eaa0"/></to>
    </wire>
    <wire loc="74:../../../..//tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7ff8de57eaa0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7ff8ded6d280"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7ff8df1c0bf0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7ff8df53d260"/></to>
    </wire>
    <wire loc="76:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="sendDone_task" scoped="" ref="0x7ff8df1afb70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="stopDone_task" scoped="" ref="0x7ff8df1b1ba0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="startDone_task" scoped="" ref="0x7ff8df1b2c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ReadRssi" scoped="" ref="0x7ff8df1540c0"/></from>
      <to><interface-ref name="ReadRssi" scoped="" ref="0x7ff8df14bb40"/></to>
    </wire>
    <wire loc="63:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="StartupTimer" scoped="" ref="0x7ff8df13fd90"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7ff8df09b220"/></to>
    </wire>
    <wire loc="55:../../../..//tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7ff8df09b220"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7ff8df0955f0"/></to>
    </wire>
    <wire loc="66:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7ff8df13c060"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7ff8def96690"/></to>
    </wire>
    <wire loc="72:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7ff8def96690"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def88520"/></to>
    </wire>
    <wire loc="67:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7ff8df13b380"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7ff8def92020"/></to>
    </wire>
    <wire loc="75:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7ff8def92020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def7a710"/></to>
    </wire>
    <wire loc="68:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7ff8df13a6a0"/></from>
      <to><interface-ref name="VREN" scoped="" ref="0x7ff8def906a0"/></to>
    </wire>
    <wire loc="77:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7ff8def906a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def70d70"/></to>
    </wire>
    <wire loc="71:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7ff8df1380e0"/></from>
      <to><interface-ref name="InterruptCCA" scoped="" ref="0x7ff8def5a210"/></to>
    </wire>
    <wire loc="64:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7ff8def5a210"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7ff8dee3ca30"/></to>
    </wire>
    <wire loc="74:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7ff8df1221d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8de9e1e20"/></to>
    </wire>
    <wire loc="126:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8de9e1e20"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8dedef960"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7ff8df1212b0"/></from>
      <to><interface-ref name="SRXON" scoped="" ref="0x7ff8de9de7b0"/></to>
    </wire>
    <wire loc="132:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7ff8de9de7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7ff8df1219c0"/></from>
      <to><interface-ref name="SRFOFF" scoped="" ref="0x7ff8de9dcae0"/></to>
    </wire>
    <wire loc="135:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7ff8de9dcae0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7ff8df123a40"/></from>
      <to><interface-ref name="SXOSCON" scoped="" ref="0x7ff8de9dfad0"/></to>
    </wire>
    <wire loc="130:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7ff8de9dfad0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8df123120"/></from>
      <to><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8de9db160"/></to>
    </wire>
    <wire loc="136:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8de9db160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7ff8df127b00"/></from>
      <to><interface-ref name="FSCTRL" scoped="" ref="0x7ff8de9d3870"/></to>
    </wire>
    <wire loc="154:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7ff8de9d3870"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7ff8df12e3d0"/></from>
      <to><interface-ref name="IOCFG0" scoped="" ref="0x7ff8de9d0880"/></to>
    </wire>
    <wire loc="158:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7ff8de9d0880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7ff8df12ec80"/></from>
      <to><interface-ref name="IOCFG1" scoped="" ref="0x7ff8de9cf0a0"/></to>
    </wire>
    <wire loc="159:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7ff8de9cf0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8df12a5f0"/></from>
      <to><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8de9d8e50"/></to>
    </wire>
    <wire loc="147:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8de9d8e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8df126020"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de9d6670"/></to>
    </wire>
    <wire loc="148:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de9d6670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7ff8df12f520"/></from>
      <to><interface-ref name="PANID" scoped="" ref="0x7ff8de9c0500"/></to>
    </wire>
    <wire loc="184:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7ff8de9c0500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7ff8df12ba90"/></from>
      <to><interface-ref name="IEEEADR" scoped="" ref="0x7ff8de9c2ce0"/></to>
    </wire>
    <wire loc="183:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7ff8de9c2ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8df1268e0"/></from>
      <to><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8de9d4e50"/></to>
    </wire>
    <wire loc="153:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8de9d4e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7ff8df1251c0"/></from>
      <to><interface-ref name="RSSI" scoped="" ref="0x7ff8de9d6e50"/></to>
    </wire>
    <wire loc="149:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7ff8de9d6e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7ff8df125a70"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de9d5e50"/></to>
    </wire>
    <wire loc="151:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de9d5e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SyncResource" scoped="" ref="0x7ff8df120d90"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8de9aea80"/></to>
    </wire>
    <wire loc="126:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8de9aea80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8dedef960"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="94:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x7ff8df120020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8de9829e0"/></to>
    </wire>
    <wire loc="126:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8de9829e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8dedef960"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="97:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7ff8df130810"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7ff8de955b30"/></to>
    </wire>
    <wire loc="100:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7ff8df147020"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7ff8de954d30"/></to>
    </wire>
    <wire loc="23:../../../..//tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7ff8de954d30"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7ff8de93a310"/></to>
    </wire>
    <wire loc="126:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="syncDone" scoped="" ref="0x7ff8df114820"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="sync" scoped="" ref="0x7ff8df115940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../..//tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ff8df09e7e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8df096d40"/></to>
    </wire>
    <wire loc="51:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ff8df096d40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8ddbd69d0"/></to>
    </wire>
    <wire loc="52:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7ff8df0955f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7ff8ddbd5260"/></to>
    </wire>
    <wire loc="52:../../../..//tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ff8ddbd69d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8ddbcfa10"/></to>
    </wire>
    <wire loc="53:../../../..//tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7ff8ddbd5260"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7ff8ddbc85f0"/></to>
    </wire>
    <wire loc="51:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ff8ddbcfa10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8ddb9e510"/></to>
    </wire>
    <wire loc="55:../../../..//tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7ff8ddbaed20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7ff8ddbce2a0"/></to>
    </wire>
    <wire loc="52:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7ff8ddbce2a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7ff8ddb9eda0"/></to>
    </wire>
    <wire loc="56:../../../..//tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7ff8ddbb09b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7ff8df021020"/></to>
    </wire>
    <wire loc="50:../../../..//tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7ff8df021020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7ff8defffad0"/></to>
    </wire>
    <wire loc="54:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8ddb99020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8ddba31b0"/></to>
    </wire>
    <wire loc="49:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8ddba31b0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8df0764d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8ddb98760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8ddba28f0"/></to>
    </wire>
    <wire loc="50:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8ddba28f0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8df073280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8ddb97a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8ddba1c10"/></to>
    </wire>
    <wire loc="51:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8ddba1c10"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8df072ba0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8df0764d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7ff8df8746c0"/></to>
    </wire>
    <wire loc="59:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8df073280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7ff8df872020"/></to>
    </wire>
    <wire loc="60:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8df072ba0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7ff8df868570"/></to>
    </wire>
    <wire loc="66:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8df0764d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7ff8df8746c0"/></to>
    </wire>
    <wire loc="67:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8df073280"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7ff8df86fbe0"/></to>
    </wire>
    <wire loc="68:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8df072ba0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7ff8df8661f0"/></to>
    </wire>
    <wire loc="70:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8df0764d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7ff8df8746c0"/></to>
    </wire>
    <wire loc="71:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8df073280"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7ff8df86d0c0"/></to>
    </wire>
    <wire loc="72:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8df072ba0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7ff8df865020"/></to>
    </wire>
    <wire loc="74:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8df0764d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7ff8df8746c0"/></to>
    </wire>
    <wire loc="75:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8df073280"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7ff8df86c5a0"/></to>
    </wire>
    <wire loc="76:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8df072ba0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7ff8df865da0"/></to>
    </wire>
    <wire loc="78:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8df0764d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7ff8df8746c0"/></to>
    </wire>
    <wire loc="79:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8df073280"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7ff8df86ba50"/></to>
    </wire>
    <wire loc="80:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8df072ba0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7ff8df864b80"/></to>
    </wire>
    <wire loc="82:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8df0764d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7ff8df8746c0"/></to>
    </wire>
    <wire loc="83:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8df073280"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7ff8df869020"/></to>
    </wire>
    <wire loc="84:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8df072ba0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7ff8df863a20"/></to>
    </wire>
    <wire loc="52:../../../..//tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7ff8defe1020"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7ff8df017020"/></to>
    </wire>
    <wire loc="50:../../../..//tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7ff8df017020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7ff8df0060a0"/></to>
    </wire>
    <wire loc="51:../../../..//tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8df0042c0"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7ff8df8746c0"/></to>
    </wire>
    <wire loc="73:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7ff8def959c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def83060"/></to>
    </wire>
    <wire loc="74:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7ff8def94cf0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def7fb70"/></to>
    </wire>
    <wire loc="71:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7ff8def973e0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def8da20"/></to>
    </wire>
    <wire loc="76:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7ff8def91370"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def741b0"/></to>
    </wire>
    <wire loc="63:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def8cc50"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7ff8df4fb810"/></to>
    </wire>
    <wire loc="64:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def877a0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7ff8df4ce9a0"/></to>
    </wire>
    <wire loc="65:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def822f0"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7ff8df4fd810"/></to>
    </wire>
    <wire loc="66:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def7ede0"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7ff8df501870"/></to>
    </wire>
    <wire loc="67:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def79930"/></from>
      <to><interface-ref name="Port46" scoped="" ref="0x7ff8df4c69a0"/></to>
    </wire>
    <wire loc="68:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def73480"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7ff8df4d09a0"/></to>
    </wire>
    <wire loc="69:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def6e020"/></from>
      <to><interface-ref name="Port45" scoped="" ref="0x7ff8df4c89a0"/></to>
    </wire>
    <wire loc="63:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7ff8def555a0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7ff8def3f020"/></to>
    </wire>
    <wire loc="65:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7ff8def5ae30"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7ff8dee2da70"/></to>
    </wire>
    <wire loc="53:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8def3fae0"/></from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7ff8df8715a0"/></to>
    </wire>
    <wire loc="54:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430Capture" scoped="" ref="0x7ff8def3eda0"/></from>
      <to><interface-ref name="CaptureB1" scoped="" ref="0x7ff8df861a20"/></to>
    </wire>
    <wire loc="55:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def3dc20"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7ff8df4d09a0"/></to>
    </wire>
    <wire loc="60:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7ff8dee3b610"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7ff8def2ec40"/></to>
    </wire>
    <wire loc="70:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7ff8def2ec40"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7ff8def1aa30"/></to>
    </wire>
    <wire loc="61:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7ff8dee2b610"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7ff8def30e70"/></to>
    </wire>
    <wire loc="66:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7ff8def30e70"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7ff8def209c0"/></to>
    </wire>
    <wire loc="82:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7ff8def23bc0"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7ff8def0fbc0"/></to>
    </wire>
    <wire loc="73:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7ff8def2abc0"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7ff8def17a30"/></to>
    </wire>
    <wire loc="77:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7ff8def28bc0"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x7ff8def15a30"/></to>
    </wire>
    <wire loc="68:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7ff8def34d20"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x7ff8def1ca30"/></to>
    </wire>
    <wire loc="80:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7ff8def25bc0"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7ff8def11a30"/></to>
    </wire>
    <wire loc="71:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7ff8def2dbc0"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7ff8def19a30"/></to>
    </wire>
    <wire loc="83:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7ff8def22bc0"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x7ff8def0ebc0"/></to>
    </wire>
    <wire loc="78:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7ff8def27bc0"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x7ff8def14a30"/></to>
    </wire>
    <wire loc="69:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7ff8def2fc80"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7ff8def1ba30"/></to>
    </wire>
    <wire loc="81:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7ff8def24c40"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x7ff8def10bc0"/></to>
    </wire>
    <wire loc="72:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7ff8def2bbc0"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7ff8def18a30"/></to>
    </wire>
    <wire loc="76:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7ff8def29bc0"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7ff8def16a30"/></to>
    </wire>
    <wire loc="67:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7ff8def35dc0"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x7ff8def1da30"/></to>
    </wire>
    <wire loc="79:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7ff8def26bc0"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7ff8def13a30"/></to>
    </wire>
    <wire loc="131:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7ff8de9de160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de9d2880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7ff8de9c70a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7ff8de9d00a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de9bc500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7ff8de9be500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de9dc490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7ff8de9c4880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de9bf500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7ff8de9ca880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7ff8de9cb0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de9e0a90"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8dedec680"/></to>
    </wire>
    <wire loc="56:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8dedec680"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8dede6920"/></to>
    </wire>
    <wire loc="138:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de9dbe00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7ff8de9da490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7ff8de9c3c80"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7ff8de9dabe0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de9bfce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7ff8de9c40a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7ff8de9d5670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7ff8de9c50a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7ff8de9c7880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7ff8de9c5880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de9bdce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7ff8de9bece0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7ff8de9cb880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7ff8de9c60a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7ff8de9c0ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7ff8de9cf880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de9bcce0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7ff8de9df480"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7ff8de9d8670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7ff8de9d4670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7ff8de9c90a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7ff8de9c9880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de9d20a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de9d92f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7ff8de9d8020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de9db7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7ff8de9c2500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7ff8de9bd500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7ff8de9ca0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7ff8de9c6880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7ff8de9dee00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7ff8de9cc0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7ff8de9d9940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7ff8de9cc880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7ff8de9c30a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de9bb9b0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7ff8dede2bb0"/></to>
    </wire>
    <wire loc="53:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8deddf020"/></to>
    </wire>
    <wire loc="54:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8deddfdb0"/></to>
    </wire>
    <wire loc="51:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8dedef960"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8dede3810"/></to>
    </wire>
    <wire loc="55:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8deddeba0"/></to>
    </wire>
    <wire loc="59:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="WorkingState" scoped="" ref="0x7ff8dedda020"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7ff8ded72770"/></to>
    </wire>
    <wire loc="74:../../../..//tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7ff8ded72770"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7ff8ded6d280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7ff8deddd400"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8ded50c40"/></to>
    </wire>
    <wire loc="52:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8ded50c40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8ddabcc30"/></to>
    </wire>
    <wire loc="63:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7ff8deddb080"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7ff8ded4f8f0"/></to>
    </wire>
    <wire loc="53:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7ff8ded4f8f0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7ff8ddab80c0"/></to>
    </wire>
    <wire loc="64:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7ff8dedd1680"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7ff8dea09020"/></to>
    </wire>
    <wire loc="54:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7ff8dea09020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7ff8ddab72b0"/></to>
    </wire>
    <wire loc="67:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7ff8deddadf0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7ff8df53d260"/></to>
    </wire>
    <wire loc="88:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <from><interface-ref name="grant" scoped="" ref="0x7ff8dedcc120"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../..//tos/system/StateImplC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7ff8ded6d280"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7ff8ded68b70"/></to>
    </wire>
    <wire loc="110:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7ff8ddab72b0"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7ff8decde510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7ff8ddab80c0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7ff8dece2dd0"/></to>
    </wire>
    <wire loc="105:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8ddabcc30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8dece7a20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="114:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8ddaba8f0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8ddaaf2c0"/></to>
    </wire>
    <wire loc="64:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8ddaaf2c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8deb6a8a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7ff8dece2dd0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7ff8dec65440"/></to>
    </wire>
    <wire loc="108:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7ff8ddab86d0"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7ff8dece1480"/></to>
    </wire>
    <wire loc="92:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7ff8dece1480"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7ff8dec65a50"/></to>
    </wire>
    <wire loc="111:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7ff8decdc600"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7ff8ddab7a50"/></to>
    </wire>
    <wire loc="115:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8ddaa1760"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dece25e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7ff8decdd370"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8ddab0640"/></to>
    </wire>
    <wire loc="63:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8ddab0640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8deb6b5c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="117:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7ff8decd76a0"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7ff8ddaaac10"/></to>
    </wire>
    <wire loc="67:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7ff8ddaaac10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7ff8deb6fa80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dece25e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dec67c40"/></to>
    </wire>
    <wire loc="93:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7ff8decde510"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7ff8dec64700"/></to>
    </wire>
    <wire loc="88:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8dece7a20"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8dec68e80"/></to>
    </wire>
    <wire loc="90:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7ff8dec63e00"/></from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7ff8decdc600"/></to>
    </wire>
    <wire loc="94:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7ff8dec63060"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7ff8decdd370"/></to>
    </wire>
    <wire loc="95:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7ff8dec5ede0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7ff8decd76a0"/></to>
    </wire>
    <wire loc="98:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7ff8dec62490"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7ff8dec56860"/></to>
    </wire>
    <wire loc="85:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7ff8dec56860"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7ff8dec49020"/></to>
    </wire>
    <wire loc="101:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7ff8dec5d5a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7ff8df53d260"/></to>
    </wire>
    <wire loc="102:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <from><interface-ref name="signalDone_task" scoped="" ref="0x7ff8dec5cc50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7ff8dec4b8a0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7ff8dec44750"/></to>
    </wire>
    <wire loc="86:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7ff8dec4f3b0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7ff8dec45dc0"/></to>
    </wire>
    <wire loc="90:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7ff8dec16700"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7ff8df49fcc0"/></to>
    </wire>
    <wire loc="91:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7ff8dec14670"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7ff8df49bcc0"/></to>
    </wire>
    <wire loc="92:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7ff8dec12670"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7ff8df499cc0"/></to>
    </wire>
    <wire loc="93:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7ff8dec10670"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7ff8df492cc0"/></to>
    </wire>
    <wire loc="94:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7ff8dec0e670"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7ff8df494cc0"/></to>
    </wire>
    <wire loc="14:../../../..//tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7ff8dec1b5b0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7ff8deac3430"/></to>
    </wire>
    <wire loc="68:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7ff8ddaa9440"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7ff8deb6c9a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7ff8ddaa9a50"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7ff8deacf880"/></to>
    </wire>
    <wire loc="11:../../../..//tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7ff8deacf880"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7ff8deac3430"/></to>
    </wire>
    <wire loc="71:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7ff8ddaae2b0"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7ff8dec56860"/></to>
    </wire>
    <wire loc="66:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8ddaafa60"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8deb68130"/></to>
    </wire>
    <wire loc="58:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8deb68130"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8dead7060"/></to>
    </wire>
    <wire loc="65:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8deb67020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8ddaa1760"/></to>
    </wire>
    <wire loc="56:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8deb6a8a0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8dead9bf0"/></to>
    </wire>
    <wire loc="106:../../../..//tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8dead9bf0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8dda31850"/></to>
    </wire>
    <wire loc="51:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7ff8deb6fa80"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7ff8deb655c0"/></to>
    </wire>
    <wire loc="55:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8deb6b5c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8deadae60"/></to>
    </wire>
    <wire loc="105:../../../..//tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8deadae60"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8dda33970"/></to>
    </wire>
    <wire loc="52:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7ff8deb6c9a0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7ff8deb53020"/></to>
    </wire>
    <wire loc="108:../../../..//tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8dead7060"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8dda30c30"/></to>
    </wire>
    <wire loc="57:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dead7930"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8deb67020"/></to>
    </wire>
    <wire loc="59:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8deb524b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8dead7060"/></to>
    </wire>
    <wire loc="62:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7ff8deb53690"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7ff8dec4f3b0"/></to>
    </wire>
    <wire loc="63:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7ff8deb53e70"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7ff8dec4b8a0"/></to>
    </wire>
    <wire loc="107:../../../..//tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7ff8dead8400"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7ff8dda30020"/></to>
    </wire>
    <wire loc="109:../../../..//tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dda2f590"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dead7930"/></to>
    </wire>
    <wire loc="111:../../../..//tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7ff8dda2fd50"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7ff8dda37750"/></to>
    </wire>
    <wire loc="75:../../../..//tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7ff8dda2c020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../..//tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7ff8deabc250"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7ff8dec49020"/></to>
    </wire>
    <wire loc="18:../../../..//tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7ff8deab8d40"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7ff8df49fcc0"/></to>
    </wire>
    <wire loc="19:../../../..//tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7ff8deab6cb0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7ff8df499cc0"/></to>
    </wire>
    <wire loc="153:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8de9a1c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7ff8de9acda0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8de9a5b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de99f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7ff8de998e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7ff8de99fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de98b2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7ff8de98e2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de9aa120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7ff8de993670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de98f2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7ff8de9a4c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de9a3c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7ff8de999670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7ff8de99ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7ff8de99e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de9ad760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8dedec680"/></to>
    </wire>
    <wire loc="138:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de9a9aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7ff8de9a7120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7ff8de992a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7ff8de9a7870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de98fad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8de9aadc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7ff8de994e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7ff8de9a3480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de9a4480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7ff8de9ac750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7ff8de996e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7ff8de997670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7ff8de994670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de98cad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7ff8de98ead0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7ff8de99a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7ff8de997e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7ff8de990ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7ff8de99d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de98bad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7ff8de9ac100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7ff8de9a5370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7ff8de9a1480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7ff8de999e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7ff8de99ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7ff8de998670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7ff8de9a0670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7ff8de9ab450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de9a0e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de9a6020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7ff8de9a6cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7ff8de9902f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7ff8de991ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de9a9450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7ff8de9912f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7ff8de98c2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7ff8de99ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7ff8de996670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7ff8de9abaa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7ff8de9aa770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7ff8de99de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7ff8de9a6670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7ff8de99c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7ff8de993e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de98a7a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8de975c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7ff8de980da0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8de978b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de973670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7ff8de96be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7ff8de973e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de95f2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7ff8de9612f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de97d120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7ff8de967670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de9622f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7ff8de977c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de976c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7ff8de96d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7ff8de96fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7ff8de971670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de981760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8dedec680"/></to>
    </wire>
    <wire loc="138:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de97caa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7ff8de97b120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7ff8de966a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7ff8de97b870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de962ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8de97ddc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7ff8de968e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7ff8de976480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de977480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7ff8de980750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7ff8de969e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7ff8de96a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7ff8de968670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de960ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7ff8de961ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7ff8de96e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7ff8de96ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7ff8de963ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7ff8de970670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de95fad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7ff8de980100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7ff8de978370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7ff8de975480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7ff8de96de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7ff8de971e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7ff8de96b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7ff8de974670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7ff8de97e450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de974e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de97a020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7ff8de97acc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7ff8de9632f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7ff8de965ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de97c450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7ff8de9652f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7ff8de9602f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7ff8de96ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7ff8de969670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7ff8de97eaa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7ff8de97d770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7ff8de970e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7ff8de97a670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7ff8de96f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7ff8de967e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de95d7a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:../../../..//tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7ff8de937880"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7ff8de92c020"/></to>
    </wire>
    <wire loc="20:../../../..//tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7ff8de92c020"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7ff8de927140"/></to>
    </wire>
    <wire loc="16:../../../..//tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7ff8de922bd0"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7ff8de92bc50"/></to>
    </wire>
    <wire loc="21:../../../..//tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7ff8de92bc50"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7ff8de90e150"/></to>
    </wire>
    <wire loc="17:../../../..//tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="PowerControl" scoped="" ref="0x7ff8de926530"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7ff8de8c4a20"/></to>
    </wire>
    <wire loc="18:../../../..//tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7ff8de912540"/></from>
      <to><interface-ref name="Gpio" scoped="" ref="0x7ff8de913590"/></to>
    </wire>
    <wire loc="11:../../../..//tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="Gpio" scoped="" ref="0x7ff8de913590"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7ff8de8c29e0"/></to>
    </wire>
    <wire loc="18:../../../..//tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7ff8de909950"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7ff8de910ca0"/></to>
    </wire>
    <wire loc="49:../../../..//tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7ff8de910ca0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7ff8de8e6a90"/></to>
    </wire>
    <wire loc="19:../../../..//tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7ff8de90e9f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x7ff8de912540"/></to>
    </wire>
    <wire loc="50:../../../..//tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7ff8de8d6020"/></from>
      <to><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7ff8de8d0530"/></to>
    </wire>
    <wire loc="54:../../../..//tos/chips/msp430/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7ff8de8d0530"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7ff8de8cce50"/></to>
    </wire>
    <wire loc="55:../../../..//tos/chips/msp430/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8de8c9020"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7ff8df895060"/></to>
    </wire>
    <wire loc="9:../../../..//tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8de8c1c50"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7ff8df4ea810"/></to>
    </wire>
    <wire loc="58:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="EnergyIndicator" scoped="" ref="0x7ff8de8a6990"/></from>
      <to><interface-ref name="EnergyIndicator" scoped="" ref="0x7ff8de89b900"/></to>
    </wire>
    <wire loc="59:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ByteIndicator" scoped="" ref="0x7ff8de8a8150"/></from>
      <to><interface-ref name="ByteIndicator" scoped="" ref="0x7ff8de89a0f0"/></to>
    </wire>
    <wire loc="66:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="BackoffTimer" scoped="" ref="0x7ff8de89aae0"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7ff8df09b220"/></to>
    </wire>
    <wire loc="69:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7ff8de88e500"/></from>
      <to><interface-ref name="CCA" scoped="" ref="0x7ff8def973e0"/></to>
    </wire>
    <wire loc="70:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7ff8de888820"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7ff8def96690"/></to>
    </wire>
    <wire loc="71:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7ff8de886b40"/></from>
      <to><interface-ref name="SFD" scoped="" ref="0x7ff8def91370"/></to>
    </wire>
    <wire loc="74:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7ff8de88f880"/></from>
      <to><interface-ref name="CaptureSFD" scoped="" ref="0x7ff8def555a0"/></to>
    </wire>
    <wire loc="77:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7ff8de882020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8de7e7c30"/></to>
    </wire>
    <wire loc="126:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8de7e7c30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8dedef960"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de882d10"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de7e68f0"/></to>
    </wire>
    <wire loc="125:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de7e68f0"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8dedec680"/></to>
    </wire>
    <wire loc="79:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7ff8de87f6d0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7ff8de7e52f0"/></to>
    </wire>
    <wire loc="129:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7ff8de7e52f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7ff8de87fde0"/></from>
      <to><interface-ref name="STXON" scoped="" ref="0x7ff8de7e4cc0"/></to>
    </wire>
    <wire loc="133:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7ff8de7e4cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de87e530"/></from>
      <to><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de7e2370"/></to>
    </wire>
    <wire loc="134:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de7e2370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de87ec60"/></from>
      <to><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de7e1d00"/></to>
    </wire>
    <wire loc="138:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de7e1d00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de880e00"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de7dbc60"/></to>
    </wire>
    <wire loc="151:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de7dbc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de881780"/></from>
      <to><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de7c27a0"/></to>
    </wire>
    <wire loc="196:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de7c27a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de880550"/></from>
      <to><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de7c72f0"/></to>
    </wire>
    <wire loc="186:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de7c72f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de87d3e0"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de7dc480"/></to>
    </wire>
    <wire loc="148:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de7dc480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de87c5e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de7d9e50"/></to>
    </wire>
    <wire loc="155:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de7d9e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de87b020"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de7d8670"/></to>
    </wire>
    <wire loc="156:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de7d8670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7ff8de87de80"/></from>
      <to><interface-ref name="STXENC" scoped="" ref="0x7ff8de7df7b0"/></to>
    </wire>
    <wire loc="142:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7ff8de7df7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de87a9c0"/></from>
      <to><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de7c5ad0"/></to>
    </wire>
    <wire loc="191:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de7c5ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7ff8de87b890"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7ff8de7c62f0"/></to>
    </wire>
    <wire loc="188:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7ff8de7c62f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7ff8de87a130"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7ff8de7c6ad0"/></to>
    </wire>
    <wire loc="189:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7ff8de7c6ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7ff8de874d40"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7ff8de7b6df0"/></to>
    </wire>
    <wire loc="62:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7ff8de7b6df0"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7ff8de7ae550"/></to>
    </wire>
    <wire loc="98:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de896d00"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de730670"/></to>
    </wire>
    <wire loc="99:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de895bb0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de72c0c0"/></to>
    </wire>
    <wire loc="100:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7ff8de894950"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7ff8de72b550"/></to>
    </wire>
    <wire loc="101:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7ff8de889be0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7ff8de723480"/></to>
    </wire>
    <wire loc="61:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7ff8de723480"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7ff8de7158b0"/></to>
    </wire>
    <wire loc="104:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7ff8de8776c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7ff8df53d260"/></to>
    </wire>
    <wire loc="153:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8de7dac60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7ff8de7e4020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8de7ddc70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7ff8de7d0e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7ff8de7d8e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de7c42f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7ff8de7cc670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7ff8de7dcc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7ff8de7d2670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7ff8de7d4e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7ff8de7d6670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7ff8de7e0370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7ff8de7cba70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7ff8de7e0ac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de7c7ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8de7e1060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7ff8de7cde50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7ff8de7db480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7ff8de7e5940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7ff8de7cee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7ff8de7cf670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7ff8de7cd670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7ff8de7d3670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7ff8de7cfe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7ff8de7c8ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7ff8de7d5670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de7c4ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7ff8de7dd490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7ff8de7da480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7ff8de7d2e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7ff8de7d6e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7ff8de7d0670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7ff8de7d9670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7ff8de7e4670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de7df160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7ff8de7dfe00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7ff8de7c82f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7ff8de7caad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de7e16b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7ff8de7ca2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7ff8de7c52f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7ff8de7d3e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7ff8de7ce670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7ff8de7e29c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7ff8de7d5e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7ff8de7d4670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7ff8de7cce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketIndicator" scoped="" ref="0x7ff8de7b2020"/></from>
      <to><interface-ref name="PacketIndicator" scoped="" ref="0x7ff8de7ad7c0"/></to>
    </wire>
    <wire loc="59:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7ff8de798150"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7ff8df53d260"/></to>
    </wire>
    <wire loc="68:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7ff8de7ac020"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7ff8def96690"/></to>
    </wire>
    <wire loc="69:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7ff8de7ab380"/></from>
      <to><interface-ref name="FIFO" scoped="" ref="0x7ff8def959c0"/></to>
    </wire>
    <wire loc="70:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7ff8de7aa6b0"/></from>
      <to><interface-ref name="FIFOP" scoped="" ref="0x7ff8def94cf0"/></to>
    </wire>
    <wire loc="71:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7ff8de7a9a50"/></from>
      <to><interface-ref name="InterruptFIFOP" scoped="" ref="0x7ff8def5ae30"/></to>
    </wire>
    <wire loc="72:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7ff8de7a86e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8de5ccd00"/></to>
    </wire>
    <wire loc="126:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8de5ccd00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8dedef960"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de7a7530"/></from>
      <to><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de5a9ad0"/></to>
    </wire>
    <wire loc="195:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de5a9ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de7a6ad0"/></from>
      <to><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de5c76b0"/></to>
    </wire>
    <wire loc="137:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de5c76b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7ff8de7a63a0"/></from>
      <to><interface-ref name="SACK" scoped="" ref="0x7ff8de5c5370"/></to>
    </wire>
    <wire loc="139:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7ff8de5c5370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de7a5330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de730670"/></to>
    </wire>
    <wire loc="77:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de7a41e0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de72c0c0"/></to>
    </wire>
    <wire loc="78:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7ff8de7a1d70"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7ff8de72b550"/></to>
    </wire>
    <wire loc="79:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7ff8de7a4b90"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7ff8df158dc0"/></to>
    </wire>
    <wire loc="81:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de79c3e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de5bee50"/></to>
    </wire>
    <wire loc="155:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de5bee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de79ccb0"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de5bd670"/></to>
    </wire>
    <wire loc="156:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de5bd670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de79eb10"/></from>
      <to><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de5c4160"/></to>
    </wire>
    <wire loc="141:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de5c4160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de79a6d0"/></from>
      <to><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de5a92f0"/></to>
    </wire>
    <wire loc="192:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de5a92f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7ff8de79b590"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7ff8de5ab2f0"/></to>
    </wire>
    <wire loc="188:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7ff8de5ab2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7ff8de79be00"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7ff8de5abad0"/></to>
    </wire>
    <wire loc="189:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7ff8de5abad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de799020"/></from>
      <to><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de5adad0"/></to>
    </wire>
    <wire loc="187:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de5adad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7ff8de7998b0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7ff8de5ca300"/></to>
    </wire>
    <wire loc="129:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7ff8de5ca300"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <from><interface-ref name="receiveDone_task" scoped="" ref="0x7ff8de78c9d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7ff8de6b57c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7ff8df021020"/></to>
    </wire>
    <wire loc="65:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTime32khz" scoped="" ref="0x7ff8de70f820"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7ff8de6be4e0"/></to>
    </wire>
    <wire loc="69:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7ff8de711b80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7ff8de6a9610"/></to>
    </wire>
    <wire loc="59:../../../..//tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7ff8de6a9610"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7ff8de5ef2b0"/></to>
    </wire>
    <wire loc="58:../../../..//tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7ff8de6ad020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8de5fd150"/></to>
    </wire>
    <wire loc="57:../../../..//tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ff8de6af130"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8de679020"/></to>
    </wire>
    <wire loc="52:../../../..//tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ff8de679020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8dd9289d0"/></to>
    </wire>
    <wire loc="61:../../../..//tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7ff8de5f7640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8de64c2f0"/></to>
    </wire>
    <wire loc="62:../../../..//tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7ff8de647850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7ff8de679870"/></to>
    </wire>
    <wire loc="53:../../../..//tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7ff8de679870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7ff8dd9215f0"/></to>
    </wire>
    <wire loc="63:../../../..//tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7ff8de5ee690"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7ff8de699b70"/></to>
    </wire>
    <wire loc="50:../../../..//tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7ff8de699b70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7ff8de690610"/></to>
    </wire>
    <wire loc="51:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ff8dd9289d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8dd90c360"/></to>
    </wire>
    <wire loc="55:../../../..//tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7ff8dd91bd20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7ff8dd927260"/></to>
    </wire>
    <wire loc="52:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7ff8dd927260"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7ff8dd90cbf0"/></to>
    </wire>
    <wire loc="56:../../../..//tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7ff8dd91e9b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7ff8de699b70"/></to>
    </wire>
    <wire loc="54:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8dd908dd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8dd911020"/></to>
    </wire>
    <wire loc="49:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8dd911020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8df0764d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8dd906440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8dd910760"/></to>
    </wire>
    <wire loc="50:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8dd910760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8df073280"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8dd905760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8dd90fa80"/></to>
    </wire>
    <wire loc="51:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8dd90fa80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8df072ba0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../..//tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7ff8de68db90"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7ff8df017020"/></to>
    </wire>
    <wire loc="74:../../../..//tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7ff8de6449c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../..//tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7ff8de5f2a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../..//tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8de5e58c0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7ff8de5dc2c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../..//tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7ff8de5dc2c0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7ff8de6ad020"/></to>
    </wire>
    <wire loc="153:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8de5bfc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7ff8de5c9020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8de5c3c70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7ff8de5b6e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7ff8de5bde50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de5c8370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7ff8de5b1670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de5ad2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7ff8de5c2c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de5c1c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7ff8de5b7670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7ff8de5b9e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7ff8de5bc670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de5cb970"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8dedec680"/></to>
    </wire>
    <wire loc="138:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de5c7d00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7ff8de5b0a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7ff8de5c5ac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8de5c7060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7ff8de5b2e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7ff8de5c1480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de5c2480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7ff8de5ca950"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7ff8de5b4e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7ff8de5b5670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7ff8de5b2670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de5aaad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7ff8de5b8670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7ff8de5b5e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7ff8de5aead0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7ff8de5bb670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7ff8de5c3490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7ff8de5bf480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7ff8de5b7e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7ff8de5bce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7ff8de5b6670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7ff8de5be670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7ff8de5c9670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7ff8de5c4e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7ff8de5ae2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7ff8de5afad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7ff8de5af2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7ff8de5aa2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7ff8de5b8e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7ff8de5b4670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7ff8de5c9cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7ff8de5c89c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7ff8de5bbe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7ff8de5c47b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7ff8de5b9670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7ff8de5b1e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de5a87a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../..//tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7ff8de57a920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7ff8de577940"/></to>
    </wire>
    <wire loc="54:../../../..//tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7ff8de5809a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7ff8de577080"/></to>
    </wire>
    <wire loc="56:../../../..//tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7ff8de55ae60"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7ff8de55e020"/></to>
    </wire>
    <wire loc="60:../../../..//tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7ff8de559ae0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7ff8de55b690"/></to>
    </wire>
    <wire loc="74:../../../..//tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7ff8de55b690"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7ff8ded6d280"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../..//tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7ff8de5588f0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7ff8de57ca20"/></to>
    </wire>
    <wire loc="62:../../../..//tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de557170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de72c0c0"/></to>
    </wire>
    <wire loc="57:../../../..//tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="DuplicateReceive" scoped="" ref="0x7ff8de53d200"/></from>
      <to><interface-ref name="DuplicateReceive" scoped="" ref="0x7ff8de539570"/></to>
    </wire>
    <wire loc="58:../../../..//tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7ff8de5383f0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7ff8de53d950"/></to>
    </wire>
    <wire loc="62:../../../..//tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de538a70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de72c0c0"/></to>
    </wire>
    <wire loc="94:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7ff8de500d70"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7ff8de50a6b0"/></to>
    </wire>
    <wire loc="95:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7ff8de4ffb10"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7ff8de50a020"/></to>
    </wire>
    <wire loc="100:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de4fe2f0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de730670"/></to>
    </wire>
    <wire loc="101:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de4fd170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de72c0c0"/></to>
    </wire>
    <wire loc="102:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7ff8de4fdb70"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7ff8de4af410"/></to>
    </wire>
    <wire loc="184:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <from><interface-ref name="grantTask" scoped="" ref="0x7ff8de4d1db0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SendState" scoped="" ref="0x7ff8de4a3800"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7ff8de49f580"/></to>
    </wire>
    <wire loc="74:../../../..//tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7ff8de49f580"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7ff8ded6d280"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../..//tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8de48a1c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8df1e5020"/></to>
    </wire>
    <wire loc="56:../../../..//tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7ff8de3bec30"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7ff8df23a2d0"/></to>
    </wire>
    <wire loc="55:../../../..//tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7ff8de3b9970"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7ff8df23b630"/></to>
    </wire>
    <wire loc="56:../../../..//tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7ff8de3b85a0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7ff8df23a2d0"/></to>
    </wire>
    <wire loc="59:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7ff8de11fd70"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7ff8de387b10"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7ff8de11d650"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7ff8de3842c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7ff8de1ea1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8de3897c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x7ff8dd80e490"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x7ff8de11c020"/></to>
    </wire>
    <wire loc="67:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7ff8de1e9740"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x7ff8dd810200"/></to>
    </wire>
    <wire loc="52:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="MultiChannel" scoped="" ref="0x7ff8de3852e0"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x7ff8de37b370"/></to>
    </wire>
    <wire loc="54:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="DMAExtension" scoped="" ref="0x7ff8de37fa70"/></from>
      <to><interface-ref name="DMAExtension" scoped="" ref="0x7ff8de3781d0"/></to>
    </wire>
    <wire loc="53:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7ff8de3842c0"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x7ff8de379320"/></to>
    </wire>
    <wire loc="51:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x7ff8de387b10"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x7ff8de37dd00"/></to>
    </wire>
    <wire loc="50:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8de3897c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8de208520"/></to>
    </wire>
    <wire loc="98:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7ff8de208520"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7ff8dd7f89d0"/></to>
    </wire>
    <wire loc="57:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7ff8de378af0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8de207b20"/></to>
    </wire>
    <wire loc="100:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8de207b20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8dd7f6020"/></to>
    </wire>
    <wire loc="58:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7ff8de36a8d0"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7ff8de2970c0"/></to>
    </wire>
    <wire loc="62:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7ff8de3636d0"/></from>
      <to><interface-ref name="Port60" scoped="" ref="0x7ff8df4b19a0"/></to>
    </wire>
    <wire loc="63:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7ff8de361640"/></from>
      <to><interface-ref name="Port61" scoped="" ref="0x7ff8df4af9a0"/></to>
    </wire>
    <wire loc="64:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7ff8de35f540"/></from>
      <to><interface-ref name="Port62" scoped="" ref="0x7ff8df4ad9a0"/></to>
    </wire>
    <wire loc="65:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7ff8de35d540"/></from>
      <to><interface-ref name="Port63" scoped="" ref="0x7ff8df4ab9a0"/></to>
    </wire>
    <wire loc="66:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7ff8de35b540"/></from>
      <to><interface-ref name="Port64" scoped="" ref="0x7ff8df4a99a0"/></to>
    </wire>
    <wire loc="67:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7ff8de359540"/></from>
      <to><interface-ref name="Port65" scoped="" ref="0x7ff8df4a79a0"/></to>
    </wire>
    <wire loc="68:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7ff8de357540"/></from>
      <to><interface-ref name="Port66" scoped="" ref="0x7ff8df4a59a0"/></to>
    </wire>
    <wire loc="69:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7ff8de355540"/></from>
      <to><interface-ref name="Port67" scoped="" ref="0x7ff8df4a39a0"/></to>
    </wire>
    <wire loc="74:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7ff8de375780"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7ff8df895060"/></to>
    </wire>
    <wire loc="75:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7ff8de368020"/></from>
      <to><interface-ref name="ControlA0" scoped="" ref="0x7ff8df885b10"/></to>
    </wire>
    <wire loc="76:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7ff8de367560"/></from>
      <to><interface-ref name="ControlA1" scoped="" ref="0x7ff8df88b0c0"/></to>
    </wire>
    <wire loc="77:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7ff8de3659e0"/></from>
      <to><interface-ref name="CompareA0" scoped="" ref="0x7ff8df87dcf0"/></to>
    </wire>
    <wire loc="78:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7ff8de364850"/></from>
      <to><interface-ref name="CompareA1" scoped="" ref="0x7ff8df882aa0"/></to>
    </wire>
    <wire loc="99:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8de2073a0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8dd7f7850"/></to>
    </wire>
    <wire loc="101:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dd7f6910"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8de205570"/></to>
    </wire>
    <wire loc="103:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7ff8dd7f4120"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x7ff8dd7fa9c0"/></to>
    </wire>
    <wire loc="68:../../../..//tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7ff8dd7f4c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="ClientResource" scoped="" ref="0x7ff8de1efd20"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x7ff8de184cb0"/></to>
    </wire>
    <wire loc="65:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x7ff8de180030"/></from>
      <to><interface-ref name="AdcResource" scoped="" ref="0x7ff8de1ea1d0"/></to>
    </wire>
    <wire loc="66:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="Config" scoped="" ref="0x7ff8de17d020"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x7ff8de1e9740"/></to>
    </wire>
    <wire loc="68:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7ff8de180d80"/></from>
      <to><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7ff8de1e0240"/></to>
    </wire>
    <wire loc="69:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7ff8de17f9c0"/></from>
      <to><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7ff8de1e0e00"/></to>
    </wire>
    <wire loc="70:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOnTimer" scoped="" ref="0x7ff8de1dca90"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8de14b4e0"/></to>
    </wire>
    <wire loc="52:../../../..//tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8de14b4e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7ff8de5dc2c0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffTimer" scoped="" ref="0x7ff8de1d6020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8de144020"/></to>
    </wire>
    <wire loc="52:../../../..//tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8de144020"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7ff8de5dc2c0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7ff8de1d16c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7ff8de13eb40"/></to>
    </wire>
    <wire loc="52:../../../..//tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7ff8de13eb40"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7ff8de5dc2c0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x7ff8de1de9a0"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x7ff8de2970c0"/></to>
    </wire>
    <wire loc="52:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <from><interface-ref name="switchOff" scoped="" ref="0x7ff8de17a7f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../..//tos/system/MainC.nc">
      <documentation loc="45:../../../..//tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="40:../../../..//tos/platforms/telosa/PlatformC.nc">
      <documentation loc="34:../../../..//tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../..//tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../../..//tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../..//tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../../..//tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../..//tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../../..//tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../..//tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../..//tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../../..//tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../../..//tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../../..//tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../../..//tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../..//tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../../..//tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../../..//tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../../..//tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="SendingBufferC" loc="4:SendingBufferC.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../../..//tos/system/LedsC.nc">
      <documentation loc="34:../../../..//tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../../..//tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../../..//tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="SendingBuffer_AppC.AMSenderC" loc="47(SendingBuffer_AppC.AMSenderC):../../../..//tos/system/AMSenderC.nc">
      <documentation loc="33:../../../..//tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SendingBuffer_AppC.AMSenderC.SenderC" loc="47(SendingBuffer_AppC.AMSenderC.SenderC):../../../..//tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../../..//tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SendingBuffer_AppC.AMSenderC.SenderC.AMQueueEntryP" loc="43(SendingBuffer_AppC.AMSenderC.SenderC.AMQueueEntryP):../../../..//tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../..//tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../../..//tos/system/AMQueueP.nc">
      <documentation loc="33:../../../..//tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../../..//tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../..//tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="59:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <documentation loc="49:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer on the Telos platform.</short>
        <long>&#10;&#10; The Active Message layer on the Telos platform. This is a naming wrapper&#10; around the CC2420 Active Message layer.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.9 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ActiveMessageC" loc="53:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="CC2420RadioC" loc="41:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <documentation loc="24:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
        <short>&#10; Radio wiring for the CC2420.</short>
        <long>&#10; Radio wiring for the CC2420.  This layer seperates the common&#10; wiring of the lower-layer components of the CC2420 stack and makes&#10; them available to clients like the AM stack and the IEEE802.15.4&#10; stack.&#10;&#10; This component provides the highest-level internal interface to&#10; other components of the CC2420 stack.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10; @author Stephen Dawson-Haggerty&#10; @version $Revision: 1.2 $ $Date: 2009/08/20 01:37:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaC" loc="42:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
        <short>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.</short>
        <long>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-05-14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaP" loc="37:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc" safe="">
      <documentation loc="32:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.12 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ControlC" loc="42:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
        <short>&#10; Implementation for configuring a ChipCon CC2420 radio.</short>
        <long>&#10; Implementation for configuring a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/05/14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ControlP" loc="42:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc" safe="">
      <documentation loc="32:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Urs Hunkeler (ReadRssi implementation)&#10; @version $Revision: 1.7 $ $Date: 2008/06/24 04:07:28 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AlarmMultiplexC" loc="43:../../../..//tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
        <short>&#10; A component that multiplexes the use of an alarm.</short>
        <long>&#10; A component that multiplexes the use of an alarm. The assumption is&#10; that its use is mutually exclusive and users check whether the&#10; events are for them.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm" loc="40(AlarmMultiplexC.Alarm):../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <documentation loc="32:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420AlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C):../../../..//tos/chips/msp430/timer/Alarm32khz32C.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC):../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer" loc="37(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer):../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm" loc="43(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm):../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="41:../../../..//tos/chips/msp430/timer/Counter32khz32C.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Counter32khz32C.nc">
        <short>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../..//tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../..//tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C.Transform" loc="54(Counter32khz32C.Transform):../../../..//tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../..//tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform" loc="51(AlarmMultiplexC.Alarm.Alarm32khz32C.Transform):../../../..//tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../..//tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC" loc="40:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <documentation loc="32:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
        <short>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420PinsC.CCAM" loc="42(HplCC2420PinsC.CCAM):../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.CSNM" loc="42(HplCC2420PinsC.CSNM):../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOM" loc="42(HplCC2420PinsC.FIFOM):../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOPM" loc="42(HplCC2420PinsC.FIFOPM):../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.RSTNM" loc="42(HplCC2420PinsC.RSTNM):../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.SFDM" loc="42(HplCC2420PinsC.SFDM):../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.VRENM" loc="42(HplCC2420PinsC.VRENM):../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC" loc="40:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <documentation loc="32:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
        <short>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420InterruptsC.CaptureSFDC" loc="38(HplCC2420InterruptsC.CaptureSFDC):../../../..//tos/chips/msp430/timer/GpioCaptureC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GpioCaptureC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="36:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc" safe="">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptCCAC" loc="43(HplCC2420InterruptsC.InterruptCCAC):../../../..//tos/chips/msp430/pins/Msp430InterruptC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptFIFOPC" loc="43(HplCC2420InterruptsC.InterruptFIFOPC):../../../..//tos/chips/msp430/pins/Msp430InterruptC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="CC2420ControlC.Spi" loc="39(CC2420ControlC.Spi):../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC" loc="37:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:16 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420SpiP" loc="41:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc" safe="">
      <documentation loc="32:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Roman Lim&#10; @author Razvan Musaloie-E.&#10; @author Jeonggil Ko&#10; @version $Revision: 1.4 $ $Date: 2008-06-23 20:25:15 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.WorkingStateC" loc="65(CC2420SpiWireC.WorkingStateC):../../../..//tos/system/StateC.nc">
      <documentation loc="32:../../../..//tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="StateImplC" loc="64:../../../..//tos/system/StateImplC.nc">
      <documentation loc="32:../../../..//tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="StateImplP" loc="64:../../../..//tos/system/StateImplP.nc" safe="">
      <documentation loc="32:../../../..//tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC" loc="40(CC2420SpiWireC.HplCC2420SpiC):../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <documentation loc="32:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC" loc="79(CC2420SpiWireC.HplCC2420SpiC.SpiC):../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Spi0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P" loc="71:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <documentation loc="66:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P.SpiP" loc="73(Msp430SpiNoDma0P.SpiP):../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <documentation loc="66:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430SpiNoDmaP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="31:../../../..//tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="74:../../../..//tos/chips/msp430/usart/HplMsp430Usart0P.nc" safe="">
      <documentation loc="62:../../../..//tos/chips/msp430/usart/HplMsp430Usart0P.nc">
        <short>&#10; Implementation of USART0 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART0 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @author: Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10; @version $Revision: 1.8 $ $Date: 2010-06-04 22:30:21 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC" loc="39(CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC):../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../..//tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../..//tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="89(Msp430UsartShare0P.ArbiterC):../../../..//tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../../..//tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../..//tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="52(Msp430UsartShare0P.ArbiterC.Arbiter):../../../..//tos/system/ArbiterP.nc">
      <documentation loc="30:../../../..//tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../..//tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="37:../../../..//tos/chips/msp430/usart/HplMsp430I2C0P.nc" safe="">
      <documentation loc="32:../../../..//tos/chips/msp430/usart/HplMsp430I2C0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-24 05:32:31 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ControlC.SyncSpiC" loc="39(CC2420ControlC.SyncSpiC):../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ControlC.RssiResource" loc="39(CC2420ControlC.RssiResource):../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../../..//tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../../..//tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LocalIeeeEui64C" loc="11:../../../..//tos/chips/ds2411/LocalIeeeEui64C.nc">
      <configuration/>
    </component>
    <component qname="LocalIeeeEui64P" loc="3:../../../..//tos/chips/ds2411/LocalIeeeEui64P.nc">
      <module/>
    </component>
    <component qname="Ds2411C" loc="7:../../../..//tos/chips/ds2411/Ds2411C.nc">
      <configuration/>
    </component>
    <component qname="Ds2411P" loc="9:../../../..//tos/chips/ds2411/Ds2411P.nc">
      <module/>
    </component>
    <component qname="OneWireMasterC" loc="6:../../../..//tos/lib/onewire/OneWireMasterC.nc">
      <documentation loc="1:../../../..//tos/lib/onewire/OneWireMasterC.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="OneWireMasterP" loc="9:../../../..//tos/lib/onewire/OneWireMasterP.nc">
      <documentation loc="2:../../../..//tos/lib/onewire/OneWireMasterP.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10; Only supports one device on the 1-wire bus.</short>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="39:../../../..//tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/BusyWaitMicroC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BusyWaitMicroC.BusyWaitCounterC" loc="52(BusyWaitMicroC.BusyWaitCounterC):../../../..//tos/lib/timer/BusyWaitCounterC.nc">
      <documentation loc="36:../../../..//tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="BusyWaitCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732df0"/>
            <typename><typedef-ref name="TMicro" ref="0x7ff8df731200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430CounterMicroC" loc="44:../../../..//tos/chips/msp430/timer/Msp430CounterMicroC.nc">
      <documentation loc="34:../../../..//tos/chips/msp430/timer/Msp430CounterMicroC.nc">
        <short>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.</short>
        <long>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.   If your base clock is in units of binary hertz then 1 uis, decimal&#10; hertz it will be 1us.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430CounterMicroC.Counter" loc="42(Msp430CounterMicroC.Counter):../../../..//tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732df0"/>
            <typename><typedef-ref name="TMicro" ref="0x7ff8df731200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplDs2411C" loc="1:../../../..//tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <configuration/>
    </component>
    <component qname="HplDs2411C.MspGpio" loc="42(HplDs2411C.MspGpio):../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="Ds2411PowerControlC" loc="12:../../../..//tos/chips/ds2411/Ds2411PowerControlC.nc">
      <module/>
    </component>
    <component qname="CC2420TransmitC" loc="41:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
        <short>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TransmitP" loc="46:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420TransmitC.Spi" loc="39(CC2420TransmitC.Spi):../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC" loc="39:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
        <short>&#10; Implementation of the receive path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the receive path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveP" loc="45:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc" safe="">
      <documentation loc="32:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Jung Il Choi&#10; @author JeongGil Ko&#10; @author Razvan Musaloiu-E&#10; @version $Revision: 1.21 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC" loc="38:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420PacketP" loc="43:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc" safe="">
      <documentation loc="32:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC.CounterToLocalTimeC" loc="46(CC2420PacketC.CounterToLocalTimeC):../../../..//tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../..//tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../..//tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../..//tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../..//tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../..//tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../..//tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../..//tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../..//tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../..//tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../..//tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../../..//tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../..//tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <value cst="I:6">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../..//tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../..//tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CC2420PacketC.DummyTimer" loc="44(CC2420PacketC.DummyTimer):../../../..//tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../..//tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../..//tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../..//tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC.Spi" loc="39(CC2420ReceiveC.Spi):../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RandomC" loc="43:../../../..//tos/system/RandomC.nc">
      <documentation loc="33:../../../..//tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../../..//tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../../..//tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420CsmaC.StateC" loc="65(CC2420CsmaC.StateC):../../../..//tos/system/StateC.nc">
      <documentation loc="32:../../../..//tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueSendC" loc="38:../../../..//tos/chips/cc2420/unique/UniqueSendC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/unique/UniqueSendC.nc">
        <short>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; </short>
        <long>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueSendP" loc="38:../../../..//tos/chips/cc2420/unique/UniqueSendP.nc" safe="">
      <documentation loc="32:../../../..//tos/chips/cc2420/unique/UniqueSendP.nc">
        <short>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.</short>
        <long>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UniqueSendC.StateC" loc="65(UniqueSendC.StateC):../../../..//tos/system/StateC.nc">
      <documentation loc="32:../../../..//tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueReceiveC" loc="40:../../../..//tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/unique/UniqueReceiveC.nc">
        <short>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; This should sit at the bottom of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueReceiveP" loc="41:../../../..//tos/chips/cc2420/unique/UniqueReceiveP.nc" safe="">
      <documentation loc="32:../../../..//tos/chips/cc2420/unique/UniqueReceiveP.nc">
        <short> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC" loc="62:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
        <short>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.</short>
        <long>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.  They do not include the network byte &#10; responsible for identifying the packing as being sourced from a TinyOS&#10; network.&#10;&#10; TinyOS I-Frames are interoperability packets that do include a network&#10; byte as defined by 6LowPAN specifications.  The I-Frame header type is&#10; the default packet header used in TinyOS networks.&#10;&#10; Since either packet header is acceptable, this layer must do some &#10; preprocessing (sorry) to figure out whether or not it needs to include &#10; the functionality to process I-frames.  If I-Frames are used, then&#10; the network byte is added on the way out and checked on the way in.&#10; If the packet came from a network different from a TinyOS network, the&#10; user may access it through the DispatchP's NonTinyosReceive[] Receive &#10; interface and process it in a different radio stack.&#10;&#10; If T-Frames are used instead, this layer is simply pass-through wiring to the&#10; layer beneath.  &#10;&#10; Define &#34;CC2420_IFRAME_TYPE&#34; to use the interoperability frame and &#10; this layer&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TinyosNetworkP" loc="44:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc" safe="">
      <documentation loc="32:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
        <short>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.</short>
        <long>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.  Filters incoming packets that are not&#10; TinyOS network compatible.  Provides the 6LowpanSnoop interface to&#10; sniff for packets that were not originated from TinyOS.&#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC.FcfsResourceQueueC" loc="42(CC2420TinyosNetworkC.FcfsResourceQueueC):../../../..//tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DummyLplC" loc="41:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Sleep interval is always 0, and duty cycle is always 100%&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DummyLplP" loc="39:../../../..//tos/chips/cc2420/lpl/DummyLplP.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/lpl/DummyLplP.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Wakeup interval is always 0 (always on)&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DummyLplC.StateC" loc="65(DummyLplC.StateC):../../../..//tos/system/StateC.nc">
      <documentation loc="32:../../../..//tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyC" loc="38:../../../..//tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/link/PacketLinkDummyC.nc">
        <short>&#10; Dummy configuration for PacketLink Layer&#10; </short>
        <long>&#10; Dummy configuration for PacketLink Layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyP" loc="38:../../../..//tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/link/PacketLinkDummyP.nc">
        <short>&#10; Dummy module for Packet Link layer&#10; </short>
        <long>&#10; Dummy module for Packet Link layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ActiveMessageP" loc="46:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc" safe="">
      <documentation loc="33:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
        <short>&#10; Active message implementation on top of the CC2420 radio.</short>
        <long>&#10; Active message implementation on top of the CC2420 radio. This&#10; implementation uses the 16-bit addressing mode of 802.15.4: the&#10; only additional byte it adds is the AM id byte, as the first byte&#10; of the data payload.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.22 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SendingBuffer_AppC.R_A" loc="43(SendingBuffer_AppC.R_A):../../../..//tos/system/AMReceiverC.nc">
      <documentation loc="33:../../../..//tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SendingBuffer_AppC.R_B" loc="43(SendingBuffer_AppC.R_B):../../../..//tos/system/AMReceiverC.nc">
      <documentation loc="33:../../../..//tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:11">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SendingBuffer_AppC.Timer1" loc="44(SendingBuffer_AppC.Timer1):../../../..//tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../..//tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="SendingBuffer_AppC.Timer2" loc="44(SendingBuffer_AppC.Timer2):../../../..//tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../..//tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="SendingBuffer_AppC.AutoAdc" loc="43(SendingBuffer_AppC.AutoAdc):../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P" loc="37:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <configuration/>
    </component>
    <component qname="Msp430Adc12ImplP" loc="37:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc" safe="">
      <module/>
    </component>
    <component qname="HplAdc12P" loc="45:../../../..//tos/chips/msp430/adc12/HplAdc12P.nc">
      <documentation loc="36:../../../..//tos/chips/msp430/adc12/HplAdc12P.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter" loc="83(Msp430Adc12P.Arbiter):../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
      <documentation loc="62:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleRoundRobinArbiterC"/>
        <arguments>
          <value cst="S:Msp430Adc12C.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Queue" loc="42(Msp430Adc12P.Arbiter.Queue):../../../..//tos/system/RoundRobinResourceQueueC.nc">
      <documentation loc="33:../../../..//tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Arbiter" loc="49(Msp430Adc12P.Arbiter.Arbiter):../../../..//tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../../..//tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP" loc="50:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <documentation loc="36:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
        <short> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter.</short>
        <long> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter. It checks whether the client's&#10; adc configuration requires the internal reference voltage generator of the&#10; MSP430 to be enabled during the conversion by inspecting the client's&#10; configuration data (using the &#60;code>AdcConfigure&#60;/code> interface). If so it&#10; makes sure that Resource.granted() is held back until the reference voltage&#10; is stable. Clients SHOULD NOT wire to &#60;code>Msp430RefVoltArbiterP&#60;/code> but&#10; to the Resource interface provided by&#10; &#60;code>Msp430Adc12ClientAutoRVGC&#60;/code>.&#10; &#10; @author Jan Hauer&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltGeneratorP" loc="36:../../../..//tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterImplP" loc="36:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOnDelayTimer):../../../..//tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../..//tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffDelayTimer):../../../..//tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../..//tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffSettleTimer):../../../..//tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../..//tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="SendingBuffer_AppC.AutoAdc.Msp430Adc12ConfAlertC" loc="42(SendingBuffer_AppC.AutoAdc.Msp430Adc12ConfAlertC):../../../..//tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7ff8df857890" loc="40:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7ff8df857c30" loc="41:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7ff8df855020" loc="42:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7ff8df8553a0" loc="43:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7ff8df855720" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7ff8df855a90" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7ff8df855e20" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7ff8df854200" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7ff8df8545d0" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7ff8df819e70" loc="40:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7ff8df816270" loc="41:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../../..//tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7ff8df468190" loc="40:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7ff8df468540" loc="41:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7ff8df4688f0" loc="42:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7ff8df468ca0" loc="43:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7ff8df466060" loc="44:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../../..//tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../../..//tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7ff8df2d2e00" loc="47:../../../..//tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../../..//tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../../..//tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7ff8df2b8020" loc="47:../../../..//tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../..//tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../..//tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7ff8df2b4ac0" loc="43:../../../..//tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../..//tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../..//tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7ff8df290c80" loc="45:../../../..//tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplCC2420AlarmC" loc="40:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc" abstract="">
      <documentation loc="32:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz32C" loc="41:../../../..//tos/chips/msp430/timer/Alarm32khz32C.nc" abstract="">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7ff8df0549d0" loc="43:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7ff8df0549d0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../..//tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7ff8df012120" loc="42:../../../..//tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7ff8df012120"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../..//tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../..//tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7ff8deffe270" loc="55:../../../..//tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7ff8deffe270"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7ff8deffea40" loc="56:../../../..//tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7ff8deffea40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7ff8deffee30" loc="57:../../../..//tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7ff8deffee30"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7ff8deffc650" loc="58:../../../..//tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7ff8deffc650"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7ff8deffca20" loc="59:../../../..//tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7ff8deffb290" loc="60:../../../..//tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7ff8deffb290"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../..//tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../..//tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7ff8defdb500" loc="52:../../../..//tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7ff8defdb500"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7ff8defdbcd0" loc="53:../../../..//tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7ff8defdbcd0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7ff8defda120" loc="54:../../../..//tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7ff8defda120"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7ff8defda900" loc="55:../../../..//tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7ff8defda900"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7ff8defdacd0" loc="56:../../../..//tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="GpioCaptureC" loc="38:../../../..//tos/chips/msp430/timer/GpioCaptureC.nc" abstract="" safe="">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430InterruptC" loc="43:../../../..//tos/chips/msp430/pins/Msp430InterruptC.nc" abstract="" safe="">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="CC2420SpiC" loc="39:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="StateC" loc="65:../../../..//tos/system/StateC.nc" abstract="">
      <documentation loc="32:../../../..//tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplCC2420SpiC" loc="40:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Spi0C" loc="79:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDmaP" loc="73:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc" abstract="">
      <documentation loc="66:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../..//tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../..//tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../../..//tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../../..//tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7ff8deb4d020" loc="89:../../../..//tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../..//tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7ff8deb400d0" loc="42:../../../..//tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../../..//tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../..//tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7ff8deb25800" loc="52:../../../..//tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="BusyWaitCounterC" loc="52:../../../..//tos/lib/timer/BusyWaitCounterC.nc" abstract="">
      <documentation loc="36:../../../..//tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7ff8de8e4020" loc="52:../../../..//tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ff8de8e4020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7ff8de8e47b0" loc="52:../../../..//tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8de8e47b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../..//tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../..//tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7ff8de6c0a60" loc="46:../../../..//tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ff8de6c0a60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../..//tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../..//tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../..//tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7ff8de674cc0" loc="46:../../../..//tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ff8de674cc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../../..//tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../..//tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7ff8de63e230" loc="46:../../../..//tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ff8de63e230"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7ff8de63e560" loc="46:../../../..//tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../..//tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../..//tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMReceiverC" loc="43:../../../..//tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="33:../../../..//tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7ff8de3c3390" loc="43:../../../..//tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Adc12ClientAutoRVGC" loc="43:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc" abstract="">
      <documentation loc="33:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SimpleRoundRobinArbiterC" loc="83:../../../..//tos/system/SimpleRoundRobinArbiterC.nc" abstract="">
      <documentation loc="62:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7ff8de260850" loc="83:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
          <component-ref qname="SimpleRoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:../../../..//tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <documentation loc="33:../../../..//tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0x7ff8de2583d0" loc="42:../../../..//tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../../..//tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../../..//tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ConfAlertC" loc="42:../../../..//tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc" abstract="">
      <documentation loc="33:../../../..//tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7ff8df9068d0" loc="58:../../../..//tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df9068d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df906c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7ff8df9073f0" loc="57:../../../..//tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7ff8df9073f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7ff8df907770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8df909880" loc="42:../../../..//tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8df909880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df909c00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7ff8df9008a0" loc="6:../../../..//tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7ff8df9008a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df900c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8df904a70" loc="4:../../../..//tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8df904a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df904df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7ff8df9001c0" loc="5:../../../..//tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7ff8df9001c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df900540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7ff8df8ff020" loc="7:../../../..//tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7ff8df8ff020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df8ff3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8df903c80" loc="2:../../../..//tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8df903c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df8f90a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7ff8df8e2020" loc="39:../../../..//tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7ff8df8e2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df8e23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7ff8df8d86c0" loc="40:../../../..//tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7ff8df8d86c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7ff8df8de660"/>
        <function-ref name="initTimerB" scoped="" ref="0x7ff8df8d8bd0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7ff8df8d8d60"/>
        <function-ref name="initTimerA" scoped="" ref="0x7ff8df8de020"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7ff8df8d8a40"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7ff8df8de1b0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7ff8df8de340"/>
        <function-ref name="initClocks" scoped="" ref="0x7ff8df8de4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8df8df020" loc="39:../../../..//tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8df8df020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df8df3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7ff8df8c83d0" loc="46:../../../..//tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7ff8df8c83d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7ff8df8c7340"/>
        <function-ref name="initTimerB" scoped="" ref="0x7ff8df8c88e0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7ff8df8c8a70"/>
        <function-ref name="initTimerA" scoped="" ref="0x7ff8df8c8c00"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7ff8df8c8750"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7ff8df8c8d90"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7ff8df8c7020"/>
        <function-ref name="initClocks" scoped="" ref="0x7ff8df8c71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7ff8df8c7680" loc="47:../../../..//tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7ff8df8c7680"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7ff8df8c7a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8df8c9cb0" loc="45:../../../..//tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8df8c9cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df8c80a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7ff8df8845a0" loc="42:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7ff8df8845a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df884920"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df884ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df884c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df884dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df883020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df8831b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df883340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df8834d0"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df883660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7ff8df872020" loc="51:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7ff8df872020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df8723a0"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df872530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df8726c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df872850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df8729e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df872b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df872d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df871020"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df8711b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7ff8df87b700" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7ff8df87b700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df87ba80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df87bc10"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df87bda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df87a020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df87a1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df87a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7ff8df85fa20" loc="68:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7ff8df85fa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df85fda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df85e020"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df85e1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df85e340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df85e4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df85e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7ff8df882aa0" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7ff8df882aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df882e20"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df881020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df8811b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df881340"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df8814d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7ff8df865020" loc="61:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7ff8df865020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df8653a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df865530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df8656c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df865850"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df8659e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7ff8df85ca20" loc="71:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7ff8df85ca20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df85cda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df85b020"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df85b1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df85b340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df85b4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df85b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7ff8df86c5a0" loc="55:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7ff8df86c5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df86c920"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df86cab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df86cc40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df86cdd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df86b020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df86b1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df86b340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df86b4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df86b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7ff8df885b10" loc="40:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7ff8df885b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df88c020"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df88c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df88c340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df88c4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df88c660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df88c7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df88c980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df88cb10"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df88cca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7ff8df861a20" loc="66:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7ff8df861a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df861da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df860020"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df8601b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df860340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df8604d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df860660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7ff8df8673e0" loc="59:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7ff8df8673e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df867760"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df8678f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df867a80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df867c10"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df867da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7ff8df8715a0" loc="52:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7ff8df8715a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df871a20"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df871bb0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df871d40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df86f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df86f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df86f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df86f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df86f660"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df86f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7ff8df87a700" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7ff8df87a700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df87aa80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df87ac10"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df87ada0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df874020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df8741b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df874340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7ff8df85ea20" loc="69:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7ff8df85ea20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df85eda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df85d020"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df85d1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df85d340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df85d4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df85d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7ff8df86fbe0" loc="53:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7ff8df86fbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df86e020"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df86e1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df86e340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df86e4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df86e660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df86e7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df86e980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df86eb10"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df86eca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7ff8df881890" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7ff8df881890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df881c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df881da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df87c020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df87c1b0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df87c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7ff8df895060" loc="39:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7ff8df895060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df8953e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df895570"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df895700"/>
        <function-ref name="get" scoped="" ref="0x7ff8df895890"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df895a20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df895bb0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df895d40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df894020"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df8941b0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df894340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df8944d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7ff8df865da0" loc="62:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7ff8df865da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df864180"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df864310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df8644a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df864630"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df8647c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7ff8df88b0c0" loc="41:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7ff8df88b0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df88b440"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df88b5d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df88b760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df88b8f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df88ba80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df88bc10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df88bda0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df884020"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df8841b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7ff8df86ba50" loc="56:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7ff8df86ba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df86bdd0"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df86a020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df86a1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df86a340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df86a4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df86a660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df86a7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df86a980"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df86ab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7ff8df8756d0" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7ff8df8756d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df875a50"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df875be0"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df875d70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df87b020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df87b1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df87b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7ff8df860a20" loc="67:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7ff8df860a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df860da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df85f020"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df85f1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df85f340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df85f4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df85f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7ff8df87dcf0" loc="43:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7ff8df87dcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df8820a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df882230"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df8823c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df882550"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df8826e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7ff8df8661f0" loc="60:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7ff8df8661f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df866570"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df866700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df866890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df866a20"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df866bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7ff8df85da20" loc="70:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7ff8df85da20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df85dda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df85c020"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df85c1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df85c340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df85c4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df85c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7ff8df86d0c0" loc="54:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7ff8df86d0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df86d440"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df86d5d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df86d760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df86d8f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df86da80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df86dc10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df86dda0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df86c020"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df86c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7ff8df8746c0" loc="50:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7ff8df8746c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df874a40"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df874bd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df874d60"/>
        <function-ref name="get" scoped="" ref="0x7ff8df873020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df8731b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df873340"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df8734d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df873660"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df8737f0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df873980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df873b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7ff8df864b80" loc="63:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7ff8df864b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df863020"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df8631b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df863340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df8634d0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df863660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7ff8df862a20" loc="65:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7ff8df862a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df862da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df861020"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df8611b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df861340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df8614d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df861660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7ff8df863a20" loc="64:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7ff8df863a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df862020"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df8621b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df862340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df8624d0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df862660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7ff8df868570" loc="58:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7ff8df868570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df8688f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df868a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df868c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df868da0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df867020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7ff8df869020" loc="57:../../../..//tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7ff8df869020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df8693a0"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df869530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df8696c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df869850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df8699e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df869b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df869d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df868020"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df8681b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7ff8df823aa0" loc="53:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7ff8df823aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df823e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7ff8df823450" loc="52:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7ff8df823450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df8237d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7ff8df821120" loc="54:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7ff8df821120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df8214a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7ff8df824d80" loc="51:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df824d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df823180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7ff8df825540" loc="50:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df825540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df8258c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df825a50"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df825be0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df825d70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df824020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df8241b0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df824340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df8244d0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df824660"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df8247f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df824980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7ff8df81b940" loc="53:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7ff8df81b940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df81bcc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7ff8df81b2f0" loc="52:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7ff8df81b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df81b670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7ff8df81a020" loc="54:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7ff8df81a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df81a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7ff8df81cbf0" loc="51:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df81cbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df81b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7ff8df81d3e0" loc="50:../../../..//tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df81d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df81d760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df81d8f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df81da80"/>
        <function-ref name="get" scoped="" ref="0x7ff8df81dc10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df81dda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df81c020"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df81c1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df81c340"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df81c4d0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df81c660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df81c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7ff8df7cfa90" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7ff8df7cfa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7cfe10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df7ce020"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df7ce1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7ce340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7ce4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df7ce660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7ff8df8179d0" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7ff8df8179d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df817d50"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df7d0020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7d01b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df7d0340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df7d04d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7d0660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df7d07f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df7d0980"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df7d0b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7ff8df7cc020" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df7cc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df7cc3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7ff8df7d0de0" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7ff8df7d0de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7cf180"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df7cf310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df7cf4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df7cf630"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df7cf7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7ff8df7ce930" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df7ce930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df7cecb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df7cee40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7cd020"/>
        <function-ref name="get" scoped="" ref="0x7ff8df7cd1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7cd340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7cd4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df7cd660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7cd7f0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df7cd980"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df7cdb10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df7cdca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7ff8df7c7160" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7ff8df7c7160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7c74e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df7c7670"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df7c7800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7c7990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7c7b20"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df7c7cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7ff8df7c9020" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7ff8df7c9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df7c93a0"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df7c9530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7c96c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df7c9850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df7c99e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7c9b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df7c9d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df7c8020"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df7c81b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7ff8df7c47a0" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df7c47a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df7c4b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7ff8df7c8480" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7ff8df7c8480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7c8800"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df7c8990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df7c8b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df7c8cb0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df7c8e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7ff8df7c5020" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df7c5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df7c53a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df7c5530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7c56c0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df7c5850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7c59e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7c5b70"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df7c5d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7c4020"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df7c41b0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df7c4340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df7c44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7ff8df7bf7a0" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7ff8df7bf7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7bfb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df7bfcb0"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df7bfe40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7be020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7be1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df7be340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7ff8df7c16d0" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7ff8df7c16d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df7c1a50"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df7c1be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7c1d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df7c0020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df7c01b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7c0340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df7c04d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df7c0660"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df7c07f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7ff8df7bdc50" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df7bdc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df7bc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7ff8df7c0ac0" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7ff8df7c0ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7c0e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df7bf020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df7bf1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df7bf340"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df7bf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7ff8df7be610" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df7be610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df7be990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df7beb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7becb0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df7bee40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7bd020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7bd1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df7bd340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7bd4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df7bd660"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df7bd7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df7bd980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7ff8df7b8cb0" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7ff8df7b8cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7b70a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df7b7230"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df7b73c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7b7550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7b76e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df7b7870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7ff8df7bab30" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7ff8df7bab30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df7b9020"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df7b91b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7b9340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df7b94d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df7b9660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7b97f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df7b9980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df7b9b10"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df7b9ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7ff8df7b42f0" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df7b42f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df7b4670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7ff8df7b8020" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7ff8df7b8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7b83a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df7b8530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df7b86c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df7b8850"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df7b89e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7ff8df7b7b40" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df7b7b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df7b5020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df7b51b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7b5340"/>
        <function-ref name="get" scoped="" ref="0x7ff8df7b54d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7b5660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7b57f0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df7b5980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7b5b10"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df7b5ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df7b5e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df7b4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7ff8df7af2f0" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7ff8df7af2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7af670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df7af800"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df7af990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7afb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7afcb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df7afe40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7ff8df7b1220" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7ff8df7b1220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df7b15a0"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df7b1730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7b18c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df7b1a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df7b1be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7b1d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df7b0020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df7b01b0"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df7b0340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7ff8df7ad7a0" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df7ad7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df7adb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7ff8df7b0610" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7ff8df7b0610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7b0990"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df7b0b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df7b0cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df7b0e40"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df7af020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7ff8df7ae160" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df7ae160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df7ae4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df7ae670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7ae800"/>
        <function-ref name="get" scoped="" ref="0x7ff8df7ae990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7aeb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7aecb0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df7aee40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7ad020"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df7ad1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df7ad340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df7ad4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7ff8df7a87a0" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7ff8df7a87a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7a8b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df7a8cb0"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df7a8e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7a7020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7a71b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df7a7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7ff8df7aa6d0" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7ff8df7aa6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df7aaa50"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df7aabe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7aad70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df7a9020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df7a91b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7a9340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df7a94d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df7a9660"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df7a97f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7ff8df7a5c50" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df7a5c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df7a4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7ff8df7a9ac0" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7ff8df7a9ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7a9e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df7a8020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df7a81b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df7a8340"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df7a84d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7ff8df7a7610" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df7a7610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df7a7990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df7a7b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7a7cb0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df7a7e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7a5020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7a51b0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df7a5340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7a54d0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df7a5660"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df7a57f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df7a5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7ff8df7a0cb0" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7ff8df7a0cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df79f0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df79f230"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df79f3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df79f550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df79f6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df79f870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7ff8df7a2b30" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7ff8df7a2b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df7a1020"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df7a11b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df7a1340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df7a14d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df7a1660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df7a17f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df7a1980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df7a1b10"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df7a1ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7ff8df79d2f0" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df79d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df79d670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7ff8df7a0020" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7ff8df7a0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7a03a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df7a0530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df7a06c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df7a0850"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df7a09e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7ff8df79fb40" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df79fb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df79e020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df79e1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df79e340"/>
        <function-ref name="get" scoped="" ref="0x7ff8df79e4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df79e660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df79e7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df79e980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df79eb10"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df79eca0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df79ee30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df79d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7ff8df7982f0" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7ff8df7982f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df798670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df798800"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df798990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df798b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df798cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df798e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7ff8df79a220" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7ff8df79a220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df79a5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df79a730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df79a8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df79aa50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df79abe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df79ad70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df799020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df7991b0"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df799340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7ff8df7967a0" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df7967a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df796b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7ff8df799610" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7ff8df799610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df799990"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df799b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df799cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df799e40"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df798020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7ff8df797160" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df797160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df7974e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df797670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df797800"/>
        <function-ref name="get" scoped="" ref="0x7ff8df797990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df797b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df797cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df797e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df796020"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df7961b0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df796340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df7964d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7ff8df7907a0" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7ff8df7907a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df790b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df790cb0"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df790e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df78f020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df78f1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df78f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7ff8df7926d0" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7ff8df7926d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df792a50"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df792be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df792d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df791020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df7911b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df791340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df7914d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df791660"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df7917f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7ff8df78ec50" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df78ec50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df78d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7ff8df791ac0" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7ff8df791ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df791e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df790020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df7901b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df790340"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df7904d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7ff8df78f610" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df78f610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df78f990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df78fb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df78fcb0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df78fe40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df78e020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df78e1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df78e340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df78e4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df78e660"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df78e7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df78e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7ff8df789cb0" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7ff8df789cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7880a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8df788230"/>
        <function-ref name="captured" scoped="" ref="0x7ff8df7883c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df788550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df7886e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8df788870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7ff8df78bb30" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7ff8df78bb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df78a020"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df78a1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df78a340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df78a4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df78a660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df78a7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df78a980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df78ab10"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df78aca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7ff8df7862f0" loc="48:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7ff8df7862f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df786670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7ff8df789020" loc="45:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7ff8df789020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df7893a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df789530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df7896c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df789850"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df7899e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7ff8df788b40" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8df788b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df787020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df7871b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df787340"/>
        <function-ref name="get" scoped="" ref="0x7ff8df7874d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df787660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df7877f0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df787980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df787b10"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df787ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df787e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df786020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7ff8df77f240" loc="7:../../../..//tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7ff8df77f240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df77f5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7ff8df783a90" loc="4:../../../..//tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7ff8df783a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df783e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7ff8df780260" loc="5:../../../..//tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7ff8df780260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df7805e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7ff8df7809f0" loc="6:../../../..//tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7ff8df7809f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df780d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7ff8dfa254c0" loc="55:../../../..//tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7ff8dfa254c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7ff8dfa25840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7ff8dfd393b0" loc="51:../../../..//tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7ff8dfd393b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7ff8dfd39730"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7ff8dfd398c0"/>
        <function-ref name="sleep" scoped="" ref="0x7ff8dfd39a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7ff8dfb61bc0" loc="52:../../../..//tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7ff8dfb61bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7ff8dfc9d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x7ff8df8e0b40" loc="39:../../../..//tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7ff8df8e0b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7ff8df74ab10"/>
        <function-ref name="initTimerB" scoped="" ref="0x7ff8df74a1b0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7ff8df74a340"/>
        <function-ref name="initTimerA" scoped="" ref="0x7ff8df74a4d0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7ff8df74a020"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7ff8df74a660"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7ff8df74a7f0"/>
        <function-ref name="initClocks" scoped="" ref="0x7ff8df74a980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7ff8df73edc0" loc="60:../../../..//tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7ff8df73edc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df73d180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7ff8df74b590" loc="57:../../../..//tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7ff8df74b590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7ff8df74b910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7ff8df73e6c0" loc="59:../../../..//tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7ff8df73e6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df73ea40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7ff8df74bc00" loc="58:../../../..//tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7ff8df74bc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df73e020"/>
        <function-ref name="taskLoop" scoped="" ref="0x7ff8df73e1b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7ff8df73e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7ff8e02b1410" loc="48:../../../..//tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7ff8e02b1410"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8e02b1790"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8e02b1920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7ff8e02423a0" loc="47:../../../..//tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7ff8e02423a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8e0242720"/>
        <function-ref name="taskLoop" scoped="" ref="0x7ff8e02428b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7ff8e0242a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7ff8df94b040" loc="56:../../../..//tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7ff8df94b040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df94b3c0"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df94b550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7ff8df947490" loc="57:../../../..//tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7ff8df947490"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7ff8df947810"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7ff8df9479a0"/>
        <function-ref name="sleep" scoped="" ref="0x7ff8df947b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7ff8df94d140" loc="55:../../../..//tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7ff8df94d140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df94d4c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7ff8df94d650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7ff8df94d7e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MultiChannel" ref="0x7ff8df67f3a0" loc="21:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7ff8df67f3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7ff8df67f720"/>
        <function-ref name="configure" scoped="" ref="0x7ff8df67f8b0"/>
        <function-ref name="dataReady" scoped="" ref="0x7ff8df67fa40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="R_A" ref="0x7ff8df6c5220" loc="11:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="R_A" scoped="" ref="0x7ff8df6c5220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8df6c55a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x7ff8df6ad7a0" loc="17:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMControl" scoped="" ref="0x7ff8df6ad7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8df6adb20"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8df6adcb0"/>
        <function-ref name="start" scoped="" ref="0x7ff8df6ade40"/>
        <function-ref name="stop" scoped="" ref="0x7ff8df6b2020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7ff8df72fc40" loc="8:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7ff8df72fc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7ff8df72e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="getData" ref="0x7ff8df5b3020" loc="645:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="getData" scoped="" ref="0x7ff8df5b3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df5b33a0"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df5b3530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7ff8df6a35f0" loc="18:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7ff8df6a35f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df6a3970"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8df6a3b00"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df6a3c90"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df6a3e20"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8df6b1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7ff8df6c98f0" loc="10:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7ff8df6c98f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8df6c9c70"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df6c9e00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df722020"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8df7221b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8df722340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="assignFlowstoSlots" ref="0x7ff8df66e480" loc="66:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="assignFlowstoSlots" scoped="" ref="0x7ff8df66e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df66e800"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df66e990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateSchedule" ref="0x7ff8df66a2a0" loc="69:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateSchedule" scoped="" ref="0x7ff8df66a2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df66a620"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df66a7b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer1" ref="0x7ff8df6bc9e0" loc="13:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer1" scoped="" ref="0x7ff8df6bc9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8df6b9020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df6c7510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8df6ba300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8df6c7e10"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8df6b9920"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8df6b94a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8df6c7990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8df6d6670"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8df6ba910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8df6d6b40"/>
        <function-ref name="stop" scoped="" ref="0x7ff8df6c7090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="R_B" ref="0x7ff8df6c58e0" loc="12:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="R_B" scoped="" ref="0x7ff8df6c58e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8df6c5c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x7ff8df678c40" loc="23:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7ff8df678c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7ff8df67e9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="initializeFlow" ref="0x7ff8df66f4f0" loc="65:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="initializeFlow" scoped="" ref="0x7ff8df66f4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df66f870"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df66fa00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7ff8df723590" loc="7:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7ff8df723590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ff8df723910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ff8df723aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7ff8df723c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ff8df723dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ff8df72f020"/>
        <function-ref name="get" scoped="" ref="0x7ff8df72f1b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7ff8df72f340"/>
        <function-ref name="led2Off" scoped="" ref="0x7ff8df72f980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df72f4d0"/>
        <function-ref name="led0On" scoped="" ref="0x7ff8df72f660"/>
        <function-ref name="led2On" scoped="" ref="0x7ff8df72f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="initializeSchedule" ref="0x7ff8df66d3b0" loc="67:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="initializeSchedule" scoped="" ref="0x7ff8df66d3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df66d730"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df66d8c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7ff8df67a9f0" loc="22:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8df67a9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7ff8df67ad70"/>
        <function-ref name="noAck" scoped="" ref="0x7ff8df69e020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7ff8df69e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7ff8df69f810" loc="20:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8df69f810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8df69fb90"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8df69fd20"/>
        <function-ref name="request" scoped="" ref="0x7ff8df6ac020"/>
        <function-ref name="granted" scoped="" ref="0x7ff8df6ac1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8df6ac340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer2" ref="0x7ff8df6b8020" loc="14:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer2" scoped="" ref="0x7ff8df6b8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8df6b4630"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df6b7a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8df6b5920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8df6b54a0"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8df6b3020"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8df6b4ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8df6b5020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8df6b8c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8df6b4020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8df6b7110"/>
        <function-ref name="stop" scoped="" ref="0x7ff8df6b75e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="initializeCluster" ref="0x7ff8df6692b0" loc="70:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="initializeCluster" scoped="" ref="0x7ff8df6692b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df669630"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df6697c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PermutateCipher" ref="0x7ff8df66b2f0" loc="68:SendingBufferC.nc">
      <component-ref qname="SendingBufferC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PermutateCipher" scoped="" ref="0x7ff8df66b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df66b670"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df66b800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7ff8df53d260" loc="46:../../../..//tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7ff8df53d260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ff8df53d5e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ff8df53d770"/>
        <function-ref name="led1On" scoped="" ref="0x7ff8df53d900"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ff8df53da90"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ff8df53dc20"/>
        <function-ref name="get" scoped="" ref="0x7ff8df53ddb0"/>
        <function-ref name="led1Off" scoped="" ref="0x7ff8df53c020"/>
        <function-ref name="led2Off" scoped="" ref="0x7ff8df53c660"/>
        <function-ref name="set" scoped="" ref="0x7ff8df53c1b0"/>
        <function-ref name="led0On" scoped="" ref="0x7ff8df53c340"/>
        <function-ref name="led2On" scoped="" ref="0x7ff8df53c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7ff8df5301d0" loc="50:../../../..//tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7ff8df5301d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df530550"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df5306e0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df530870"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df530a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df530b90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df530d20"/>
        <function-ref name="set" scoped="" ref="0x7ff8df536020"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df5361b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8df5395c0" loc="46:../../../..//tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8df5395c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df539940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7ff8df5364d0" loc="51:../../../..//tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7ff8df5364d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df536850"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df5369e0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df536b70"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df536d00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df535020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df5351b0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df535340"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df5354d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7ff8df539bc0" loc="47:../../../..//tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7ff8df539bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ff8df538020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ff8df5381b0"/>
        <function-ref name="led1On" scoped="" ref="0x7ff8df538340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ff8df5384d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ff8df538660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df5387f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7ff8df538980"/>
        <function-ref name="led2Off" scoped="" ref="0x7ff8df537020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df538b10"/>
        <function-ref name="led0On" scoped="" ref="0x7ff8df538ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7ff8df538e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7ff8df5357f0" loc="52:../../../..//tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7ff8df5357f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df535b70"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df535d00"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df52f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df52f1b0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df52f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df52f4d0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df52f660"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df52f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7ff8df53ad90" loc="41:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7ff8df53ad90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df513180"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df513310"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df5134a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df513630"/>
        <function-ref name="get" scoped="" ref="0x7ff8df5137c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df513950"/>
        <function-ref name="set" scoped="" ref="0x7ff8df513ae0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df513c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7ff8df512020" loc="42:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7ff8df512020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df5123a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df512530"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df5126c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df512850"/>
        <function-ref name="get" scoped="" ref="0x7ff8df5129e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df512b70"/>
        <function-ref name="set" scoped="" ref="0x7ff8df512d00"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df511020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7ff8df510600" loc="44:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8df510600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df510980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7ff8df511380" loc="43:../../../..//tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7ff8df511380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df511700"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df511890"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df511a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df511bb0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df511d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df510020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df5101b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df510340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7ff8df4fb810" loc="53:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7ff8df4fb810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4fbb90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4fbd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4fa020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4fa1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4fa340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4fa4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4fa660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4fa7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4fa980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4fab10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4faca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4fae30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4f9020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4f92b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4f9440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7ff8df4e6810" loc="66:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7ff8df4e6810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4e6b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4e6d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4e5020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4e51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4e5340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4e54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4e5660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4e57f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4e5980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4e5b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4e5ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4e5e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4e4020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4e42b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4e4440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7ff8df49dca0" loc="145:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7ff8df49dca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df49c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df49c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df49c3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df49c550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df49c6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df49c870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df49ca00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df49cb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df49cd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df49b020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df49b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df49b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df49b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df49b760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df49b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7ff8df478cb0" loc="165:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7ff8df478cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4770a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df477230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4773c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df477550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4776e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df477870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df477a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df477b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df477d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df476020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4761b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df476340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4764d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df476760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4768f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7ff8df49bcc0" loc="146:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7ff8df49bcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df49a0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df49a230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df49a3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df49a550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df49a6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df49a870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df49aa00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df49ab90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df49ad20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df499020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4991b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df499340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4994d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df499760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4998f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7ff8df4e2810" loc="71:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7ff8df4e2810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4e2b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4e2d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4e1020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4e11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4e1340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4e14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4e1660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4e17f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4e1980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4e1b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4e1ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4e1e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4e0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4e02b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4e0440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7ff8df4ce9a0" loc="84:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7ff8df4ce9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4ced20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4cd020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4cd1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4cd340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4cd4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4cd660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4cd7f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4cd980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4cdb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4cdca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4cde30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4cc020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4cc1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4cc440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4cc5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7ff8df4b99a0" loc="97:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7ff8df4b99a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4b9d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4b8020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4b81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4b8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4b84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4b8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4b87f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4b8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4b8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4b8ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4b8e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4b7020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4b71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4b7440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4b75d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7ff8df4a99a0" loc="108:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7ff8df4a99a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4a9d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4a8020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4a81b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4a8340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4a84d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4a8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4a87f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4a8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4a8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4a8ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4a8e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4a7020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4a71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4a7440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4a75d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7ff8df494cc0" loc="149:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7ff8df494cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4930a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df493230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4933c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df493550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4936e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df493870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df493a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df493b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df493d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df492020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4921b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df492340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4924d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df492760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4928f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7ff8df484cb0" loc="159:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7ff8df484cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4830a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df483230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4833c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df483550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4836e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df483870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df483a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df483b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df483d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df482020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4821b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df482340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4824d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df482760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4828f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7ff8df470cc0" loc="171:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7ff8df470cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df46f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df46f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df46f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df46f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df46f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df46f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df46fa00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df46fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df46fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df46e020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df46e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df46e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df46e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df46e760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df46e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7ff8df4f5810" loc="56:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7ff8df4f5810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4f5b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4f5d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4f3020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4f31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4f3340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4f34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4f3660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4f37f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4f3980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4f3b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4f3ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4f3e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4f2020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4f22b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4f2440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7ff8df492cc0" loc="150:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7ff8df492cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4910a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df491230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4913c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df491550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4916e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df491870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df491a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df491b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df491d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df490020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4901b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df490340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4904d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df490760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4908f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7ff8df4f0810" loc="61:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7ff8df4f0810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4f0b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4f0d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4ef020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4ef1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4ef340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4ef4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4ef660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4ef7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4ef980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4efb10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4efca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4efe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4ee020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4ee2b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4ee440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7ff8df4dc810" loc="74:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7ff8df4dc810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4dcb90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4dcd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4db020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4db1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4db340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4db4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4db660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4db7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4db980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4dbb10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4dbca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4dbe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4da020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4da2b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4da440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7ff8df4c89a0" loc="87:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7ff8df4c89a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4c8d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4c7020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4c71b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4c7340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4c74d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4c7660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4c77f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4c7980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4c7b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4c7ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4c7e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4c6020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4c61b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4c6440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4c65d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7ff8df4b39a0" loc="100:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7ff8df4b39a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4b3d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4b2020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4b21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4b2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4b24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4b2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4b27f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4b2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4b2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4b2ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4b2e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4b1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4b11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4b1440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4b15d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7ff8df4a39a0" loc="111:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7ff8df4a39a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4a3d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4a2020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4a21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4a2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4a24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4a2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4a27f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4a2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4a2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4a2ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4a2e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4a1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4a11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4a1440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4a15d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7ff8df4ff810" loc="51:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7ff8df4ff810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4ffb90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4ffd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4fe020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4fe1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4fe340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4fe4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4fe660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4fe7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4fe980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4feb10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4feca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4fee30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4fd020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4fd2b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4fd440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7ff8df4ea810" loc="64:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7ff8df4ea810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4eac90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4eae20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4e9020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4e91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4e9340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4e94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4e9660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4e97f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4e9980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4e9b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4e9ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4e9e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4e8020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4e82b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4e8440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7ff8df4d6810" loc="77:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7ff8df4d6810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4d6b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4d6d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4d5020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4d51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4d5340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4d54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4d5660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4d57f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4d5980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4d5b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4d5ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4d5e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4d4020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4d42b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4d4440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7ff8df49fcc0" loc="144:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7ff8df49fcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df49e0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df49e230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df49e3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df49e550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df49e6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df49e870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df49ea00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df49eb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df49ed20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df49d020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df49d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df49d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df49d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df49d760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df49d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7ff8df47ecb0" loc="162:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7ff8df47ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df47d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df47d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df47d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df47d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df47d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df47d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df47da00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df47db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df47dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df47c020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df47c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df47c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df47c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df47c760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df47c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7ff8df472cb0" loc="169:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7ff8df472cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4710a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df471230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4713c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df471550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4716e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df471870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df471a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df471b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df471d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df470020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4701b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df470340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4704d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df470760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4708f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7ff8df48acc0" loc="155:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7ff8df48acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4890a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df489230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4893c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df489550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4896e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df489870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df489a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df489b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df489d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df488020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4881b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df488340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4884d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df488760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4888f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7ff8df4d2810" loc="82:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7ff8df4d2810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4d2d90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4d1020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4d11b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4d1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4d14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4d1660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4d17f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4d1980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4d1b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4d1ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4d1e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4d0020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4d01b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4d0440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4d05d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7ff8df4bd9a0" loc="95:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7ff8df4bd9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4bdd20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4bc020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4bc1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4bc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4bc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4bc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4bc7f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4bc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4bcb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4bcca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4bce30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4bb020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4bb1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4bb440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4bb5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7ff8df4ad9a0" loc="106:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7ff8df4ad9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4add20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4ac020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4ac1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4ac340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4ac4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4ac660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4ac7f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4ac980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4acb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4acca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4ace30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4ab020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4ab1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4ab440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4ab5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7ff8df47ccb0" loc="163:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7ff8df47ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df47b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df47b230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df47b3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df47b550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df47b6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df47b870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df47ba00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df47bb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df47bd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df47a020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df47a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df47a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df47a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df47a760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df47a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7ff8df490cb0" loc="152:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7ff8df490cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df48f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df48f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df48f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df48f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df48f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df48f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df48fa00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df48fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df48fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df48e020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df48e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df48e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df48e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df48e760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df48e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7ff8df4f9810" loc="54:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7ff8df4f9810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4f9b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4f9d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4f8020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4f81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4f8340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4f84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4f8660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4f87f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4f8980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4f8b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4f8ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4f8e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4f7020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4f72b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4f7440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7ff8df4e4810" loc="67:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7ff8df4e4810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4e4b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4e4d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4e3020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4e31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4e3340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4e34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4e3660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4e37f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4e3980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4e3b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4e3ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4e3e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4e2020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4e22b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4e2440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7ff8df4b19a0" loc="104:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7ff8df4b19a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4b1d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4b0020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4b01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4b0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4b04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4b0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4b07f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4b0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4b0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4b0ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4b0e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4af020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4af1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4af440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4af5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7ff8df4e0810" loc="72:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7ff8df4e0810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4e0b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4e0d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4df020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4df1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4df340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4df4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4df660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4df7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4df980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4dfb10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4dfca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4dfe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4de020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4de2b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4de440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7ff8df4cc9a0" loc="85:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7ff8df4cc9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4ccd20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4cb020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4cb1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4cb340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4cb4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4cb660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4cb7f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4cb980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4cbb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4cbca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4cbe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4ca020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4ca1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4ca440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4ca5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7ff8df4b79a0" loc="98:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7ff8df4b79a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4b7d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4b6020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4b61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4b6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4b64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4b6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4b67f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4b6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4b6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4b6ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4b6e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4b5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4b51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4b5440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4b55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7ff8df4a79a0" loc="109:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7ff8df4a79a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4a7d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4a6020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4a61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4a6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4a64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4a6660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4a67f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4a6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4a6b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4a6ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4a6e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4a5020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4a51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4a5440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4a55d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7ff8df48ccc0" loc="154:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7ff8df48ccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df48b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df48b230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df48b3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df48b550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df48b6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df48b870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df48ba00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df48bb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df48bd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df48a020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df48a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df48a340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df48a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df48a760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df48a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7ff8df501870" loc="49:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7ff8df501870"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df501bf0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df501d80"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df50c020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df50c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df50c340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df50c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df50c660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df50c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df50c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df50cb10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df50cca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df50ce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df50b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df50b2b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df50b440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7ff8df4ee810" loc="62:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7ff8df4ee810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4eeb90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4eed20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4ed020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4ed1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4ed340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4ed4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4ed660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4ed7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4ed980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4edb10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4edca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4ede30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4ec020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4ec2b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4ec440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7ff8df4da810" loc="75:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7ff8df4da810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4dab90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4dad20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4d9020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4d91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4d9340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4d94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4d9660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4d97f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4d9980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4d9b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4d9ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4d9e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4d8020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4d82b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4d8440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7ff8df4c69a0" loc="88:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7ff8df4c69a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4c6d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4c4020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4c41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4c4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4c44d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4c4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4c47f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4c4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4c4b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4c4ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4c4e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4c3020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4c31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4c3440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4c35d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7ff8df488cc0" loc="156:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7ff8df488cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4870a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df487230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4873c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df487550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4876e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df487870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df487a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df487b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df487d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df486020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4861b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df486340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4864d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df486760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4868f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7ff8df482cb0" loc="160:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7ff8df482cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4810a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df481230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4813c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df481550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4816e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df481870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df481a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df481b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df481d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df480020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4801b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df480340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4804d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df480760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4808f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7ff8df476cb0" loc="166:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7ff8df476cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4750a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df475230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4753c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df475550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4756e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df475870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df475a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df475b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df475d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df474020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4741b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df474340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4744d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df474760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4748f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7ff8df4c19a0" loc="93:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7ff8df4c19a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4c1d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4c0020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4c01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4c0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4c04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4c0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4c07f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4c0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4c0b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4c0ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4c0e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4bf020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4bf1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4bf440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4bf5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7ff8df486cc0" loc="157:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7ff8df486cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4850a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df485230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4853c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df485550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4856e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df485870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df485a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df485b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df485d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df484020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4841b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df484340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4844d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df484760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4848f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7ff8df4fd810" loc="52:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7ff8df4fd810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4fdb90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4fdd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4fc020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4fc1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4fc340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4fc4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4fc660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4fc7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4fc980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4fcb10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4fcca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4fce30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4fb020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4fb2b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4fb440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7ff8df4e8810" loc="65:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7ff8df4e8810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4e8b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4e8d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4e7020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4e71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4e7340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4e74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4e7660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4e77f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4e7980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4e7b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4e7ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4e7e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4e6020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4e62b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4e6440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7ff8df4d4810" loc="78:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7ff8df4d4810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4d4b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4d4d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4d3020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4d31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4d3340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4d34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4d3660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4d37f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4d3980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4d3b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4d3ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4d3e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4d2020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4d22b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4d2440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7ff8df48ecc0" loc="153:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7ff8df48ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df48d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df48d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df48d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df48d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df48d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df48d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df48da00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df48db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df48dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df48c020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df48c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df48c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df48c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df48c760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df48c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7ff8df47acb0" loc="164:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7ff8df47acb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4790a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df479230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4793c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df479550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4796e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df479870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df479a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df479b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df479d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df478020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4781b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df478340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4784d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df478760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4788f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7ff8df4d09a0" loc="83:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7ff8df4d09a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4d0d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4cf020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4cf1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4cf340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4cf4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4cf660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4cf7f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4cf980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4cfb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4cfca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4cfe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4ce020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4ce1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4ce440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4ce5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7ff8df4bb9a0" loc="96:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7ff8df4bb9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4bbd20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4ba020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4ba1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4ba340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4ba4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4ba660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4ba7f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4ba980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4bab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4baca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4bae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4b9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4b91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4b9440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4b95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7ff8df4ab9a0" loc="107:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7ff8df4ab9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4abd20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4aa020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4aa1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4aa340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4aa4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4aa660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4aa7f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4aa980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4aab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4aaca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4aae30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4a9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4a91b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4a9440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4a95d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7ff8df4f7810" loc="55:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7ff8df4f7810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4f7b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4f7d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4f6020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4f61b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4f6340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4f64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4f6660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4f67f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4f6980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4f6b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4f6ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4f6e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4f5020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4f52b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4f5440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7ff8df4af9a0" loc="105:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7ff8df4af9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4afd20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4ae020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4ae1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4ae340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4ae4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4ae660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4ae7f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4ae980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4aeb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4aeca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4aee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4ad020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4ad1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4ad440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4ad5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7ff8df4f2810" loc="60:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7ff8df4f2810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4f2b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4f2d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4f1020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4f11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4f1340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4f14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4f1660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4f17f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4f1980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4f1b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4f1ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4f1e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4f0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4f02b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4f0440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7ff8df4de810" loc="73:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7ff8df4de810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4deb90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4ded20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4dd020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4dd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4dd340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4dd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4dd660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4dd7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4dd980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4ddb10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4ddca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4dde30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4dc020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4dc2b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4dc440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7ff8df4ca9a0" loc="86:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7ff8df4ca9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4cad20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4c9020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4c91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4c9340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4c94d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4c9660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4c97f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4c9980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4c9b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4c9ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4c9e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4c8020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4c81b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4c8440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4c85d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7ff8df4b59a0" loc="99:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7ff8df4b59a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4b5d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4b4020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4b41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4b4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4b44d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4b4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4b47f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4b4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4b4b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4b4ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4b4e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4b3020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4b31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4b3440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4b35d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7ff8df4a59a0" loc="110:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7ff8df4a59a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4a5d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4a4020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4a41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4a4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4a44d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4a4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4a47f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4a4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4a4b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4a4ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4a4e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4a3020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4a31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4a3440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4a35d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7ff8df50b810" loc="50:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7ff8df50b810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df50bb90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df50bd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df500020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df5001b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df500340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df5004d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df500660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df5007f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df500980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df500b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df500ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df500e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4ff020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4ff2b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4ff440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7ff8df4ec810" loc="63:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7ff8df4ec810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4ecb90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4ecd20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4eb020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4eb1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4eb340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4eb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4eb660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4eb7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4eb980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4ebb10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4ebca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4ebe30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4ea020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4ea2b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4ea440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7ff8df4d8810" loc="76:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7ff8df4d8810"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4d8b90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4d8d20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4d7020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4d71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4d7340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4d74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4d7660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4d77f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4d7980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4d7b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4d7ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4d7e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4d6020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4d62b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4d6440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7ff8df4c39a0" loc="89:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7ff8df4c39a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4c3d20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4c2020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4c21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4c2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4c24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4c2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4c27f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4c2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4c2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4c2ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4c2e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4c1020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4c11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4c1440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4c15d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7ff8df497ca0" loc="148:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7ff8df497ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4950a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df495230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4953c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df495550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4956e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df495870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df495a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df495b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df495d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df494020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4941b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df494340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4944d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df494760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4948f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7ff8df480cb0" loc="161:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7ff8df480cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df47f0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df47f230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df47f3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df47f550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df47f6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df47f870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df47fa00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df47fb90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df47fd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df47e020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df47e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df47e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df47e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df47e760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df47e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7ff8df499cc0" loc="147:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7ff8df499cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4980a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df498230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4983c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df498550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4986e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df498870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df498a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df498b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df498d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df497020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4971b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df497340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4974d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df497760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4978f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7ff8df4bf9a0" loc="94:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7ff8df4bf9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4bfd20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4be020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4be1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4be340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4be4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4be660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4be7f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4be980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4beb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df4beca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4bee30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df4bd020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4bd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df4bd440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4bd5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7ff8df474cb0" loc="168:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7ff8df474cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4730a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df473230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4733c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df473550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4736e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df473870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df473a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df473b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df473d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df472020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4721b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df472340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4724d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df472760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4728f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7ff8df46ecc0" loc="172:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7ff8df46ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df46d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df46d230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df46d3c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df46d550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df46d6e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df46d870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df46da00"/>
        <function-ref name="get" scoped="" ref="0x7ff8df46db90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df46dd20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df46c020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df46c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df46c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df46c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df46c760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df46c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7ff8df4a19f0" loc="143:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7ff8df4a19f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4a01c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df4a0350"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4a04e0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df4a0670"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4a0800"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4a0990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4a0b20"/>
        <function-ref name="get" scoped="" ref="0x7ff8df4a0cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4a0e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df49f020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df49f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df49f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df49f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df49f760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df49f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df469d10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df469d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4410e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df441270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df441400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df441590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df441720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4418b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df441a40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df441bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df441d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df440020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4401b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df440340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4404d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df440760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4408f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df43d740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df43d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df43dac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df43dc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df43dde0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df43c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df43c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df43c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df43c4d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df43c660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df43c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df43c980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df43cb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df43cca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df43ce30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df43b120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df43b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df438100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df438100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df438480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df438610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4387a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df438930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df438ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df438c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df438de0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df437020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4371b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df437340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4374d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df437660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4377f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df437a80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df437c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df434d10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df434d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4330e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df433270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df433400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df433590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df433720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4338b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df433a40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df433bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df433d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df432020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4321b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df432340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4324d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df432760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4328f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df42f740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df42f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df42fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df42fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df42fde0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df42e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df42e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df42e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df42e4d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df42e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df42e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df42e980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df42eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df42eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df42ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df42d120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df42d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df42a100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df42a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df42a480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df42a610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df42a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df42a930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df42aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df42ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df42ade0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df429020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4291b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df429340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4294d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df429660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4297f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df429a80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df429c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df426d10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df426d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4250e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df425270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df425400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df425590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df425720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4258b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df425a40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df425bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df425d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df424020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4241b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df424340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4244d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df424760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4248f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df421740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df421740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df421ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df421c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df421de0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df41f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df41f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df41f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df41f4d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df41f660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df41f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df41f980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df41fb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df41fca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df41fe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df41e120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df41e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df41b100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df41b100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df41b480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df41b610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df41b7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df41b930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df41bac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df41bc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df41bde0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df41a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df41a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df41a340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df41a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df41a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df41a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df41aa80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df41ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df417d10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df417d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df4160e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df416270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df416400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df416590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df416720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df4168b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df416a40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df416bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df416d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df415020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4151b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df415340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4154d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df415760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4158f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df412740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df412740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df412ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df412c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df412de0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df411020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4111b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df411340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4114d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df411660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4117f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df411980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df411b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df411ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df411e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df410120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4102b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df40d100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df40d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df40d480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df40d610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df40d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df40d930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df40dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df40dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df40dde0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df40c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df40c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df40c340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df40c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df40c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df40c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df40ca80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df40cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df409d80" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df409d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df408180"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df408310"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df4084a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df408630"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4087c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df408950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df408ae0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df408c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df408e00"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df407020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df4071b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df407340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df4074d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df407760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4078f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df404740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df404740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df404ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df404c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df404de0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df403020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df4031b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df403340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df4034d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df403660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df4037f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df403980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df403b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df403ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df403e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df402120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df4022b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3ff100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3ff100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3ff480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3ff610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3ff7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3ff930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3ffac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3ffc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3ffde0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3fe020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3fe1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3fe340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3fe4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3fe660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3fe7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3fea80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3fec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3fbd10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3fbd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3f90e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3f9270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3f9400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3f9590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3f9720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3f98b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3f9a40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3f9bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3f9d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3f8020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3f81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3f8340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3f84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3f8760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3f88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3f5740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3f5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3f5ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3f5c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3f5de0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3f4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3f41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3f4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3f44d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3f4660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3f47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3f4980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3f4b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3f4ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3f4e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3f3120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3f32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3f0100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3f0100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3f0480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3f0610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3f07a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3f0930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3f0ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3f0c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3f0de0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3ef020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3ef1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3ef340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3ef4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3ef660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3ef7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3efa80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3efc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3ecd10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3ecd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3eb0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3eb270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3eb400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3eb590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3eb720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3eb8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3eba40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3ebbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3ebd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3ea020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3ea1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3ea340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3ea4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3ea760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3ea8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3e7740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3e7740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3e7ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3e7c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3e7de0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3e6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3e61b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3e6340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3e64d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3e6660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3e67f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3e6980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3e6b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3e6ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3e6e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3e5120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3e52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3e2100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3e2100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3e2480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3e2610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3e27a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3e2930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3e2ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3e2c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3e2de0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3e1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3e11b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3e1340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3e14d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3e1660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3e17f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3e1a80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3e1c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3ded10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3ded10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3dd0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3dd270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3dd400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3dd590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3dd720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3dd8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3dda40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3ddbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3ddd60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3dc020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3dc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3dc340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3dc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3dc760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3dc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3d9740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3d9740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3d9ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3d9c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3d9de0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3d8020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3d81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3d8340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3d84d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3d8660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3d87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3d8980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3d8b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3d8ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3d8e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3d7120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3d72b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3d3100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3d3100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3d3480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3d3610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3d37a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3d3930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3d3ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3d3c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3d3de0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3d2020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3d21b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3d2340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3d24d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3d2660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3d27f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3d2a80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3d2c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3cfe60" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3cfe60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3ce210"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3ce3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3ce530"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3ce6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3ce850"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3ce9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3ceb70"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3ced00"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3cd020"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3cd1b0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3cd340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3cd4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3cd660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3cd8f0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3cda80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3ca9f0" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3ca9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3cad70"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3c9020"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3c91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3c9340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3c94d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3c9660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3c97f0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3c9980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3c9b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3c9ca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3c9e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3c8020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3c81b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3c8440"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3c85d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3c5460" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3c5460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3c57e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3c5970"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3c5b00"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3c5c90"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3c5e20"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3c4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3c41b0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3c4340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3c44d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3c4660"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3c47f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3c4980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3c4b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3c4da0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3c3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3c1e00" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3c1e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3c01c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3c0350"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3c04e0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3c0670"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3c0800"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3c0990"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3c0b20"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3c0cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3c0e40"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3bf020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3bf1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3bf340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3bf4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3bf760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3bf8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3bc740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3bc740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3bcac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3bcc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3bcde0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3bb020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3bb1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3bb340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3bb4d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3bb660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3bb7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3bb980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3bbb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3bbca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3bbe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3ba120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3ba2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3b7100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3b7100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3b7480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3b7610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3b77a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3b7930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3b7ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3b7c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3b7de0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3b6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3b61b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3b6340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3b64d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3b6660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3b67f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3b6a80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3b6c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3b3d10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3b3d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3b10e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3b1270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3b1400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3b1590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3b1720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3b18b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3b1a40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3b1bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3b1d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3b0020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3b01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3b0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3b04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3b0760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3b08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3ad740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3ad740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3adac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3adc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3adde0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3ac020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3ac1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3ac340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3ac4d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3ac660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3ac7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3ac980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3acb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3acca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3ace30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3ab120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3ab2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3a8100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3a8100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3a8480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3a8610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3a87a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3a8930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3a8ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3a8c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3a8de0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3a7020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3a71b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3a7340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3a74d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3a7660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3a77f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3a7a80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3a7c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df3a4d10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df3a4d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3a30e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df3a3270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3a3400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df3a3590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3a3720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3a38b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3a3a40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df3a3bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3a3d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df3a2020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3a21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df3a2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3a24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df3a2760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3a28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df39f740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df39f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df39fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df39fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df39fde0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df39e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df39e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df39e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df39e4d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df39e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df39e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df39e980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df39eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df39eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df39ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df39d120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df39d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df39a100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df39a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df39a480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df39a610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df39a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df39a930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df39aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df39ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df39ade0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df399020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3991b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df399340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3994d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df399660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3997f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df399a80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df399c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df396d10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df396d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3950e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df395270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df395400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df395590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df395720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3958b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df395a40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df395bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df395d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df394020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3941b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df394340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3944d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df394760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3948f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df391740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df391740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df391ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df391c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df391de0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df390020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3901b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df390340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3904d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df390660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3907f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df390980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df390b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df390ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df390e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df38f120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df38f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df38c100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df38c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df38c480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df38c610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df38c7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df38c930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df38cac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df38cc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df38cde0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df38a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df38a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df38a340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df38a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df38a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df38a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df38aa80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df38ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df387d10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df387d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3860e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df386270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df386400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df386590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df386720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3868b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df386a40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df386bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df386d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df385020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3851b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df385340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3854d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df385760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3858f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df382740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df382740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df382ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df382c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df382de0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df381020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3811b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df381340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3814d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df381660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3817f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df381980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df381b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df381ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df381e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df380120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3802b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df37d100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df37d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df37d480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df37d610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df37d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df37d930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df37dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df37dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df37dde0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df37c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df37c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df37c340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df37c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df37c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df37c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df37ca80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df37cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df379d10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df379d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df3780e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df378270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df378400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df378590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df378720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df3788b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df378a40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df378bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df378d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df377020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3771b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df377340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3774d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df377760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3778f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df374740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df374740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df374ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df374c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df374de0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df373020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3731b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df373340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3734d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df373660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3737f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df373980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df373b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df373ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df373e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df372120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3722b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df36f100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df36f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df36f480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df36f610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df36f7a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df36f930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df36fac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df36fc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df36fde0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df36e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df36e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df36e340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df36e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df36e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df36e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df36ea80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df36ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df36bd10" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df36bd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df36a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df36a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df36a400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df36a590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df36a720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df36a8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df36aa40"/>
        <function-ref name="get" scoped="" ref="0x7ff8df36abd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df36ad60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df369020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df3691b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df369340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df3694d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df369760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3698f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df365740" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df365740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df365ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df365c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df365de0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df364020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df3641b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df364340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df3644d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df364660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df3647f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df364980"/>
        <function-ref name="set" scoped="" ref="0x7ff8df364b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df364ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df364e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df363120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df3632b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7ff8df360100" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7ff8df360100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df360480"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df360610"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df3607a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df360930"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df360ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df360c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df360de0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df35f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df35f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df35f340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df35f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df35f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df35f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df35fa80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df35fc10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7ff8df2e8610" loc="44:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8df2e8610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df2e8990"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df2e8b20"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df2e8cb0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df2e8e40"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df2e7020"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df2e71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df2e7340"/>
        <function-ref name="get" scoped="" ref="0x7ff8df2e74d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df2e7660"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df2e77f0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df2e7980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df2e7b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df2e7ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df2e6020"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df2e61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7ff8df2f9440" loc="43:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8df2f9440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df2f97c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df2f9950"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df2f9ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df2f9c70"/>
        <function-ref name="get" scoped="" ref="0x7ff8df2f9e00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df2e8020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df2e81b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df2e8340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7ff8df2e32f0" loc="44:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8df2e32f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df2e3670"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df2e3800"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df2e3990"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df2e3b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df2e3cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df2e3e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df2e2020"/>
        <function-ref name="get" scoped="" ref="0x7ff8df2e21b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df2e2340"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df2e24d0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df2e2660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df2e27f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df2e2980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df2e2c10"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df2e2da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7ff8df2e4020" loc="43:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8df2e4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df2e43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df2e4530"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df2e46c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df2e4850"/>
        <function-ref name="get" scoped="" ref="0x7ff8df2e49e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df2e4b70"/>
        <function-ref name="set" scoped="" ref="0x7ff8df2e4d00"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df2e3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7ff8df2dfde0" loc="44:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8df2dfde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df2de180"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df2de310"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8df2de4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df2de630"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df2de7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8df2de950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df2deae0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df2dec70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8df2dee00"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8df2dd020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df2dd1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8df2dd340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8df2dd4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8df2dd760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df2dd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7ff8df2e0b90" loc="43:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8df2e0b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df2df020"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df2df1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df2df340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df2df4d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df2df660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df2df7f0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df2df980"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df2dfb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7ff8de3cd020" loc="49:../../../..//tos/system/AMSenderC.nc">
      <component-ref qname="SendingBuffer_AppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7ff8de3cd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de3cd3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de3cd530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de3cd6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de3cd850"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de3cd9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7ff8de3cdc30" loc="50:../../../..//tos/system/AMSenderC.nc">
      <component-ref qname="SendingBuffer_AppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7ff8de3cdc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8de3cb020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8de3cb1b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de3cb340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de3cb4d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8de3cb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7ff8de3cb8b0" loc="51:../../../..//tos/system/AMSenderC.nc">
      <component-ref qname="SendingBuffer_AppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7ff8de3cb8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7ff8de3cbc30"/>
        <function-ref name="source" scoped="" ref="0x7ff8de3cbdc0"/>
        <function-ref name="address" scoped="" ref="0x7ff8de3ca020"/>
        <function-ref name="destination" scoped="" ref="0x7ff8de3ca1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7ff8de3ca340"/>
        <function-ref name="setDestination" scoped="" ref="0x7ff8de3ca4d0"/>
        <function-ref name="type" scoped="" ref="0x7ff8de3ca660"/>
        <function-ref name="setType" scoped="" ref="0x7ff8de3ca7f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7ff8de3ca980"/>
        <function-ref name="setGroup" scoped="" ref="0x7ff8de3cab10"/>
        <function-ref name="localGroup" scoped="" ref="0x7ff8de3caca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7ff8de3c9020" loc="52:../../../..//tos/system/AMSenderC.nc">
      <component-ref qname="SendingBuffer_AppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7ff8de3c9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7ff8de3c93a0"/>
        <function-ref name="noAck" scoped="" ref="0x7ff8de3c9530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7ff8de3c96c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7ff8ddc4ab40" loc="49:../../../..//tos/system/DirectAMSenderC.nc">
      <component-ref qname="SendingBuffer_AppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7ff8ddc4ab40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8ddc49020"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8ddc491b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8ddc49340"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8ddc494d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8ddc49660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7ff8ddc498b0" loc="50:../../../..//tos/system/DirectAMSenderC.nc">
      <component-ref qname="SendingBuffer_AppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7ff8ddc498b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8ddc49c30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8ddc49dc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8ddc48020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8ddc481b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8ddc48340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7ff8ddc48590" loc="51:../../../..//tos/system/DirectAMSenderC.nc">
      <component-ref qname="SendingBuffer_AppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7ff8ddc48590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7ff8ddc48910"/>
        <function-ref name="source" scoped="" ref="0x7ff8ddc48aa0"/>
        <function-ref name="address" scoped="" ref="0x7ff8ddc48c30"/>
        <function-ref name="destination" scoped="" ref="0x7ff8ddc48dc0"/>
        <function-ref name="setSource" scoped="" ref="0x7ff8ddc47020"/>
        <function-ref name="setDestination" scoped="" ref="0x7ff8ddc471b0"/>
        <function-ref name="type" scoped="" ref="0x7ff8ddc47340"/>
        <function-ref name="setType" scoped="" ref="0x7ff8ddc474d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7ff8ddc47660"/>
        <function-ref name="setGroup" scoped="" ref="0x7ff8ddc477f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7ff8ddc47980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7ff8ddc47c10" loc="52:../../../..//tos/system/DirectAMSenderC.nc">
      <component-ref qname="SendingBuffer_AppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7ff8ddc47c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7ff8ddc46020"/>
        <function-ref name="noAck" scoped="" ref="0x7ff8ddc461b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7ff8ddc46340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7ff8ddc3dbc0" loc="44:../../../..//tos/system/AMQueueEntryP.nc">
      <component-ref qname="SendingBuffer_AppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7ff8ddc3dbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8ddc3c020"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8ddc3c1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8ddc3c340"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8ddc3c4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8ddc3c660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7ff8ddc3c910" loc="46:../../../..//tos/system/AMQueueEntryP.nc">
      <component-ref qname="SendingBuffer_AppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7ff8ddc3c910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8ddc3cc90"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8ddc3ce20"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8ddc3b020"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8ddc3b1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8ddc3b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7ff8ddc3b590" loc="47:../../../..//tos/system/AMQueueEntryP.nc">
      <component-ref qname="SendingBuffer_AppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7ff8ddc3b590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7ff8ddc3b910"/>
        <function-ref name="source" scoped="" ref="0x7ff8ddc3baa0"/>
        <function-ref name="address" scoped="" ref="0x7ff8ddc3bc30"/>
        <function-ref name="destination" scoped="" ref="0x7ff8ddc3bdc0"/>
        <function-ref name="setSource" scoped="" ref="0x7ff8ddc3a020"/>
        <function-ref name="setDestination" scoped="" ref="0x7ff8ddc3a1b0"/>
        <function-ref name="type" scoped="" ref="0x7ff8ddc3a340"/>
        <function-ref name="setType" scoped="" ref="0x7ff8ddc3a4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7ff8ddc3a660"/>
        <function-ref name="setGroup" scoped="" ref="0x7ff8ddc3a7f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7ff8ddc3a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7ff8df294940" loc="43:../../../..//tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7ff8df294940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8df294cc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df294e50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df291020"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8df2911b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8df291340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7ff8df247400" loc="48:../../../..//tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7ff8df247400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8df2477a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df247930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df247ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8df247c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8df247de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7ff8df2484b0" loc="46:../../../..//tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7ff8df2484b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8df248850"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df2489e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df248b70"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8df248d00"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8df247020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7ff8df245720" loc="50:../../../..//tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7ff8df245720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df245aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8df245c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df245dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df244020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8df2441b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7ff8df244480" loc="169:../../../..//tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7ff8df244480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df244800"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df244990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7ff8df244c60" loc="126:../../../..//tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7ff8df244c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df242020"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df2421b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7ff8df246060" loc="49:../../../..//tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7ff8df246060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7ff8df2463e0"/>
        <function-ref name="source" scoped="" ref="0x7ff8df246570"/>
        <function-ref name="address" scoped="" ref="0x7ff8df246700"/>
        <function-ref name="destination" scoped="" ref="0x7ff8df246890"/>
        <function-ref name="setSource" scoped="" ref="0x7ff8df246a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7ff8df246bb0"/>
        <function-ref name="type" scoped="" ref="0x7ff8df246d40"/>
        <function-ref name="setType" scoped="" ref="0x7ff8df245020"/>
        <function-ref name="isForMe" scoped="" ref="0x7ff8df2451b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7ff8df245340"/>
        <function-ref name="localGroup" scoped="" ref="0x7ff8df2454d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7ff8df23e140" loc="61:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7ff8df23e140"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8df23e4c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8df23e650"/>
        <function-ref name="start" scoped="" ref="0x7ff8df23e7e0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8df23e970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7ff8df23d1d0" loc="63:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7ff8df23d1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8df23d550"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df23d6e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df23d870"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8df23da00"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8df23db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7ff8df23b020" loc="65:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7ff8df23b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8df23b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7ff8df23b630" loc="67:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7ff8df23b630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df23b9b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8df23bb40"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df23bcd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df23be60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8df23a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7ff8df233cd0" loc="70:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7ff8df233cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7ff8df2362e0"/>
        <function-ref name="clear" scoped="" ref="0x7ff8df236a10"/>
        <function-ref name="isValid" scoped="" ref="0x7ff8df237b60"/>
        <function-ref name="set" scoped="" ref="0x7ff8df22d170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7ff8df222b20" loc="72:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8df222b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7ff8df228020"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7ff8df2281b0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7ff8df228340"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7ff8df2284d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8df23c3f0" loc="64:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8df23c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8df23c770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7ff8df239990" loc="69:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8df239990"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7ff8df239d10"/>
        <function-ref name="noAck" scoped="" ref="0x7ff8df238020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7ff8df2381b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7ff8df23a2d0" loc="68:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7ff8df23a2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7ff8df23a650"/>
        <function-ref name="source" scoped="" ref="0x7ff8df23a7e0"/>
        <function-ref name="address" scoped="" ref="0x7ff8df23a970"/>
        <function-ref name="destination" scoped="" ref="0x7ff8df23ab00"/>
        <function-ref name="setSource" scoped="" ref="0x7ff8df23ac90"/>
        <function-ref name="setDestination" scoped="" ref="0x7ff8df23ae20"/>
        <function-ref name="type" scoped="" ref="0x7ff8df239020"/>
        <function-ref name="setType" scoped="" ref="0x7ff8df2391b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7ff8df239340"/>
        <function-ref name="setGroup" scoped="" ref="0x7ff8df2394d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7ff8df239660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7ff8df22ddc0" loc="71:../../../..//tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7ff8df22ddc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7ff8df22b3f0"/>
        <function-ref name="clear" scoped="" ref="0x7ff8df22bb20"/>
        <function-ref name="isValid" scoped="" ref="0x7ff8df22cca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df2292a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7ff8df216880" loc="55:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7ff8df216880"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8df216c00"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8df216d90"/>
        <function-ref name="start" scoped="" ref="0x7ff8df215020"/>
        <function-ref name="stop" scoped="" ref="0x7ff8df2151b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7ff8df1fcd40" loc="64:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8df1fcd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7ff8df2040e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7ff8df204270"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7ff8df204400"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7ff8df204590"/>
        <function-ref name="setCca" scoped="" ref="0x7ff8df204720"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7ff8df2048b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7ff8df1efd20" loc="67:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7ff8df1efd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7ff8df1f91c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7ff8df210760" loc="60:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7ff8df210760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df210ae0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8df210c70"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df210e00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df20f020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8df20f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7ff8df215980" loc="56:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7ff8df215980"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8df215d00"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df214020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df2141b0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8df214340"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8df2144d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7ff8df212900" loc="58:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7ff8df212900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8df212c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7ff8df207970" loc="61:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8df207970"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7ff8df207cf0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7ff8df207e80"/>
        <function-ref name="getRssi" scoped="" ref="0x7ff8df20e030"/>
        <function-ref name="getNetwork" scoped="" ref="0x7ff8df20e1c0"/>
        <function-ref name="getPower" scoped="" ref="0x7ff8df20e350"/>
        <function-ref name="getLqi" scoped="" ref="0x7ff8df20e4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7ff8df204bb0" loc="65:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8df204bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7ff8df1fb020"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7ff8df1fb1b0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7ff8df1fb340"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7ff8df1fb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8df214cb0" loc="57:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8df214cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8df2120a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7ff8df20e810" loc="62:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8df20e810"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7ff8df20eb90"/>
        <function-ref name="noAck" scoped="" ref="0x7ff8df20ed20"/>
        <function-ref name="wasAcked" scoped="" ref="0x7ff8df206020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7ff8df1fa020" loc="66:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7ff8df1fa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7ff8df1fa3a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7ff8df1fa530"/>
        <function-ref name="getRetries" scoped="" ref="0x7ff8df1fa6c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7ff8df1fa850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7ff8df1fa9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7ff8df211020" loc="59:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7ff8df211020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7ff8df2113a0"/>
        <function-ref name="source" scoped="" ref="0x7ff8df211530"/>
        <function-ref name="address" scoped="" ref="0x7ff8df2116c0"/>
        <function-ref name="destination" scoped="" ref="0x7ff8df211850"/>
        <function-ref name="setSource" scoped="" ref="0x7ff8df2119e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7ff8df211b70"/>
        <function-ref name="type" scoped="" ref="0x7ff8df211d00"/>
        <function-ref name="setType" scoped="" ref="0x7ff8df210020"/>
        <function-ref name="isForMe" scoped="" ref="0x7ff8df2101b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7ff8df210340"/>
        <function-ref name="localGroup" scoped="" ref="0x7ff8df2104d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7ff8df203a80" loc="63:../../../..//tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7ff8df203a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7ff8df203e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7ff8df1f1b70" loc="43:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7ff8df1f1b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8df1ec020"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8df1ec1b0"/>
        <function-ref name="start" scoped="" ref="0x7ff8df1ec340"/>
        <function-ref name="stop" scoped="" ref="0x7ff8df1ec4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7ff8df1e59d0" loc="55:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7ff8df1e59d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7ff8df1e5d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7ff8df1e4b70" loc="57:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7ff8df1e4b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7ff8df1e3020"/>
        <function-ref name="setRetries" scoped="" ref="0x7ff8df1e31b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7ff8df1e3340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7ff8df1e34d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7ff8df1e3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7ff8df1e6140" loc="53:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8df1e6140"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7ff8df1e64c0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7ff8df1e6650"/>
        <function-ref name="getRssi" scoped="" ref="0x7ff8df1e67e0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7ff8df1e6970"/>
        <function-ref name="getPower" scoped="" ref="0x7ff8df1e6b00"/>
        <function-ref name="getLqi" scoped="" ref="0x7ff8df1e6c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7ff8df1e8d10" loc="50:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7ff8df1e8d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8df1e70e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df1e7270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df1e7400"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8df1e7590"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8df1e7720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7ff8df1e4080" loc="56:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8df1e4080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7ff8df1e4400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7ff8df1e4590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7ff8df1e4720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7ff8df1e48b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7ff8df1e9820" loc="47:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7ff8df1e9820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8df1e9ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7ff8df1e5020" loc="54:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8df1e5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7ff8df1e53a0"/>
        <function-ref name="noAck" scoped="" ref="0x7ff8df1e5530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7ff8df1e56c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8df1ecd00" loc="45:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8df1ecd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8df1ea0a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8df1ea230"/>
        <function-ref name="request" scoped="" ref="0x7ff8df1ea3c0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8df1ea550"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8df1ea6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7ff8df1eaa00" loc="46:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7ff8df1eaa00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8df1ead80"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df1e9020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df1e91b0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8df1e9340"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8df1e94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7ff8df1e8020" loc="48:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7ff8df1e8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df1e83a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8df1e8530"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df1e86c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df1e8850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8df1e89e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7ff8df1e7a90" loc="51:../../../..//tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7ff8df1e7a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8df1e7e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7ff8df1e0390" loc="44:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7ff8df1e0390"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8df1e0710"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8df1e08a0"/>
        <function-ref name="start" scoped="" ref="0x7ff8df1e0a30"/>
        <function-ref name="stop" scoped="" ref="0x7ff8df1e0bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7ff8df1de330" loc="47:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8df1de330"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7ff8df1de6b0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7ff8df1de840"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7ff8df1de9d0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7ff8df1deb60"/>
        <function-ref name="setCca" scoped="" ref="0x7ff8df1decf0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7ff8df1dee80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7ff8df1e0e80" loc="45:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7ff8df1e0e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8df1df220"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df1df3b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df1df540"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8df1df6d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8df1df860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8df1dfb40" loc="46:../../../..//tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8df1dfb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8df1de020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7ff8df1dde80" loc="39:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7ff8df1dde80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8df1da220"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8df1da3b0"/>
        <function-ref name="start" scoped="" ref="0x7ff8df1da540"/>
        <function-ref name="stop" scoped="" ref="0x7ff8df1da6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7ff8df1d97e0" loc="41:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8df1d97e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7ff8df1d9b60"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7ff8df1d9cf0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7ff8df1d9e80"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7ff8df1d7030"/>
        <function-ref name="setCca" scoped="" ref="0x7ff8df1d71c0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7ff8df1d7350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7ff8df1cc060" loc="47:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7ff8df1cc060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7ff8df1cc3e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7ff8df1cc570"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7ff8df1cc700"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7ff8df1cc890"/>
        <function-ref name="setCca" scoped="" ref="0x7ff8df1cca20"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7ff8df1ccbb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7ff8df1c2330" loc="50:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8df1c2330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7ff8df1c26b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7ff8df1c2840"/>
        <function-ref name="getRssi" scoped="" ref="0x7ff8df1c29d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7ff8df1c2b60"/>
        <function-ref name="getPower" scoped="" ref="0x7ff8df1c2cf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7ff8df1c2e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Transmit" ref="0x7ff8df1c42a0" loc="46:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7ff8df1c42a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8df1c4620"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8df1c47b0"/>
        <function-ref name="modify" scoped="" ref="0x7ff8df1c4940"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8df1c4ad0"/>
        <function-ref name="resend" scoped="" ref="0x7ff8df1c4c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7ff8df1da990" loc="40:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7ff8df1da990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8df1dad10"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df1d9020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8df1d91b0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8df1d9340"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8df1d94d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7ff8df1c0420" loc="48:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7ff8df1c0420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7ff8df1c07a0"/>
        <function-ref name="rand32" scoped="" ref="0x7ff8df1c0930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7ff8df1cb760" loc="45:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7ff8df1cb760"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7ff8df1cbae0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8df1cbc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7ff8df1b9920" loc="51:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8df1b9920"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7ff8df1b9ca0"/>
        <function-ref name="getHeader" scoped="" ref="0x7ff8df1b9e30"/>
        <function-ref name="getMetadata" scoped="" ref="0x7ff8df1be020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Power" ref="0x7ff8df1cfb50" loc="44:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7ff8df1cfb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7ff8df1d5020"/>
        <function-ref name="rfOff" scoped="" ref="0x7ff8df1d51b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7ff8df1d5340"/>
        <function-ref name="startVReg" scoped="" ref="0x7ff8df1d54d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7ff8df1d5660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7ff8df1d57f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7ff8df1d5980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7ff8df1d5b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7ff8df1c0bf0" loc="49:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7ff8df1c0bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ff8df1c3020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ff8df1c31b0"/>
        <function-ref name="led1On" scoped="" ref="0x7ff8df1c3340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ff8df1c34d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ff8df1c3660"/>
        <function-ref name="get" scoped="" ref="0x7ff8df1c37f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7ff8df1c3980"/>
        <function-ref name="led2Off" scoped="" ref="0x7ff8df1c2020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df1c3b10"/>
        <function-ref name="led0On" scoped="" ref="0x7ff8df1c3ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7ff8df1c3e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7ff8df1d7640" loc="43:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8df1d7640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8df1d79c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8df1d7b50"/>
        <function-ref name="request" scoped="" ref="0x7ff8df1d7ce0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8df1d7e70"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8df1d6030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControlState" ref="0x7ff8df1bd110" loc="52:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControlState" scoped="" ref="0x7ff8df1bd110"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7ff8df1bd590"/>
        <function-ref name="toIdle" scoped="" ref="0x7ff8df1bd720"/>
        <function-ref name="isState" scoped="" ref="0x7ff8df1bd8b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7ff8df1bda40"/>
        <function-ref name="requestState" scoped="" ref="0x7ff8df1bdbd0"/>
        <function-ref name="forceState" scoped="" ref="0x7ff8df1bdd60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendDone_task" ref="0x7ff8df1afb70" loc="76:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendDone_task" scoped="" ref="0x7ff8df1afb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df1ae020"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df1ae1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDone_task" ref="0x7ff8df1b1ba0" loc="75:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDone_task" scoped="" ref="0x7ff8df1b1ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df1af020"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df1af1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDone_task" ref="0x7ff8df1b2c20" loc="74:../../../..//tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDone_task" scoped="" ref="0x7ff8df1b2c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df1b1020"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df1b11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7ff8df158dc0" loc="45:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7ff8df158dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7ff8df164180"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7ff8df164310"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7ff8df1644a0"/>
        <function-ref name="syncDone" scoped="" ref="0x7ff8df164630"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7ff8df1647c0"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7ff8df164950"/>
        <function-ref name="setChannel" scoped="" ref="0x7ff8df164ae0"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7ff8df164c70"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7ff8df164e00"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7ff8df163020"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7ff8df1631b0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7ff8df163340"/>
        <function-ref name="sync" scoped="" ref="0x7ff8df1634d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7ff8df163760"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7ff8df1638f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7ff8df1540c0" loc="47:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7ff8df1540c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df154cb0"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8df153170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7ff8df163bf0" loc="46:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7ff8df163bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7ff8df157020"/>
        <function-ref name="rfOff" scoped="" ref="0x7ff8df1571b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7ff8df157340"/>
        <function-ref name="startVReg" scoped="" ref="0x7ff8df1574d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7ff8df157660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7ff8df1577f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7ff8df157980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7ff8df157b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8df168950" loc="44:../../../..//tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8df168950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8df168cd0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8df168e60"/>
        <function-ref name="request" scoped="" ref="0x7ff8df165020"/>
        <function-ref name="granted" scoped="" ref="0x7ff8df1651b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8df165340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7ff8df14e970" loc="46:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7ff8df14e970"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7ff8df14ecf0"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7ff8df14ee80"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7ff8df14d030"/>
        <function-ref name="syncDone" scoped="" ref="0x7ff8df14d1c0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7ff8df14d350"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7ff8df14d4e0"/>
        <function-ref name="setChannel" scoped="" ref="0x7ff8df14d670"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7ff8df14d800"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7ff8df14d990"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7ff8df14db20"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7ff8df14dcb0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7ff8df14de40"/>
        <function-ref name="sync" scoped="" ref="0x7ff8df14c020"/>
        <function-ref name="getChannel" scoped="" ref="0x7ff8df14c2b0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7ff8df14c440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXCTRL1" ref="0x7ff8df1268e0" loc="66:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8df1268e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df126c60"/>
        <function-ref name="write" scoped="" ref="0x7ff8df126df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalIeeeEui64" ref="0x7ff8df147020" loc="50:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7ff8df147020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7ff8df1473a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StartupTimer" ref="0x7ff8df13fd90" loc="52:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StartupTimer" scoped="" ref="0x7ff8df13fd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8df13d670"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df1455d0"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8df13d020"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8df145a90"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8df13db30"/>
        <function-ref name="start" scoped="" ref="0x7ff8df146bc0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8df145110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL0" ref="0x7ff8df12a5f0" loc="64:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8df12a5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df12a970"/>
        <function-ref name="write" scoped="" ref="0x7ff8df12ab00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7ff8df13b380" loc="54:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7ff8df13b380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df13b700"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df13b890"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df13ba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df13bbb0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df13bd40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df13a020"/>
        <function-ref name="set" scoped="" ref="0x7ff8df13a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df13a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7ff8df14bb40" loc="48:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7ff8df14bb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df149750"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8df149bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="syncDone" ref="0x7ff8df114820" loc="126:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="syncDone" scoped="" ref="0x7ff8df114820"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df114ba0"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df114d30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSI" ref="0x7ff8df1251c0" loc="67:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7ff8df1251c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df125540"/>
        <function-ref name="write" scoped="" ref="0x7ff8df1256d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7ff8df125a70" loc="68:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7ff8df125a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df125df0"/>
        <function-ref name="write" scoped="" ref="0x7ff8df124020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG0" ref="0x7ff8df12e3d0" loc="62:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7ff8df12e3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df12e750"/>
        <function-ref name="write" scoped="" ref="0x7ff8df12e8e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7ff8df130810" loc="57:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7ff8df130810"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7ff8df130b90"/>
        <function-ref name="changed" scoped="" ref="0x7ff8df130d20"/>
        <function-ref name="amGroup" scoped="" ref="0x7ff8df137020"/>
        <function-ref name="setAddress" scoped="" ref="0x7ff8df1371b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7ff8df13c060" loc="53:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7ff8df13c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df13c3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df13c570"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df13c700"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df13c890"/>
        <function-ref name="get" scoped="" ref="0x7ff8df13ca20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df13cbb0"/>
        <function-ref name="set" scoped="" ref="0x7ff8df13cd40"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df13b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCOFF" ref="0x7ff8df123120" loc="71:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8df123120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8df1236a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VREN" ref="0x7ff8df13a6a0" loc="55:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7ff8df13a6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8df13aa20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8df13abb0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8df13ad40"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8df139020"/>
        <function-ref name="get" scoped="" ref="0x7ff8df1391b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8df139340"/>
        <function-ref name="set" scoped="" ref="0x7ff8df1394d0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8df139660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8df14f510" loc="44:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8df14f510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df14f890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7ff8df126020" loc="65:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8df126020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df1263a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8df126530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCON" ref="0x7ff8df123a40" loc="72:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7ff8df123a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8df123dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7ff8df1221d0" loc="74:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7ff8df1221d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8df122550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8df1226e0"/>
        <function-ref name="request" scoped="" ref="0x7ff8df122870"/>
        <function-ref name="granted" scoped="" ref="0x7ff8df122a00"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8df122b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SyncResource" ref="0x7ff8df120d90" loc="76:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SyncResource" scoped="" ref="0x7ff8df120d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8df11e180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8df11e310"/>
        <function-ref name="request" scoped="" ref="0x7ff8df11e4a0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8df11e630"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8df11e7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7ff8df14c740" loc="47:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7ff8df14c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7ff8df14cac0"/>
        <function-ref name="rfOff" scoped="" ref="0x7ff8df14cc50"/>
        <function-ref name="rxOn" scoped="" ref="0x7ff8df14cde0"/>
        <function-ref name="startVReg" scoped="" ref="0x7ff8df14b020"/>
        <function-ref name="stopVReg" scoped="" ref="0x7ff8df14b1b0"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7ff8df14b340"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7ff8df14b4d0"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7ff8df14b660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG1" ref="0x7ff8df12ec80" loc="63:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7ff8df12ec80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df12a0a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8df12a230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FSCTRL" ref="0x7ff8df127b00" loc="61:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7ff8df127b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df127e80"/>
        <function-ref name="write" scoped="" ref="0x7ff8df12e030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXON" ref="0x7ff8df1212b0" loc="69:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7ff8df1212b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8df121630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7ff8df11ea80" loc="78:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7ff8df11ea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ff8df11ee00"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ff8df11d020"/>
        <function-ref name="led1On" scoped="" ref="0x7ff8df11d1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ff8df11d340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ff8df11d4d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8df11d660"/>
        <function-ref name="led1Off" scoped="" ref="0x7ff8df11d7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7ff8df11de30"/>
        <function-ref name="set" scoped="" ref="0x7ff8df11d980"/>
        <function-ref name="led0On" scoped="" ref="0x7ff8df11db10"/>
        <function-ref name="led2On" scoped="" ref="0x7ff8df11dca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sync" ref="0x7ff8df115940" loc="125:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sync" scoped="" ref="0x7ff8df115940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8df115cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8df115e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8df14fb80" loc="45:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8df14fb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8df14e020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8df14e1b0"/>
        <function-ref name="request" scoped="" ref="0x7ff8df14e340"/>
        <function-ref name="granted" scoped="" ref="0x7ff8df14e4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8df14e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PANID" ref="0x7ff8df12f520" loc="60:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7ff8df12f520"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df12f8a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8df12fa30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IEEEADR" ref="0x7ff8df12ba90" loc="59:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7ff8df12ba90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8df12f020"/>
        <function-ref name="write" scoped="" ref="0x7ff8df12f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptCCA" ref="0x7ff8df1380e0" loc="56:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7ff8df1380e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8df138460"/>
        <function-ref name="disable" scoped="" ref="0x7ff8df1385f0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7ff8df138780"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7ff8df138910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiResource" ref="0x7ff8df120020" loc="75:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RssiResource" scoped="" ref="0x7ff8df120020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8df1203a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8df120530"/>
        <function-ref name="request" scoped="" ref="0x7ff8df1206c0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8df120850"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8df1209e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRFOFF" ref="0x7ff8df1219c0" loc="70:../../../..//tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7ff8df1219c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8df121d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8df09e7e0" loc="45:../../../..//tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8df09e7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df09eb60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7ff8df09b220" loc="46:../../../..//tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7ff8df09b220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8df099b30"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df09aa60"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8df0994e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8df099020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8df097020"/>
        <function-ref name="start" scoped="" ref="0x7ff8df09a090"/>
        <function-ref name="stop" scoped="" ref="0x7ff8df09a5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8df096d40" loc="42:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8df096d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8df0950e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7ff8df0955f0" loc="43:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7ff8df0955f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8def9be50"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def9de00"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8def9b800"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8def9b340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8def9a340"/>
        <function-ref name="start" scoped="" ref="0x7ff8def9d430"/>
        <function-ref name="stop" scoped="" ref="0x7ff8def9d940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7ff8ddbd5260" loc="44:../../../..//tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7ff8ddbd5260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8ddbd3b30"/>
        <function-ref name="fired" scoped="" ref="0x7ff8ddbd4a60"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8ddbd34e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8ddbd3020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8ddbd1020"/>
        <function-ref name="start" scoped="" ref="0x7ff8ddbd4090"/>
        <function-ref name="stop" scoped="" ref="0x7ff8ddbd45a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8ddbd69d0" loc="43:../../../..//tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8ddbd69d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8ddbd6d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7ff8ddbce2a0" loc="44:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7ff8ddbce2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8ddbcbb30"/>
        <function-ref name="fired" scoped="" ref="0x7ff8ddbccaa0"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8ddbcb4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8ddbcb020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8ddbca020"/>
        <function-ref name="start" scoped="" ref="0x7ff8ddbcc0d0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8ddbcc5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8ddbcfa10" loc="43:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8ddbcfa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8ddbcfd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7ff8ddba1c10" loc="41:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8ddba1c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8ddba0020"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8ddba01b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8ddba0340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8ddba04d0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8ddba0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7ff8ddba31b0" loc="39:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8ddba31b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8ddba3530"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8ddba36c0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8ddba3850"/>
        <function-ref name="get" scoped="" ref="0x7ff8ddba39e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8ddba3b70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8ddba3d00"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8ddba2020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8ddba21b0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8ddba2340"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8ddba24d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8ddba2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7ff8ddba28f0" loc="40:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8ddba28f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8ddba2c70"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8ddba2e00"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8ddba1020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8ddba11b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8ddba1340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8ddba14d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8ddba1660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8ddba17f0"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8ddba1980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7ff8df072ba0" loc="52:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8df072ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8df071020"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8df0711b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8df071340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8df0714d0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8df071660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7ff8df0764d0" loc="50:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8df0764d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df076850"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df0769e0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df076b70"/>
        <function-ref name="get" scoped="" ref="0x7ff8df076d00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df075020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df0751b0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df075340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df0754d0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df075660"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df0757f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df075980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7ff8df073280" loc="51:../../../..//tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8df073280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8df073600"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8df073790"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df073920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8df073ab0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8df073c40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df073dd0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8df072020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8df0721b0"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8df072340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7ff8ddb97a80" loc="49:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8ddb97a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8ddb97e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8ddb96020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8ddb961b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8ddb96340"/>
        <function-ref name="fired" scoped="" ref="0x7ff8ddb964d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7ff8ddb99020" loc="47:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8ddb99020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8ddb993a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8ddb99530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8ddb996c0"/>
        <function-ref name="get" scoped="" ref="0x7ff8ddb99850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8ddb999e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8ddb99b70"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8ddb99d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8ddb98020"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8ddb981b0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8ddb98340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8ddb984d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7ff8ddb9eda0" loc="46:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7ff8ddb9eda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8ddb9b670"/>
        <function-ref name="fired" scoped="" ref="0x7ff8ddb9c610"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8ddb9b020"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8ddb9cad0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8ddb9bb30"/>
        <function-ref name="start" scoped="" ref="0x7ff8ddb9dbf0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8ddb9c150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8ddb9e510" loc="45:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8ddb9e510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8ddb9e890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7ff8ddb98760" loc="48:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8ddb98760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8ddb98ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8ddb98c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8ddb98e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8ddb97020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8ddb971b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8ddb97340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8ddb974d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8ddb97660"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8ddb977f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7ff8df021020" loc="43:../../../..//tos/chips/msp430/timer/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7ff8df021020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8df021e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df020800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df020340"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df020cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7ff8df017020" loc="43:../../../..//tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7ff8df017020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8df017e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df016800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df016340"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df016cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7ff8df0042c0" loc="45:../../../..//tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8df0042c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8df004640"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8df0047d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8df004960"/>
        <function-ref name="get" scoped="" ref="0x7ff8df004af0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8df004c80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df004e10"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8df003020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df0031b0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df003340"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8df0034d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8df003660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7ff8df0060a0" loc="44:../../../..//tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7ff8df0060a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8df005020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8df0059a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8df0054e0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8df005e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7ff8defe1020" loc="63:../../../..//tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7ff8defe1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8defe1e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8defdf800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8defdf340"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8defdfcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7ff8defffad0" loc="62:../../../..//tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7ff8defffad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8defe3970"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8defe2340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8defe3e30"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8defe2800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7ff8ddbc85f0" loc="61:../../../..//tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7ff8ddbc85f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8ddbb2e50"/>
        <function-ref name="fired" scoped="" ref="0x7ff8ddbb3e00"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8ddbb2800"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8ddbb2340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8ddbb0340"/>
        <function-ref name="start" scoped="" ref="0x7ff8ddbb3430"/>
        <function-ref name="stop" scoped="" ref="0x7ff8ddbb3940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7ff8ddbaed20" loc="73:../../../..//tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7ff8ddbaed20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8ddbaa670"/>
        <function-ref name="fired" scoped="" ref="0x7ff8ddbac550"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8ddbaa020"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8ddbaca10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8ddbaab30"/>
        <function-ref name="start" scoped="" ref="0x7ff8ddbadb60"/>
        <function-ref name="stop" scoped="" ref="0x7ff8ddbac090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7ff8ddbb09b0" loc="68:../../../..//tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7ff8ddbb09b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8ddbaf7e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8ddbae1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8ddbafca0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8ddbae670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFO" ref="0x7ff8def959c0" loc="44:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7ff8def959c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def95d40"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def94020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def941b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def94340"/>
        <function-ref name="get" scoped="" ref="0x7ff8def944d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def94660"/>
        <function-ref name="set" scoped="" ref="0x7ff8def947f0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def94980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFOP" ref="0x7ff8def94cf0" loc="45:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7ff8def94cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def930a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def93230"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def933c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def93550"/>
        <function-ref name="get" scoped="" ref="0x7ff8def936e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def93870"/>
        <function-ref name="set" scoped="" ref="0x7ff8def93a00"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def93b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7ff8def92020" loc="46:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7ff8def92020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def923a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def92530"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def926c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def92850"/>
        <function-ref name="get" scoped="" ref="0x7ff8def929e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def92b70"/>
        <function-ref name="set" scoped="" ref="0x7ff8def92d00"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def91020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CSN" ref="0x7ff8def96690" loc="43:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7ff8def96690"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def96a10"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def96ba0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def96d30"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def95020"/>
        <function-ref name="get" scoped="" ref="0x7ff8def951b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def95340"/>
        <function-ref name="set" scoped="" ref="0x7ff8def954d0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def95660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VREN" ref="0x7ff8def906a0" loc="48:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7ff8def906a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def90a20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def90bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def90d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def8f020"/>
        <function-ref name="get" scoped="" ref="0x7ff8def8f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def8f340"/>
        <function-ref name="set" scoped="" ref="0x7ff8def8f4d0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def8f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CCA" ref="0x7ff8def973e0" loc="42:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7ff8def973e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def97760"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def978f0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def97a80"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def97c10"/>
        <function-ref name="get" scoped="" ref="0x7ff8def97da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def96020"/>
        <function-ref name="set" scoped="" ref="0x7ff8def961b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def96340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFD" ref="0x7ff8def91370" loc="47:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7ff8def91370"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def916f0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def91880"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def91a10"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def91ba0"/>
        <function-ref name="get" scoped="" ref="0x7ff8def91d30"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def90020"/>
        <function-ref name="set" scoped="" ref="0x7ff8def901b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def90340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7ff8def8cc50" loc="44:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def8cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def8b020"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def8b1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8def8b340"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def8b4d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def8b660"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8def8b7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def8b980"/>
        <function-ref name="get" scoped="" ref="0x7ff8def8bb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8def8bca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8def8be30"/>
        <function-ref name="set" scoped="" ref="0x7ff8def8a020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8def8a1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8def8a340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8def8a5d0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def8a760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7ff8def8da20" loc="43:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def8da20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def8dda0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def8c020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def8c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def8c340"/>
        <function-ref name="get" scoped="" ref="0x7ff8def8c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def8c660"/>
        <function-ref name="set" scoped="" ref="0x7ff8def8c7f0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def8c980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7ff8def877a0" loc="44:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def877a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def87b20"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def87cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8def87e40"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def86020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def861b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8def86340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def864d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8def86660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8def867f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8def86980"/>
        <function-ref name="set" scoped="" ref="0x7ff8def86b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8def86ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8def86e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8def85120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def852b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7ff8def88520" loc="43:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def88520"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def888a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def88a30"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def88bc0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def88d50"/>
        <function-ref name="get" scoped="" ref="0x7ff8def87020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def871b0"/>
        <function-ref name="set" scoped="" ref="0x7ff8def87340"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def874d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7ff8def822f0" loc="44:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def822f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def82670"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def82800"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8def82990"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def82b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def82cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8def82e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def81020"/>
        <function-ref name="get" scoped="" ref="0x7ff8def811b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8def81340"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8def814d0"/>
        <function-ref name="set" scoped="" ref="0x7ff8def81660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8def817f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8def81980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8def81c10"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def81da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7ff8def83060" loc="43:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def83060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def833e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def83570"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def83700"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def83890"/>
        <function-ref name="get" scoped="" ref="0x7ff8def83a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def83bb0"/>
        <function-ref name="set" scoped="" ref="0x7ff8def83d40"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def82020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7ff8def7ede0" loc="44:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def7ede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def7d180"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def7d310"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8def7d4a0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def7d630"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def7d7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8def7d950"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def7dae0"/>
        <function-ref name="get" scoped="" ref="0x7ff8def7dc70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8def7de00"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8def7c020"/>
        <function-ref name="set" scoped="" ref="0x7ff8def7c1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8def7c340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8def7c4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8def7c760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def7c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7ff8def7fb70" loc="43:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def7fb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def7e020"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def7e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def7e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def7e4d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8def7e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def7e7f0"/>
        <function-ref name="set" scoped="" ref="0x7ff8def7e980"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def7eb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7ff8def79930" loc="44:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def79930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def79cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def79e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8def77020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def771b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def77340"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8def774d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def77660"/>
        <function-ref name="get" scoped="" ref="0x7ff8def777f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8def77980"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8def77b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8def77ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8def77e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8def76020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8def762b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def76440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7ff8def7a710" loc="43:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def7a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def7aa90"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def7ac20"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def7adb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def79020"/>
        <function-ref name="get" scoped="" ref="0x7ff8def791b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def79340"/>
        <function-ref name="set" scoped="" ref="0x7ff8def794d0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def79660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7ff8def73480" loc="44:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def73480"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def73800"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def73990"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8def73b20"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def73cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def73e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8def72020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def721b0"/>
        <function-ref name="get" scoped="" ref="0x7ff8def72340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8def724d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8def72660"/>
        <function-ref name="set" scoped="" ref="0x7ff8def727f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8def72980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8def72b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8def72da0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def71020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7ff8def741b0" loc="43:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def741b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def74530"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def746c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def74850"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def749e0"/>
        <function-ref name="get" scoped="" ref="0x7ff8def74b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def74d00"/>
        <function-ref name="set" scoped="" ref="0x7ff8def73020"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def731b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7ff8def6e020" loc="44:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8def6e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def6e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def6e530"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8def6e6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def6e850"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def6e9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8def6eb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def6ed00"/>
        <function-ref name="get" scoped="" ref="0x7ff8def6d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8def6d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8def6d340"/>
        <function-ref name="set" scoped="" ref="0x7ff8def6d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8def6d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8def6d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8def6da80"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def6dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7ff8def70d70" loc="43:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def70d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def6f180"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def6f310"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def6f4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def6f630"/>
        <function-ref name="get" scoped="" ref="0x7ff8def6f7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def6f950"/>
        <function-ref name="set" scoped="" ref="0x7ff8def6fae0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def6fc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureSFD" ref="0x7ff8def555a0" loc="42:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7ff8def555a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7ff8def55920"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def55ab0"/>
        <function-ref name="captured" scoped="" ref="0x7ff8def55c40"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7ff8def55dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptCCA" ref="0x7ff8def5a210" loc="43:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7ff8def5a210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8def5a590"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def5a720"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7ff8def5a8b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7ff8def5aa40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptFIFOP" ref="0x7ff8def5ae30" loc="44:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7ff8def5ae30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8def591e0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def59370"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7ff8def59500"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7ff8def59690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Capture" ref="0x7ff8def3eda0" loc="42:../../../..//tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Capture" scoped="" ref="0x7ff8def3eda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8def3d180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7ff8def3d310"/>
        <function-ref name="captured" scoped="" ref="0x7ff8def3d4a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8def3d630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8def3d7c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7ff8def3d950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7ff8def3f020" loc="40:../../../..//tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7ff8def3f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7ff8def3f3a0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def3f530"/>
        <function-ref name="captured" scoped="" ref="0x7ff8def3f6c0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7ff8def3f850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7ff8def3fae0" loc="41:../../../..//tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8def3fae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8def3fe60"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8def3e020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8def3e1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8def3e340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8def3e4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8def3e660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8def3e7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8def3e980"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8def3eb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x7ff8def3dc20" loc="43:../../../..//tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8def3dc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8def3c020"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8def3c1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8def3c340"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8def3c4d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8def3c660"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8def3c7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8def3c980"/>
        <function-ref name="get" scoped="" ref="0x7ff8def3cb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8def3cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8def3ce30"/>
        <function-ref name="set" scoped="" ref="0x7ff8def3b020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8def3b1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8def3b340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8def3b5d0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8def3b760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7ff8def2ec40" loc="46:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7ff8def2ec40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def2d020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def2d1b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def2d340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def2d4d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def2d660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def2d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7ff8def23bc0" loc="58:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7ff8def23bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def22020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def221b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def22340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def224d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def22660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def227f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7ff8def2abc0" loc="49:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7ff8def2abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def29020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def291b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def29340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def294d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def29660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def297f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7ff8def28bc0" loc="53:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7ff8def28bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def27020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def271b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def27340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def274d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def27660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def277f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7ff8def34d20" loc="44:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7ff8def34d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def2f0e0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def2f270"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def2f400"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def2f590"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def2f720"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def2f8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7ff8def25bc0" loc="56:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7ff8def25bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def240a0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def24230"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def243c0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def24550"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def246e0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def24870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7ff8def2dbc0" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7ff8def2dbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def2b020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def2b1b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def2b340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def2b4d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def2b660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def2b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7ff8def22bc0" loc="59:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7ff8def22bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def21020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def211b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def21340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def214d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def21660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def217f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7ff8def30e70" loc="42:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7ff8def30e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def35220"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def353b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def35540"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def356d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def35860"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def359f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7ff8def27bc0" loc="54:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7ff8def27bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def26020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def261b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def26340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def264d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def26660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def267f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7ff8def2fc80" loc="45:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7ff8def2fc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def2e0a0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def2e230"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def2e3c0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def2e550"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def2e6e0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def2e870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7ff8def24c40" loc="57:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7ff8def24c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def23020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def231b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def23340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def234d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def23660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def237f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7ff8def2bbc0" loc="48:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7ff8def2bbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def2a020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def2a1b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def2a340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def2a4d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def2a660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def2a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7ff8def29bc0" loc="52:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7ff8def29bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def28020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def281b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def28340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def284d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def28660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def287f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7ff8def35dc0" loc="43:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7ff8def35dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def34180"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def34310"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def344a0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def34630"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def347c0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def34950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7ff8def26bc0" loc="55:../../../..//tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7ff8def26bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def25020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def251b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def25340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def254d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def25660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def257f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7ff8def1aa30" loc="43:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7ff8def1aa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def1adb0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def19020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def191b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def19340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def194d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def19660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7ff8def0fbc0" loc="55:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7ff8def0fbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def0e020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def0e1b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def0e340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def0e4d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def0e660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def0e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7ff8def17a30" loc="46:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7ff8def17a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def17db0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def16020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def161b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def16340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def164d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def16660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7ff8def15a30" loc="50:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7ff8def15a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def15db0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def14020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def141b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def14340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def144d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def14660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7ff8def1ca30" loc="41:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7ff8def1ca30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def1cdb0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def1b020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def1b1b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def1b340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def1b4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def1b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7ff8def11a30" loc="53:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7ff8def11a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def10020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def101b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def10340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def104d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def10660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def107f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7ff8def19a30" loc="44:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7ff8def19a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def19db0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def18020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def181b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def18340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def184d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def18660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7ff8def0ebc0" loc="56:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7ff8def0ebc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def0d020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def0d1b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def0d340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def0d4d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def0d660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def0d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7ff8def209c0" loc="39:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7ff8def209c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def20d40"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def1d020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def1d1b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def1d340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def1d4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def1d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7ff8def14a30" loc="51:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7ff8def14a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def14db0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def13020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def131b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def13340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def134d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def13660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7ff8def1ba30" loc="42:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7ff8def1ba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def1bdb0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def1a020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def1a1b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def1a340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def1a4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def1a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7ff8def10bc0" loc="54:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7ff8def10bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def0f020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def0f1b0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def0f340"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def0f4d0"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def0f660"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def0f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7ff8def18a30" loc="45:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7ff8def18a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def18db0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def17020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def171b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def17340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def174d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def17660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7ff8def16a30" loc="49:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7ff8def16a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def16db0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def15020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def151b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def15340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def154d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def15660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7ff8def1da30" loc="40:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7ff8def1da30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def1ddb0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def1c020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def1c1b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def1c340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def1c4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def1c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7ff8def13a30" loc="52:../../../..//tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7ff8def13a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8def13db0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8def11020"/>
        <function-ref name="disable" scoped="" ref="0x7ff8def111b0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8def11340"/>
        <function-ref name="enable" scoped="" ref="0x7ff8def114d0"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8def11660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7ff8dee3b610" loc="46:../../../..//tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7ff8dee3b610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8dee3b990"/>
        <function-ref name="fired" scoped="" ref="0x7ff8dee3bb20"/>
        <function-ref name="disable" scoped="" ref="0x7ff8dee3bcb0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8dee3be40"/>
        <function-ref name="enable" scoped="" ref="0x7ff8dee2e020"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8dee2e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7ff8dee3ca30" loc="45:../../../..//tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7ff8dee3ca30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8dee3cdb0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8dee3b020"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7ff8dee3b1b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7ff8dee3b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7ff8dee2b610" loc="46:../../../..//tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7ff8dee2b610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8dee2b990"/>
        <function-ref name="fired" scoped="" ref="0x7ff8dee2bb20"/>
        <function-ref name="disable" scoped="" ref="0x7ff8dee2bcb0"/>
        <function-ref name="edge" scoped="" ref="0x7ff8dee2be40"/>
        <function-ref name="enable" scoped="" ref="0x7ff8dee2a020"/>
        <function-ref name="getValue" scoped="" ref="0x7ff8dee2a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7ff8dee2da70" loc="45:../../../..//tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7ff8dee2da70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8dee2ddf0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8dee2b020"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7ff8dee2b1b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7ff8dee2b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7ff8de9d4e50" loc="69:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8de9d4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d3410"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d35a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7ff8de9de160" loc="47:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7ff8de9de160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9de4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7ff8de9d8e50" loc="63:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8de9d8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d6210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7ff8de9d2880" loc="72:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de9d2880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d2c00"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d2d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7ff8de9c70a0" loc="86:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7ff8de9c70a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c7420"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c75b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7ff8de9d00a0" loc="73:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7ff8de9d00a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d0420"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d05b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7ff8de9bc500" loc="108:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de9bc500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9bc880"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9bca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7ff8de9be500" loc="104:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7ff8de9be500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9be880"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9bea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7ff8de9dc490" loc="50:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de9dc490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9dc810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7ff8de9c4880" loc="93:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7ff8de9c4880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c4c00"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c4d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7ff8de9bf500" loc="102:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de9bf500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9bf880"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9bfa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7ff8de9d6e50" loc="65:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7ff8de9d6e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d5210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7ff8de9d5e50" loc="67:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de9d5e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d4210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7ff8de9ca880" loc="83:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7ff8de9ca880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9cac00"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9cad90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7ff8de9cb0a0" loc="79:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7ff8de9cb0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9cb420"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9cb5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7ff8de9d0880" loc="74:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7ff8de9d0880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d0c00"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d0d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7ff8de9e0a90" loc="42:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de9e0a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7ff8de9e0e10"/>
        <function-ref name="abortRelease" scoped="" ref="0x7ff8de9df020"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7ff8de9df1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7ff8de9dbe00" loc="54:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de9dbe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9da1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7ff8de9da490" loc="55:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7ff8de9da490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9da910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7ff8de9c3c80" loc="95:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7ff8de9c3c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c20a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c2230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7ff8de9dabe0" loc="56:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7ff8de9dabe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9d9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7ff8de9bfce0" loc="103:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de9bfce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9be0a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9be230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7ff8de9db160" loc="52:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8de9db160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9db4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7ff8de9c40a0" loc="92:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7ff8de9c40a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c4420"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c45b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7ff8de9d5670" loc="66:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7ff8de9d5670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d59f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d5b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7ff8de9d6670" loc="64:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de9d6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d69f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d6b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7ff8de9dfad0" loc="46:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7ff8de9dfad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9dfe50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7ff8de9c50a0" loc="90:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7ff8de9c50a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c5420"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c55b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7ff8de9c7880" loc="87:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7ff8de9c7880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c7c00"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c7d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7ff8de9c5880" loc="91:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7ff8de9c5880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c5c00"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c5d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7ff8de9bdce0" loc="107:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de9bdce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9bc0a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9bc230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7ff8de9bece0" loc="105:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7ff8de9bece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9bd0a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9bd230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7ff8de9cb880" loc="80:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7ff8de9cb880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9cbc00"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9cbd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7ff8de9c60a0" loc="88:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7ff8de9c60a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c6420"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c65b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7ff8de9c0ce0" loc="101:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7ff8de9c0ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9bf0a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9bf230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7ff8de9cf880" loc="76:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7ff8de9cf880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9cfc00"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9cfd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7ff8de9bcce0" loc="111:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de9bcce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de9bb0a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de9bb230"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9bb3c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de9bb550"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de9bb6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7ff8de9df480" loc="45:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7ff8de9df480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9df800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7ff8de9d8670" loc="62:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7ff8de9d8670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d89f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d8b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7ff8de9d4670" loc="68:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7ff8de9d4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d49f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d4b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7ff8de9c90a0" loc="84:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7ff8de9c90a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c9420"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c95b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7ff8de9cf0a0" loc="75:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7ff8de9cf0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9cf420"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9cf5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7ff8de9c9880" loc="85:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7ff8de9c9880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c9c00"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c9d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7ff8de9d3870" loc="70:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7ff8de9d3870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d3bf0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d3d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7ff8de9de7b0" loc="48:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7ff8de9de7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9deb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7ff8de9d20a0" loc="71:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de9d20a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9d2420"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9d25b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8de9e1e20" loc="41:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8de9e1e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de9e01c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de9e0350"/>
        <function-ref name="request" scoped="" ref="0x7ff8de9e04e0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de9e0670"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de9e0800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7ff8de9d92f0" loc="57:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de9d92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9d9670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7ff8de9d8020" loc="59:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7ff8de9d8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9d83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7ff8de9c0500" loc="100:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7ff8de9c0500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c0880"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c0a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7ff8de9c2ce0" loc="99:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7ff8de9c2ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c00a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c0230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7ff8de9db7b0" loc="53:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de9db7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9dbb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7ff8de9c2500" loc="96:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7ff8de9c2500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c2880"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c2a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7ff8de9bd500" loc="106:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7ff8de9bd500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9bd880"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9bda10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7ff8de9ca0a0" loc="81:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7ff8de9ca0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9ca420"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9ca5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7ff8de9c6880" loc="89:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7ff8de9c6880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c6c00"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c6d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7ff8de9dee00" loc="49:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7ff8de9dee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9dc1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7ff8de9dcae0" loc="51:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7ff8de9dcae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9dce60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7ff8de9cc0a0" loc="77:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7ff8de9cc0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9cc420"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9cc5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7ff8de9d9940" loc="58:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7ff8de9d9940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9d9cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7ff8de9cc880" loc="78:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7ff8de9cc880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9ccc00"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9ccd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7ff8de9c30a0" loc="94:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7ff8de9c30a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9c3820"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9c39b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7ff8de9bb9b0" loc="112:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de9bb9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de9bbd30"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de9b9020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9b91b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de9b9340"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de9b94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7ff8dedeb630" loc="41:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7ff8dedeb630"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8dedeb9b0"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8dedebb40"/>
        <function-ref name="write" scoped="" ref="0x7ff8dedebcd0"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8dedebe60"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8dedea020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7ff8dedec680" loc="40:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8dedec680"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7ff8dedeca00"/>
        <function-ref name="abortRelease" scoped="" ref="0x7ff8dedecb90"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7ff8dedecd20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7ff8dedea8c0" loc="42:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7ff8dedea8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8dedeac40"/>
        <function-ref name="write" scoped="" ref="0x7ff8dedeadd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7ff8dede86f0" loc="43:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7ff8dede86f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8dede8a70"/>
        <function-ref name="write" scoped="" ref="0x7ff8dede8c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8dedef960" loc="39:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8dedef960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8dedefce0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8dedefe70"/>
        <function-ref name="request" scoped="" ref="0x7ff8dedec030"/>
        <function-ref name="granted" scoped="" ref="0x7ff8dedec1c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8dedec350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7ff8dede7510" loc="44:../../../..//tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7ff8dede7510"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8dede7890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiPacket" ref="0x7ff8dedd1680" loc="55:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7ff8dedd1680"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8dedd1a00"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8dedd1b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7ff8dede2bb0" loc="46:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7ff8dede2bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8dede1020"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8dede11b0"/>
        <function-ref name="write" scoped="" ref="0x7ff8dede1340"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8dede14d0"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8dede1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7ff8dede6920" loc="44:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8dede6920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7ff8dede6ca0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7ff8dede6e30"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7ff8dede3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiByte" ref="0x7ff8deddb080" loc="54:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7ff8deddb080"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7ff8deddb400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WorkingState" ref="0x7ff8dedda020" loc="56:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="WorkingState" scoped="" ref="0x7ff8dedda020"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7ff8dedda3a0"/>
        <function-ref name="toIdle" scoped="" ref="0x7ff8dedda530"/>
        <function-ref name="isState" scoped="" ref="0x7ff8dedda6c0"/>
        <function-ref name="isIdle" scoped="" ref="0x7ff8dedda850"/>
        <function-ref name="requestState" scoped="" ref="0x7ff8dedda9e0"/>
        <function-ref name="forceState" scoped="" ref="0x7ff8deddab70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7ff8deddd400" loc="53:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7ff8deddd400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8deddd780"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8deddd910"/>
        <function-ref name="request" scoped="" ref="0x7ff8dedddaa0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8dedddc30"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8deddddc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7ff8deddf020" loc="47:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7ff8deddf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8deddf3a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8deddf530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7ff8deddfdb0" loc="48:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7ff8deddfdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8dedde180"/>
        <function-ref name="write" scoped="" ref="0x7ff8dedde310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7ff8deddadf0" loc="57:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7ff8deddadf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ff8dedd91c0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ff8dedd9350"/>
        <function-ref name="led1On" scoped="" ref="0x7ff8dedd94e0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ff8dedd9670"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ff8dedd9800"/>
        <function-ref name="get" scoped="" ref="0x7ff8dedd9990"/>
        <function-ref name="led1Off" scoped="" ref="0x7ff8dedd9b20"/>
        <function-ref name="led2Off" scoped="" ref="0x7ff8dedd31b0"/>
        <function-ref name="set" scoped="" ref="0x7ff8dedd9cb0"/>
        <function-ref name="led0On" scoped="" ref="0x7ff8dedd9e40"/>
        <function-ref name="led2On" scoped="" ref="0x7ff8dedd3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8dede3810" loc="45:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8dede3810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8dede3b90"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8dede3d20"/>
        <function-ref name="request" scoped="" ref="0x7ff8dede2020"/>
        <function-ref name="granted" scoped="" ref="0x7ff8dede21b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8dede2340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grant" ref="0x7ff8dedcc120" loc="88:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grant" scoped="" ref="0x7ff8dedcc120"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8dedcc4a0"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8dedcc630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7ff8deddeba0" loc="49:../../../..//tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7ff8deddeba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8deddd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7ff8ded72770" loc="67:../../../..//tos/system/StateC.nc">
      <component-ref qname="CC2420SpiWireC.WorkingStateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7ff8ded72770"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7ff8ded72af0"/>
        <function-ref name="toIdle" scoped="" ref="0x7ff8ded72c80"/>
        <function-ref name="isState" scoped="" ref="0x7ff8ded72e10"/>
        <function-ref name="isIdle" scoped="" ref="0x7ff8ded6e020"/>
        <function-ref name="requestState" scoped="" ref="0x7ff8ded6e1b0"/>
        <function-ref name="forceState" scoped="" ref="0x7ff8ded6e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7ff8ded6d280" loc="66:../../../..//tos/system/StateImplC.nc">
      <component-ref qname="StateImplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7ff8ded6d280"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7ff8ded6d600"/>
        <function-ref name="toIdle" scoped="" ref="0x7ff8ded6d790"/>
        <function-ref name="isState" scoped="" ref="0x7ff8ded6d920"/>
        <function-ref name="isIdle" scoped="" ref="0x7ff8ded6dab0"/>
        <function-ref name="requestState" scoped="" ref="0x7ff8ded6dc40"/>
        <function-ref name="forceState" scoped="" ref="0x7ff8ded6ddd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8ded68020" loc="66:../../../..//tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8ded68020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8ded683a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7ff8ded68b70" loc="67:../../../..//tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7ff8ded68b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7ff8ded67020"/>
        <function-ref name="toIdle" scoped="" ref="0x7ff8ded671b0"/>
        <function-ref name="isState" scoped="" ref="0x7ff8ded67340"/>
        <function-ref name="isIdle" scoped="" ref="0x7ff8ded674d0"/>
        <function-ref name="requestState" scoped="" ref="0x7ff8ded67660"/>
        <function-ref name="forceState" scoped="" ref="0x7ff8ded677f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7ff8dea09020" loc="44:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7ff8dea09020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8dea093a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8dea09530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7ff8ded4f8f0" loc="43:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7ff8ded4f8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7ff8ded4fc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8ded50c40" loc="42:../../../..//tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8ded50c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8ded4f020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8ded4f1b0"/>
        <function-ref name="request" scoped="" ref="0x7ff8ded4f340"/>
        <function-ref name="granted" scoped="" ref="0x7ff8ded4f4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8ded4f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7ff8ddaba8f0" loc="82:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8ddaba8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7ff8ddabac70"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7ff8ddabae00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7ff8ddab72b0" loc="87:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7ff8ddab72b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8ddab7630"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8ddab77c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7ff8ddab7a50" loc="89:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7ff8ddab7a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7ff8ddab7dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7ff8ddab80c0" loc="83:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7ff8ddab80c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7ff8ddab8440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8ddabcc30" loc="81:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8ddabcc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8ddaba020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8ddaba1b0"/>
        <function-ref name="request" scoped="" ref="0x7ff8ddaba340"/>
        <function-ref name="granted" scoped="" ref="0x7ff8ddaba4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8ddaba660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7ff8ddab86d0" loc="85:../../../..//tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7ff8ddab86d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7ff8ddab8a50"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7ff8ddab8be0"/>
        <function-ref name="splitRead" scoped="" ref="0x7ff8ddab8d70"/>
        <function-ref name="write" scoped="" ref="0x7ff8ddab7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7ff8dece25e0" loc="74:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dece25e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7ff8dece2960"/>
        <function-ref name="configure" scoped="" ref="0x7ff8dece2af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7ff8decde510" loc="77:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7ff8decde510"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8decde890"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8decdea20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7ff8decdc600" loc="80:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7ff8decdc600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7ff8decdc980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7ff8dece2dd0" loc="75:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7ff8dece2dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7ff8dece1180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7ff8decdd370" loc="79:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7ff8decdd370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8decdd6f0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8decdd880"/>
        <function-ref name="request" scoped="" ref="0x7ff8decdda10"/>
        <function-ref name="granted" scoped="" ref="0x7ff8decddba0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8decddd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8dece7a20" loc="73:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8dece7a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8dece7da0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8dece3020"/>
        <function-ref name="request" scoped="" ref="0x7ff8dece31b0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8dece3340"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8dece34d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7ff8dece1480" loc="76:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7ff8dece1480"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7ff8dece1800"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7ff8dece1990"/>
        <function-ref name="splitRead" scoped="" ref="0x7ff8dece1b20"/>
        <function-ref name="write" scoped="" ref="0x7ff8dece1cb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7ff8decd76a0" loc="81:../../../..//tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7ff8decd76a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7ff8decd7a20"/>
        <function-ref name="txDone" scoped="" ref="0x7ff8decd7bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7ff8dec67c40" loc="76:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dec67c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7ff8dec65020"/>
        <function-ref name="configure" scoped="" ref="0x7ff8dec651b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7ff8dec64700" loc="79:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7ff8dec64700"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8dec64aa0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8dec64c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7ff8dec63e00" loc="82:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7ff8dec63e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7ff8dec621c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7ff8dec65440" loc="77:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7ff8dec65440"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7ff8dec657c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7ff8dec62490" loc="83:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7ff8dec62490"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7ff8dec62810"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7ff8dec629a0"/>
        <function-ref name="setUctl" scoped="" ref="0x7ff8dec62b30"/>
        <function-ref name="enableUart" scoped="" ref="0x7ff8dec62cc0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7ff8dec62e50"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7ff8dec61020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7ff8dec611b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7ff8dec61340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7ff8dec614d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7ff8dec61660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7ff8dec617f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7ff8dec61980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7ff8dec61b10"/>
        <function-ref name="getUbr" scoped="" ref="0x7ff8dec61da0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7ff8dec60020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7ff8dec601b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7ff8dec60340"/>
        <function-ref name="isUart" scoped="" ref="0x7ff8dec604d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7ff8dec60660"/>
        <function-ref name="isSpi" scoped="" ref="0x7ff8dec607f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7ff8dec60980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7ff8dec60b10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7ff8dec60ca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7ff8dec60e30"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8dec5f020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7ff8dec5f3b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7ff8dec5f540"/>
        <function-ref name="setUbr" scoped="" ref="0x7ff8dec5f6d0"/>
        <function-ref name="tx" scoped="" ref="0x7ff8dec5f860"/>
        <function-ref name="getUctl" scoped="" ref="0x7ff8dec5f9f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7ff8dec5fb80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7ff8dec5fd10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7ff8dec5e020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7ff8dec5e1b0"/>
        <function-ref name="rx" scoped="" ref="0x7ff8dec5e340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7ff8dec5e4d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7ff8dec5e660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7ff8dec5e7f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7ff8dec5e980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7ff8dec5eb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7ff8dec5d5a0" loc="85:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7ff8dec5d5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ff8dec5d920"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ff8dec5dab0"/>
        <function-ref name="led1On" scoped="" ref="0x7ff8dec5dc40"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ff8dec5ddd0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ff8dec5c020"/>
        <function-ref name="get" scoped="" ref="0x7ff8dec5c1b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7ff8dec5c340"/>
        <function-ref name="led2On" scoped="" ref="0x7ff8dec5c980"/>
        <function-ref name="set" scoped="" ref="0x7ff8dec5c660"/>
        <function-ref name="led2Off" scoped="" ref="0x7ff8dec5c4d0"/>
        <function-ref name="led0On" scoped="" ref="0x7ff8dec5c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7ff8dec63060" loc="81:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7ff8dec63060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8dec63400"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8dec63590"/>
        <function-ref name="request" scoped="" ref="0x7ff8dec63720"/>
        <function-ref name="granted" scoped="" ref="0x7ff8dec638b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8dec63a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8dec68e80" loc="75:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8dec68e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8dec67240"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8dec673d0"/>
        <function-ref name="request" scoped="" ref="0x7ff8dec67560"/>
        <function-ref name="granted" scoped="" ref="0x7ff8dec676f0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8dec67880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7ff8dec65a50" loc="78:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7ff8dec65a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7ff8dec65dd0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7ff8dec64020"/>
        <function-ref name="splitRead" scoped="" ref="0x7ff8dec641b0"/>
        <function-ref name="write" scoped="" ref="0x7ff8dec64340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7ff8dec5ede0" loc="84:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7ff8dec5ede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7ff8dec5d180"/>
        <function-ref name="txDone" scoped="" ref="0x7ff8dec5d310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalDone_task" ref="0x7ff8dec5cc50" loc="102:../../../..//tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalDone_task" scoped="" ref="0x7ff8dec5cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8dec5b020"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8dec5b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7ff8dec4b8a0" loc="78:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7ff8dec4b8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8dec4bc20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7ff8dec4f3b0" loc="77:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7ff8dec4f3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7ff8dec4f730"/>
        <function-ref name="txDone" scoped="" ref="0x7ff8dec4f8c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7ff8dec56860" loc="76:../../../..//tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7ff8dec56860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7ff8dec56be0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7ff8dec56d70"/>
        <function-ref name="setUctl" scoped="" ref="0x7ff8dec53020"/>
        <function-ref name="enableUart" scoped="" ref="0x7ff8dec531b0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7ff8dec53340"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7ff8dec534d0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7ff8dec53660"/>
        <function-ref name="getUtctl" scoped="" ref="0x7ff8dec537f0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7ff8dec53980"/>
        <function-ref name="resetUsart" scoped="" ref="0x7ff8dec53b10"/>
        <function-ref name="getUmctl" scoped="" ref="0x7ff8dec53ca0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7ff8dec53e30"/>
        <function-ref name="setUtctl" scoped="" ref="0x7ff8dec52020"/>
        <function-ref name="getUbr" scoped="" ref="0x7ff8dec522b0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7ff8dec52440"/>
        <function-ref name="setUmctl" scoped="" ref="0x7ff8dec525d0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7ff8dec52760"/>
        <function-ref name="isUart" scoped="" ref="0x7ff8dec528f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7ff8dec52a80"/>
        <function-ref name="isSpi" scoped="" ref="0x7ff8dec52c10"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7ff8dec52da0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7ff8dec51020"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7ff8dec511b0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7ff8dec51340"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8dec514d0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7ff8dec51860"/>
        <function-ref name="clrIntr" scoped="" ref="0x7ff8dec519f0"/>
        <function-ref name="setUbr" scoped="" ref="0x7ff8dec51b80"/>
        <function-ref name="tx" scoped="" ref="0x7ff8dec51d10"/>
        <function-ref name="getUctl" scoped="" ref="0x7ff8dec50020"/>
        <function-ref name="disableUart" scoped="" ref="0x7ff8dec501b0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7ff8dec50340"/>
        <function-ref name="setModeUart" scoped="" ref="0x7ff8dec504d0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7ff8dec50660"/>
        <function-ref name="rx" scoped="" ref="0x7ff8dec507f0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7ff8dec50980"/>
        <function-ref name="isUartTx" scoped="" ref="0x7ff8dec50b10"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7ff8dec50ca0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7ff8dec50e30"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7ff8dec4f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7ff8dec12670" loc="82:../../../..//tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7ff8dec12670"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8dec129f0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8dec12b80"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8dec12d10"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8dec11020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8dec111b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8dec11340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8dec114d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8dec11660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8dec117f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8dec11980"/>
        <function-ref name="set" scoped="" ref="0x7ff8dec11b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8dec11ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8dec11e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8dec10120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8dec102b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7ff8dec45dc0" loc="76:../../../..//tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7ff8dec45dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7ff8dec44180"/>
        <function-ref name="txDone" scoped="" ref="0x7ff8dec44310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7ff8dec10670" loc="83:../../../..//tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7ff8dec10670"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8dec109f0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8dec10b80"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8dec10d10"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8dec0f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8dec0f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8dec0f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8dec0f4d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8dec0f660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8dec0f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8dec0f980"/>
        <function-ref name="set" scoped="" ref="0x7ff8dec0fb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8dec0fca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8dec0fe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8dec0e120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8dec0e2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7ff8dec0e670" loc="84:../../../..//tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7ff8dec0e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8dec0e9f0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8dec0eb80"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8dec0ed10"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8dec0d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8dec0d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8dec0d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8dec0d4d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8dec0d660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8dec0d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8dec0d980"/>
        <function-ref name="set" scoped="" ref="0x7ff8dec0db10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8dec0dca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8dec0de30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8dec0c120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8dec0c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7ff8dec49020" loc="75:../../../..//tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7ff8dec49020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7ff8dec493a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7ff8dec49530"/>
        <function-ref name="setUctl" scoped="" ref="0x7ff8dec496c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7ff8dec49850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7ff8dec499e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7ff8dec49b70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7ff8dec49d00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7ff8dec48020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7ff8dec481b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7ff8dec48340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7ff8dec484d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7ff8dec48660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7ff8dec487f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7ff8dec48a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7ff8dec48c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7ff8dec48da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7ff8dec47020"/>
        <function-ref name="isUart" scoped="" ref="0x7ff8dec471b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7ff8dec47340"/>
        <function-ref name="isSpi" scoped="" ref="0x7ff8dec474d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7ff8dec47660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7ff8dec477f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7ff8dec47980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7ff8dec47b10"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8dec47ca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7ff8dec46220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7ff8dec463b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7ff8dec46540"/>
        <function-ref name="tx" scoped="" ref="0x7ff8dec466d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7ff8dec46860"/>
        <function-ref name="disableUart" scoped="" ref="0x7ff8dec469f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7ff8dec46b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7ff8dec46d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7ff8dec45020"/>
        <function-ref name="rx" scoped="" ref="0x7ff8dec451b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7ff8dec45340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7ff8dec454d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7ff8dec45660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7ff8dec457f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7ff8dec45980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7ff8dec1b5b0" loc="79:../../../..//tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7ff8dec1b5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7ff8dec1b930"/>
        <function-ref name="getStartByte" scoped="" ref="0x7ff8dec1bac0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7ff8dec1bc50"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7ff8dec1bde0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7ff8dec42020"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7ff8dec421b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7ff8dec42340"/>
        <function-ref name="getStopBit" scoped="" ref="0x7ff8dec424d0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8dec42660"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7ff8dec427f0"/>
        <function-ref name="getData" scoped="" ref="0x7ff8dec42980"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7ff8dec42b10"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7ff8dec42ca0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7ff8dec41020"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7ff8dec411b0"/>
        <function-ref name="getIV" scoped="" ref="0x7ff8dec41340"/>
        <function-ref name="enableI2C" scoped="" ref="0x7ff8dec414d0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7ff8dec41660"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7ff8dec417f0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7ff8dec41980"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7ff8dec41b10"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7ff8dec41ca0"/>
        <function-ref name="isI2C" scoped="" ref="0x7ff8dec41e30"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7ff8dec1a020"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7ff8dec1a1b0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7ff8dec1a540"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7ff8dec1a6d0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7ff8dec1a860"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7ff8dec1a9f0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7ff8dec1ab80"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7ff8dec1ad10"/>
        <function-ref name="disableI2C" scoped="" ref="0x7ff8dec19020"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7ff8dec191b0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7ff8dec19340"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7ff8dec194d0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7ff8dec19660"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7ff8dec197f0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7ff8dec19980"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7ff8dec19b10"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7ff8dec19ca0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7ff8dec19e30"/>
        <function-ref name="setWordMode" scoped="" ref="0x7ff8dec18020"/>
        <function-ref name="setData" scoped="" ref="0x7ff8dec181b0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7ff8dec18340"/>
        <function-ref name="getClockSource" scoped="" ref="0x7ff8dec184d0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7ff8dec18660"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7ff8dec187f0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7ff8dec18980"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7ff8dec18b10"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7ff8dec17420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7ff8dec175b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7ff8dec17740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7ff8dec178d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7ff8dec17a60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7ff8dec17bf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7ff8dec17d80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7ff8dec16020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7ff8dec161b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7ff8dec16340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7ff8dec14670" loc="81:../../../..//tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7ff8dec14670"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8dec149f0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8dec14b80"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8dec14d10"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8dec13020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8dec131b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8dec13340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8dec134d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8dec13660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8dec137f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8dec13980"/>
        <function-ref name="set" scoped="" ref="0x7ff8dec13b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8dec13ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8dec13e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8dec12120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8dec122b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7ff8dec44750" loc="77:../../../..//tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7ff8dec44750"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8dec44ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7ff8dec16700" loc="80:../../../..//tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7ff8dec16700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8dec16a80"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8dec16c10"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8dec16da0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8dec15020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8dec151b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8dec15340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8dec154d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8dec15660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8dec157f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8dec15980"/>
        <function-ref name="set" scoped="" ref="0x7ff8dec15b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8dec15ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8dec15e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8dec14120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8dec142b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7ff8ddaaf2c0" loc="42:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8ddaaf2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7ff8ddaaf640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7ff8ddaaf7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7ff8ddaa9440" loc="46:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7ff8ddaa9440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8ddaa97c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7ff8ddaa1760" loc="51:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8ddaa1760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7ff8ddaa1ae0"/>
        <function-ref name="configure" scoped="" ref="0x7ff8ddaa1c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7ff8ddaa9a50" loc="48:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7ff8ddaa9a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7ff8ddaa9dd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7ff8ddaa7020"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7ff8ddaa71b0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7ff8ddaa7340"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7ff8ddaa74d0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7ff8ddaa7660"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7ff8ddaa77f0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7ff8ddaa7980"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8ddaa7b10"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7ff8ddaa7ca0"/>
        <function-ref name="getData" scoped="" ref="0x7ff8ddaa7e30"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7ff8ddaa6020"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7ff8ddaa61b0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7ff8ddaa6440"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7ff8ddaa65d0"/>
        <function-ref name="getIV" scoped="" ref="0x7ff8ddaa6760"/>
        <function-ref name="enableI2C" scoped="" ref="0x7ff8ddaa68f0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7ff8ddaa6a80"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7ff8ddaa6c10"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7ff8ddaa6da0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7ff8ddaa5020"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7ff8ddaa51b0"/>
        <function-ref name="isI2C" scoped="" ref="0x7ff8ddaa5340"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7ff8ddaa54d0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7ff8ddaa5660"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7ff8ddaa59f0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7ff8ddaa5b80"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7ff8ddaa5d10"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7ff8ddaa4020"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7ff8ddaa41b0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7ff8ddaa4340"/>
        <function-ref name="disableI2C" scoped="" ref="0x7ff8ddaa44d0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7ff8ddaa4660"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7ff8ddaa47f0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7ff8ddaa4980"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7ff8ddaa4b10"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7ff8ddaa4ca0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7ff8ddaa4e30"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7ff8ddaa3020"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7ff8ddaa31b0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7ff8ddaa3340"/>
        <function-ref name="setWordMode" scoped="" ref="0x7ff8ddaa34d0"/>
        <function-ref name="setData" scoped="" ref="0x7ff8ddaa3660"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7ff8ddaa37f0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7ff8ddaa3980"/>
        <function-ref name="getWordMode" scoped="" ref="0x7ff8ddaa3b10"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7ff8ddaa3ca0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7ff8ddaa3e30"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7ff8ddaa2020"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7ff8ddaa25b0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7ff8ddaa2740"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7ff8ddaa28d0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7ff8ddaa2a60"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7ff8ddaa2bf0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7ff8ddaa2d80"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7ff8ddaa1020"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7ff8ddaa11b0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7ff8ddaa1340"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7ff8ddaa14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7ff8ddaaac10" loc="45:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7ff8ddaaac10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7ff8ddaa9020"/>
        <function-ref name="txDone" scoped="" ref="0x7ff8ddaa91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8ddab0640" loc="41:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8ddab0640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8ddab09c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8ddab0b50"/>
        <function-ref name="request" scoped="" ref="0x7ff8ddab0ce0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8ddab0e70"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8ddaaf030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7ff8ddaae2b0" loc="44:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7ff8ddaae2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7ff8ddaae630"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7ff8ddaae7c0"/>
        <function-ref name="setUctl" scoped="" ref="0x7ff8ddaae950"/>
        <function-ref name="enableUart" scoped="" ref="0x7ff8ddaaeae0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7ff8ddaaec70"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7ff8ddaaee00"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7ff8ddaad020"/>
        <function-ref name="getUtctl" scoped="" ref="0x7ff8ddaad1b0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7ff8ddaad340"/>
        <function-ref name="resetUsart" scoped="" ref="0x7ff8ddaad4d0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7ff8ddaad660"/>
        <function-ref name="disableIntr" scoped="" ref="0x7ff8ddaad7f0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7ff8ddaad980"/>
        <function-ref name="getUbr" scoped="" ref="0x7ff8ddaadc10"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7ff8ddaadda0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7ff8ddaac020"/>
        <function-ref name="isUartRx" scoped="" ref="0x7ff8ddaac1b0"/>
        <function-ref name="isUart" scoped="" ref="0x7ff8ddaac340"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7ff8ddaac4d0"/>
        <function-ref name="isSpi" scoped="" ref="0x7ff8ddaac660"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7ff8ddaac7f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7ff8ddaac980"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7ff8ddaacb10"/>
        <function-ref name="enableIntr" scoped="" ref="0x7ff8ddaacca0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8ddaace30"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7ff8ddaab220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7ff8ddaab3b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7ff8ddaab540"/>
        <function-ref name="tx" scoped="" ref="0x7ff8ddaab6d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7ff8ddaab860"/>
        <function-ref name="disableUart" scoped="" ref="0x7ff8ddaab9f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7ff8ddaabb80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7ff8ddaabd10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7ff8ddaaa020"/>
        <function-ref name="rx" scoped="" ref="0x7ff8ddaaa1b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7ff8ddaaa340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7ff8ddaaa4d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7ff8ddaaa660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7ff8ddaaa7f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7ff8ddaaa980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7ff8ddaafa60" loc="43:../../../..//tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8ddaafa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7ff8ddaafde0"/>
        <function-ref name="userId" scoped="" ref="0x7ff8ddaae020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7ff8deb6a8a0" loc="42:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8deb6a8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7ff8deb6ac20"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7ff8deb6adb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7ff8deb67020" loc="45:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8deb67020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7ff8deb673a0"/>
        <function-ref name="configure" scoped="" ref="0x7ff8deb67530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7ff8deb6fa80" loc="39:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7ff8deb6fa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7ff8deb6fe00"/>
        <function-ref name="txDone" scoped="" ref="0x7ff8deb6c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8deb6b5c0" loc="41:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8deb6b5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8deb6b940"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8deb6bad0"/>
        <function-ref name="request" scoped="" ref="0x7ff8deb6bc60"/>
        <function-ref name="granted" scoped="" ref="0x7ff8deb6bdf0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8deb6a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7ff8deb6c9a0" loc="40:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7ff8deb6c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8deb6cd20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7ff8deb68130" loc="43:../../../..//tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8deb68130"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7ff8deb684b0"/>
        <function-ref name="userId" scoped="" ref="0x7ff8deb68640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7ff8deb524b0" loc="43:../../../..//tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8deb524b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7ff8deb52830"/>
        <function-ref name="userId" scoped="" ref="0x7ff8deb529c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7ff8deb655c0" loc="39:../../../..//tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7ff8deb655c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7ff8deb65960"/>
        <function-ref name="txDone" scoped="" ref="0x7ff8deb65af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7ff8deb53e70" loc="42:../../../..//tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7ff8deb53e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8deb52220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7ff8deb53020" loc="40:../../../..//tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7ff8deb53020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8deb533c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7ff8deb53690" loc="41:../../../..//tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7ff8deb53690"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7ff8deb53a10"/>
        <function-ref name="txDone" scoped="" ref="0x7ff8deb53ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7ff8dead9bf0" loc="92:../../../..//tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8dead9bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7ff8dead8020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7ff8dead81b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7ff8dead7930" loc="96:../../../..//tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dead7930"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7ff8dead7cd0"/>
        <function-ref name="configure" scoped="" ref="0x7ff8dead7e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7ff8dead8400" loc="93:../../../..//tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7ff8dead8400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8dead8780"/>
        <function-ref name="requested" scoped="" ref="0x7ff8dead8910"/>
        <function-ref name="granted" scoped="" ref="0x7ff8dead8aa0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8dead8c30"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7ff8dead8dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8deadae60" loc="91:../../../..//tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8deadae60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8dead9230"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8dead93c0"/>
        <function-ref name="request" scoped="" ref="0x7ff8dead9550"/>
        <function-ref name="granted" scoped="" ref="0x7ff8dead96e0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8dead9870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7ff8dead7060" loc="94:../../../..//tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8dead7060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7ff8dead73e0"/>
        <function-ref name="userId" scoped="" ref="0x7ff8dead7570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8dda37140" loc="44:../../../..//tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8dda37140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8dda374c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7ff8dda37750" loc="45:../../../..//tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7ff8dda37750"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7ff8dda37ad0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7ff8dda37c60"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7ff8dda37df0"/>
        <function-ref name="dequeue" scoped="" ref="0x7ff8dda36020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7ff8dda31850" loc="55:../../../..//tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8dda31850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7ff8dda31bf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7ff8dda31d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7ff8dda2f590" loc="60:../../../..//tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dda2f590"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7ff8dda2f930"/>
        <function-ref name="configure" scoped="" ref="0x7ff8dda2fac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7ff8dda2fd50" loc="61:../../../..//tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7ff8dda2fd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7ff8dda2e100"/>
        <function-ref name="isEmpty" scoped="" ref="0x7ff8dda2e290"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7ff8dda2e420"/>
        <function-ref name="dequeue" scoped="" ref="0x7ff8dda2e5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7ff8dda30020" loc="56:../../../..//tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7ff8dda30020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8dda303a0"/>
        <function-ref name="requested" scoped="" ref="0x7ff8dda30530"/>
        <function-ref name="granted" scoped="" ref="0x7ff8dda306c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8dda30850"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7ff8dda309e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7ff8dda2e800" loc="62:../../../..//tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7ff8dda2e800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ff8dda2eb80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ff8dda2ed10"/>
        <function-ref name="led1On" scoped="" ref="0x7ff8dda2d020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ff8dda2d1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ff8dda2d340"/>
        <function-ref name="get" scoped="" ref="0x7ff8dda2d4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7ff8dda2d660"/>
        <function-ref name="led0On" scoped="" ref="0x7ff8dda2dca0"/>
        <function-ref name="set" scoped="" ref="0x7ff8dda2d980"/>
        <function-ref name="led2On" scoped="" ref="0x7ff8dda2d7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7ff8dda2db10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8dda33970" loc="54:../../../..//tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8dda33970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8dda33d10"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8dda31020"/>
        <function-ref name="request" scoped="" ref="0x7ff8dda311b0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8dda31340"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8dda314d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7ff8dda30c30" loc="57:../../../..//tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8dda30c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7ff8dda2f020"/>
        <function-ref name="userId" scoped="" ref="0x7ff8dda2f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7ff8dda2c020" loc="75:../../../..//tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7ff8dda2c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8dda2c3a0"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8dda2c530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7ff8deacf880" loc="4:../../../..//tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7ff8deacf880"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7ff8deacfc00"/>
        <function-ref name="getStartByte" scoped="" ref="0x7ff8deacfd90"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7ff8deacc020"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7ff8deacc1b0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7ff8deacc340"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7ff8deacc4d0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7ff8deacc660"/>
        <function-ref name="getStopBit" scoped="" ref="0x7ff8deacc7f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8deacc980"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7ff8deaccb10"/>
        <function-ref name="getData" scoped="" ref="0x7ff8deaccca0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7ff8deacce30"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7ff8deacb020"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7ff8deacb2b0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7ff8deacb440"/>
        <function-ref name="getIV" scoped="" ref="0x7ff8deacb5d0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7ff8deacb760"/>
        <function-ref name="setStartBit" scoped="" ref="0x7ff8deacb8f0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7ff8deacba80"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7ff8deacbc10"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7ff8deacbda0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7ff8deaca020"/>
        <function-ref name="isI2C" scoped="" ref="0x7ff8deaca1b0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7ff8deaca340"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7ff8deaca4d0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7ff8deaca860"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7ff8deaca9f0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7ff8deacab80"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7ff8deacad10"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7ff8deac9020"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7ff8deac91b0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7ff8deac9340"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7ff8deac94d0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7ff8deac9660"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7ff8deac97f0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7ff8deac9980"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7ff8deac9b10"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7ff8deac9ca0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7ff8deac9e30"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7ff8deac8020"/>
        <function-ref name="getStartBit" scoped="" ref="0x7ff8deac81b0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7ff8deac8340"/>
        <function-ref name="setData" scoped="" ref="0x7ff8deac84d0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7ff8deac8660"/>
        <function-ref name="getClockSource" scoped="" ref="0x7ff8deac87f0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7ff8deac8980"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7ff8deac8b10"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7ff8deac8ca0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7ff8deac8e30"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7ff8deac7420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7ff8deac75b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7ff8deac7740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7ff8deac78d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7ff8deac7a60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7ff8deac7bf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7ff8deac7d80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7ff8deac6020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7ff8deac61b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7ff8deac6340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7ff8deabc250" loc="41:../../../..//tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7ff8deabc250"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7ff8deabc5d0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7ff8deabc760"/>
        <function-ref name="setUctl" scoped="" ref="0x7ff8deabc8f0"/>
        <function-ref name="enableUart" scoped="" ref="0x7ff8deabca80"/>
        <function-ref name="setUrctl" scoped="" ref="0x7ff8deabcc10"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7ff8deabcda0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7ff8deabb020"/>
        <function-ref name="getUtctl" scoped="" ref="0x7ff8deabb1b0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7ff8deabb340"/>
        <function-ref name="resetUsart" scoped="" ref="0x7ff8deabb4d0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7ff8deabb660"/>
        <function-ref name="disableIntr" scoped="" ref="0x7ff8deabb7f0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7ff8deabb980"/>
        <function-ref name="getUbr" scoped="" ref="0x7ff8deabbc10"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7ff8deabbda0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7ff8deaba020"/>
        <function-ref name="isUartRx" scoped="" ref="0x7ff8deaba1b0"/>
        <function-ref name="isUart" scoped="" ref="0x7ff8deaba340"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7ff8deaba4d0"/>
        <function-ref name="isSpi" scoped="" ref="0x7ff8deaba660"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7ff8deaba7f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7ff8deaba980"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7ff8deabab10"/>
        <function-ref name="enableIntr" scoped="" ref="0x7ff8deabaca0"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8deabae30"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7ff8deab9220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7ff8deab93b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7ff8deab9540"/>
        <function-ref name="tx" scoped="" ref="0x7ff8deab96d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7ff8deab9860"/>
        <function-ref name="disableUart" scoped="" ref="0x7ff8deab99f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7ff8deab9b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7ff8deab9d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7ff8deab8020"/>
        <function-ref name="rx" scoped="" ref="0x7ff8deab81b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7ff8deab8340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7ff8deab84d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7ff8deab8660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7ff8deab87f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7ff8deab8980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7ff8deab6cb0" loc="43:../../../..//tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7ff8deab6cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8deab50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8deab5230"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8deab53c0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8deab5550"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8deab56e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8deab5870"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8deab5a00"/>
        <function-ref name="get" scoped="" ref="0x7ff8deab5b90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8deab5d20"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8deab4020"/>
        <function-ref name="set" scoped="" ref="0x7ff8deab41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8deab4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8deab44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8deab4760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8deab48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7ff8deac3430" loc="39:../../../..//tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7ff8deac3430"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7ff8deac37b0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7ff8deac3940"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7ff8deac3ad0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7ff8deac3c60"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7ff8deac3df0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7ff8deac2020"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7ff8deac21b0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7ff8deac2340"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8deac24d0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7ff8deac2660"/>
        <function-ref name="getData" scoped="" ref="0x7ff8deac27f0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7ff8deac2980"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7ff8deac2b10"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7ff8deac2da0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7ff8deac1020"/>
        <function-ref name="getIV" scoped="" ref="0x7ff8deac11b0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7ff8deac1340"/>
        <function-ref name="setStartBit" scoped="" ref="0x7ff8deac14d0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7ff8deac1660"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7ff8deac17f0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7ff8deac1980"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7ff8deac1b10"/>
        <function-ref name="isI2C" scoped="" ref="0x7ff8deac1ca0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7ff8deac1e30"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7ff8deac0020"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7ff8deac03b0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7ff8deac0540"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7ff8deac06d0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7ff8deac0860"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7ff8deac09f0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7ff8deac0b80"/>
        <function-ref name="disableI2C" scoped="" ref="0x7ff8deac0d10"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7ff8deabf020"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7ff8deabf1b0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7ff8deabf340"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7ff8deabf4d0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7ff8deabf660"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7ff8deabf7f0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7ff8deabf980"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7ff8deabfb10"/>
        <function-ref name="getStartBit" scoped="" ref="0x7ff8deabfca0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7ff8deabfe30"/>
        <function-ref name="setData" scoped="" ref="0x7ff8deabe020"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7ff8deabe1b0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7ff8deabe340"/>
        <function-ref name="getWordMode" scoped="" ref="0x7ff8deabe4d0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7ff8deabe660"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7ff8deabe7f0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7ff8deabe980"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7ff8deabd020"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7ff8deabd1b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7ff8deabd340"/>
        <function-ref name="setStopBit" scoped="" ref="0x7ff8deabd4d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7ff8deabd660"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7ff8deabd7f0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7ff8deabd980"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7ff8deabdb10"/>
        <function-ref name="setStartByte" scoped="" ref="0x7ff8deabdca0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7ff8deabde30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7ff8deab8d40" loc="42:../../../..//tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7ff8deab8d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8deab70e0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8deab7270"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8deab7400"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8deab7590"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8deab7720"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8deab78b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8deab7a40"/>
        <function-ref name="get" scoped="" ref="0x7ff8deab7bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8deab7d60"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8deab6020"/>
        <function-ref name="set" scoped="" ref="0x7ff8deab61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8deab6340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8deab64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8deab6760"/>
        <function-ref name="clr" scoped="" ref="0x7ff8deab68f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7ff8de9a1c60" loc="69:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8de9a1c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9a0210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9a03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7ff8de9acda0" loc="47:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7ff8de9acda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9ab180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7ff8de9a5b50" loc="63:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8de9a5b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9a4020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9a41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7ff8de99f670" loc="72:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de99f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de99f9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de99fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7ff8de998e50" loc="86:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7ff8de998e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de997210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9973a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7ff8de99fe50" loc="73:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7ff8de99fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de99e210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de99e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7ff8de98b2f0" loc="108:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de98b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de98b670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de98b800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7ff8de98e2f0" loc="104:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7ff8de98e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de98e670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de98e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7ff8de9aa120" loc="50:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de9aa120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9aa4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7ff8de993670" loc="93:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7ff8de993670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9939f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de993b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7ff8de98f2f0" loc="102:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de98f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de98f670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de98f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7ff8de9a4c60" loc="65:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7ff8de9a4c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9a3020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9a31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7ff8de9a3c60" loc="67:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de9a3c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9a1020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9a11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7ff8de999670" loc="83:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7ff8de999670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9999f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de999b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7ff8de99ce50" loc="79:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7ff8de99ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de99a210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de99a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7ff8de99e670" loc="74:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7ff8de99e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de99e9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de99eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7ff8de9ad760" loc="42:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de9ad760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7ff8de9adae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7ff8de9adc70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7ff8de9ade00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7ff8de9a9aa0" loc="54:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de9a9aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9a9e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7ff8de9a7120" loc="55:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7ff8de9a7120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9a75a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7ff8de992a70" loc="95:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7ff8de992a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de992df0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de991020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7ff8de9a7870" loc="56:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7ff8de9a7870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9a7bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7ff8de98fad0" loc="103:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de98fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de98fe50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de98e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7ff8de9aadc0" loc="52:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8de9aadc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9a9180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7ff8de994e50" loc="92:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7ff8de994e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de993210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9933a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7ff8de9a3480" loc="66:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7ff8de9a3480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9a3800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9a3990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7ff8de9a4480" loc="64:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de9a4480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9a4800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9a4990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7ff8de9ac750" loc="46:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7ff8de9ac750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9acad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7ff8de996e50" loc="90:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7ff8de996e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de994210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9943a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7ff8de997670" loc="87:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7ff8de997670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9979f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de997b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7ff8de994670" loc="91:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7ff8de994670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9949f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de994b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7ff8de98cad0" loc="107:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de98cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de98ce50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de98b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7ff8de98ead0" loc="105:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7ff8de98ead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de98ee50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de98c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7ff8de99a670" loc="80:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7ff8de99a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de99a9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de99ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7ff8de997e50" loc="88:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7ff8de997e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de996210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9963a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7ff8de990ad0" loc="101:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7ff8de990ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de990e50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de98f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7ff8de99d670" loc="76:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7ff8de99d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de99d9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de99db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7ff8de98bad0" loc="111:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de98bad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de98be50"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de98a020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de98a1b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de98a340"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de98a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7ff8de9ac100" loc="45:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7ff8de9ac100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9ac480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7ff8de9a5370" loc="62:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7ff8de9a5370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9a56f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9a5880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7ff8de9a1480" loc="68:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7ff8de9a1480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9a1800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9a1990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7ff8de999e50" loc="84:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7ff8de999e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de998210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9983a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7ff8de99ee50" loc="75:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7ff8de99ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de99d210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de99d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7ff8de998670" loc="85:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7ff8de998670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9989f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de998b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7ff8de9a0670" loc="70:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7ff8de9a0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9a09f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9a0b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7ff8de9ab450" loc="48:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7ff8de9ab450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9ab7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7ff8de9a0e50" loc="71:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de9a0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de99f210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de99f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8de9aea80" loc="41:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8de9aea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de9aee00"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de9ad020"/>
        <function-ref name="request" scoped="" ref="0x7ff8de9ad1b0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de9ad340"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de9ad4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7ff8de9a6020" loc="57:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de9a6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9a63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7ff8de9a6cc0" loc="59:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7ff8de9a6cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9a50a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7ff8de9902f0" loc="100:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7ff8de9902f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de990670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de990800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7ff8de991ad0" loc="99:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7ff8de991ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de991e50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de990020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7ff8de9a9450" loc="53:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de9a9450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9a97d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7ff8de9912f0" loc="96:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7ff8de9912f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de991670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de991800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7ff8de98c2f0" loc="106:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7ff8de98c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de98c670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de98c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7ff8de99ae50" loc="81:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7ff8de99ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de999210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9993a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7ff8de996670" loc="89:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7ff8de996670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9969f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de996b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7ff8de9abaa0" loc="49:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7ff8de9abaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9abe20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7ff8de9aa770" loc="51:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7ff8de9aa770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9aaaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7ff8de99de50" loc="77:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7ff8de99de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de99c210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de99c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7ff8de9a6670" loc="58:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7ff8de9a6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9a69f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7ff8de99c670" loc="78:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7ff8de99c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de99c9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de99cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7ff8de993e50" loc="94:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7ff8de993e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de992610"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9927a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7ff8de98a7a0" loc="112:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de98a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de98ab20"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de98acb0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de98ae40"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de989020"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de9891b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7ff8de975c60" loc="69:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8de975c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de974210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9743a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7ff8de980da0" loc="47:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7ff8de980da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97e180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7ff8de978b50" loc="63:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8de978b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de977020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9771b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7ff8de973670" loc="72:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de973670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9739f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de973b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7ff8de96be50" loc="86:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7ff8de96be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de96a210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de96a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7ff8de973e50" loc="73:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7ff8de973e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de971210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9713a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7ff8de95f2f0" loc="108:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de95f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de95f670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de95f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7ff8de9612f0" loc="104:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7ff8de9612f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de961670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de961800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7ff8de97d120" loc="50:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de97d120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97d4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7ff8de967670" loc="93:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7ff8de967670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9679f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de967b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7ff8de9622f0" loc="102:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de9622f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de962670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de962800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7ff8de977c60" loc="65:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7ff8de977c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de976020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9761b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7ff8de976c60" loc="67:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de976c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de975020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9751b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7ff8de96d670" loc="83:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7ff8de96d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de96d9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de96db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7ff8de96fe50" loc="79:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7ff8de96fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de96e210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de96e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7ff8de971670" loc="74:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7ff8de971670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9719f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de971b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7ff8de981760" loc="42:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de981760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7ff8de981ae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7ff8de981c70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7ff8de981e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7ff8de97caa0" loc="54:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de97caa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97ce20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7ff8de97b120" loc="55:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7ff8de97b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97b5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7ff8de966a70" loc="95:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7ff8de966a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de966df0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de965020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7ff8de97b870" loc="56:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7ff8de97b870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97bbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7ff8de962ad0" loc="103:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de962ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de962e50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de961020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7ff8de97ddc0" loc="52:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8de97ddc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97c180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7ff8de968e50" loc="92:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7ff8de968e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de967210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9673a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7ff8de976480" loc="66:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7ff8de976480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de976800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de976990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7ff8de977480" loc="64:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de977480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de977800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de977990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7ff8de980750" loc="46:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7ff8de980750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de980ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7ff8de969e50" loc="90:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7ff8de969e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de968210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9683a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7ff8de96a670" loc="87:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7ff8de96a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de96a9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de96ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7ff8de968670" loc="91:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7ff8de968670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9689f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de968b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7ff8de960ad0" loc="107:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de960ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de960e50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de95f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7ff8de961ad0" loc="105:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7ff8de961ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de961e50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de960020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7ff8de96e670" loc="80:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7ff8de96e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de96e9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de96eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7ff8de96ae50" loc="88:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7ff8de96ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de969210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9693a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7ff8de963ad0" loc="101:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7ff8de963ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de963e50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de962020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7ff8de970670" loc="76:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7ff8de970670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9709f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de970b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7ff8de95fad0" loc="111:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de95fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de95fe50"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de95d020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de95d1b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de95d340"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de95d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7ff8de980100" loc="45:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7ff8de980100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de980480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7ff8de978370" loc="62:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7ff8de978370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9786f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de978880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7ff8de975480" loc="68:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7ff8de975480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de975800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de975990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7ff8de96de50" loc="84:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7ff8de96de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de96b210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de96b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7ff8de971e50" loc="75:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7ff8de971e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de970210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9703a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7ff8de96b670" loc="85:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7ff8de96b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de96b9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de96bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7ff8de974670" loc="70:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7ff8de974670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9749f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de974b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7ff8de97e450" loc="48:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7ff8de97e450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97e7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7ff8de974e50" loc="71:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de974e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de973210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9733a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8de9829e0" loc="41:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8de9829e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de982d60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de981020"/>
        <function-ref name="request" scoped="" ref="0x7ff8de9811b0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de981340"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de9814d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7ff8de97a020" loc="57:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de97a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7ff8de97acc0" loc="59:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7ff8de97acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de9780a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7ff8de9632f0" loc="100:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7ff8de9632f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de963670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de963800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7ff8de965ad0" loc="99:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7ff8de965ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de965e50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de963020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7ff8de97c450" loc="53:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de97c450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97c7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7ff8de9652f0" loc="96:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7ff8de9652f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de965670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de965800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7ff8de9602f0" loc="106:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7ff8de9602f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de960670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de960800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7ff8de96ee50" loc="81:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7ff8de96ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de96d210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de96d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7ff8de969670" loc="89:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7ff8de969670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9699f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de969b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7ff8de97eaa0" loc="49:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7ff8de97eaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97ee20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7ff8de97d770" loc="51:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7ff8de97d770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97daf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7ff8de970e50" loc="77:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7ff8de970e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de96f210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de96f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7ff8de97a670" loc="58:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7ff8de97a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de97a9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7ff8de96f670" loc="78:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7ff8de96f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de96f9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de96fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7ff8de967e50" loc="94:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7ff8de967e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de966610"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9667a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7ff8de95d7a0" loc="112:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de95d7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de95db20"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de95dcb0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de95de40"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de95c020"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de95c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7ff8de955b30" loc="54:../../../..//tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7ff8de955b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7ff8de952020"/>
        <function-ref name="changed" scoped="" ref="0x7ff8de9521b0"/>
        <function-ref name="amGroup" scoped="" ref="0x7ff8de952340"/>
        <function-ref name="setAddress" scoped="" ref="0x7ff8de9524d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7ff8de954d30" loc="13:../../../..//tos/chips/ds2411/LocalIeeeEui64C.nc">
      <component-ref qname="LocalIeeeEui64C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7ff8de954d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7ff8de93e0e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7ff8de93a310" loc="5:../../../..//tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7ff8de93a310"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7ff8de93a690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadId48" ref="0x7ff8de937880" loc="8:../../../..//tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7ff8de937880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de937c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7ff8de92c020" loc="8:../../../..//tos/chips/ds2411/Ds2411C.nc">
      <component-ref qname="Ds2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7ff8de92c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de92c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OneWire" ref="0x7ff8de922bd0" loc="14:../../../..//tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7ff8de922bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de926020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9261b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerControl" ref="0x7ff8de926530" loc="15:../../../..//tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerControl" scoped="" ref="0x7ff8de926530"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7ff8de9268b0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de926a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7ff8de927140" loc="11:../../../..//tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7ff8de927140"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de9274c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7ff8de92bc50" loc="8:../../../..//tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7ff8de92bc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de912020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de9121b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7ff8de912540" loc="11:../../../..//tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7ff8de912540"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de9128c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de912a50"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de912be0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de912d70"/>
        <function-ref name="get" scoped="" ref="0x7ff8de911020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de9111b0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de911340"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de9114d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7ff8de909950" loc="15:../../../..//tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7ff8de909950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732df0"/>
            <typename><typedef-ref name="TMicro" ref="0x7ff8df731200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7ff8de90c780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7ff8de90e150" loc="11:../../../..//tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7ff8de90e150"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de90e4d0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de90e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7ff8de90e9f0" loc="14:../../../..//tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7ff8de90e9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de90ed70"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de90d020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de90d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de90d340"/>
        <function-ref name="get" scoped="" ref="0x7ff8de90d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de90d660"/>
        <function-ref name="set" scoped="" ref="0x7ff8de90d7f0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de90d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7ff8de910ca0" loc="41:../../../..//tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7ff8de910ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732df0"/>
            <typename><typedef-ref name="TMicro" ref="0x7ff8df731200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7ff8de8e8ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7ff8de8e6a90" loc="54:../../../..//tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7ff8de8e6a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732df0"/>
            <typename><typedef-ref name="TMicro" ref="0x7ff8df731200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7ff8de8e58d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7ff8de8d6020" loc="55:../../../..//tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7ff8de8d6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732df0"/>
            <typename><typedef-ref name="TMicro" ref="0x7ff8df731200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de8d6e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8de8d4800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8de8d4340"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8de8d4cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430CounterMicro" ref="0x7ff8de8d0530" loc="46:../../../..//tos/chips/msp430/timer/Msp430CounterMicroC.nc">
      <component-ref qname="Msp430CounterMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7ff8de8d0530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732df0"/>
            <typename><typedef-ref name="TMicro" ref="0x7ff8df731200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de8cf3d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8de8cfd50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8de8cf890"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8de8ce260"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7ff8de8c9020" loc="45:../../../..//tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8de8c9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8de8c93a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8de8c9530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8de8c96c0"/>
        <function-ref name="get" scoped="" ref="0x7ff8de8c9850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8de8c99e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8de8c9b70"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8de8c9d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8de8c8020"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8de8c81b0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8de8c8340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8de8c84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7ff8de8cce50" loc="44:../../../..//tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7ff8de8cce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732df0"/>
            <typename><typedef-ref name="TMicro" ref="0x7ff8df731200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de8cbca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8de8ca670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8de8ca1b0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8de8cab30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Gpio" ref="0x7ff8de913590" loc="3:../../../..//tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <component-ref qname="HplDs2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Gpio" scoped="" ref="0x7ff8de913590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de913910"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de913aa0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de913c30"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de913dc0"/>
        <function-ref name="get" scoped="" ref="0x7ff8de8c3020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de8c31b0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de8c3340"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de8c34d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7ff8de8c1c50" loc="44:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7ff8de8c1c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de8c0020"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de8c01b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8de8c0340"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de8c04d0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de8c0660"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8de8c07f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de8c0980"/>
        <function-ref name="get" scoped="" ref="0x7ff8de8c0b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8de8c0ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8de8c0e30"/>
        <function-ref name="set" scoped="" ref="0x7ff8de8bf020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8de8bf1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8de8bf340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8de8bf5d0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de8bf760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7ff8de8c29e0" loc="43:../../../..//tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7ff8de8c29e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de8c2d60"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de8c1020"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de8c11b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de8c1340"/>
        <function-ref name="get" scoped="" ref="0x7ff8de8c14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de8c1660"/>
        <function-ref name="set" scoped="" ref="0x7ff8de8c17f0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de8c1980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7ff8de8c4a20" loc="14:../../../..//tos/chips/ds2411/Ds2411PowerControlC.nc">
      <component-ref qname="Ds2411PowerControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7ff8de8c4a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7ff8de8c4da0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de8b9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7ff8de8aacb0" loc="46:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8de8aacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7ff8de8a90a0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7ff8de8a9230"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7ff8de8a93c0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7ff8de8a9550"/>
        <function-ref name="setCca" scoped="" ref="0x7ff8de8a96e0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7ff8de8a9870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7ff8de8a6990" loc="47:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7ff8de8a6990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7ff8de8a6d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Transmit" ref="0x7ff8de8aa020" loc="45:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7ff8de8aa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de8aa3a0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de8aa530"/>
        <function-ref name="modify" scoped="" ref="0x7ff8de8aa6c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de8aa850"/>
        <function-ref name="resend" scoped="" ref="0x7ff8de8aa9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7ff8de8ad6c0" loc="44:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7ff8de8ad6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7ff8de8ada40"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de8adbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7ff8de8a8150" loc="48:../../../..//tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7ff8de8a8150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7ff8de8a84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7ff8de89c970" loc="51:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8de89c970"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7ff8de89ccf0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7ff8de89ce80"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7ff8de89b030"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7ff8de89b1c0"/>
        <function-ref name="setCca" scoped="" ref="0x7ff8de89b350"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7ff8de89b4e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7ff8de894950" loc="58:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7ff8de894950"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7ff8de892020"/>
        <function-ref name="clear" scoped="" ref="0x7ff8de892750"/>
        <function-ref name="isValid" scoped="" ref="0x7ff8de893780"/>
        <function-ref name="set" scoped="" ref="0x7ff8de892e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7ff8de87b020" loc="78:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de87b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de87b3a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de87b530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7ff8de87b890" loc="79:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7ff8de87b890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de87bc10"/>
        <function-ref name="write" scoped="" ref="0x7ff8de87bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7ff8de89b900" loc="52:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7ff8de89b900"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7ff8de89bc80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXONCCA" ref="0x7ff8de87e530" loc="72:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de87e530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de87e8b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CaptureSFD" ref="0x7ff8de88f880" loc="60:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7ff8de88f880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7ff8de88fc00"/>
        <function-ref name="disable" scoped="" ref="0x7ff8de88fd90"/>
        <function-ref name="captured" scoped="" ref="0x7ff8de88e020"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7ff8de88e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BackoffTimer" ref="0x7ff8de89aae0" loc="55:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BackoffTimer" scoped="" ref="0x7ff8de89aae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de896390"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de898360"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8de898ce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de898820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8de896850"/>
        <function-ref name="start" scoped="" ref="0x7ff8de899970"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de899e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7ff8de896d00" loc="56:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de896d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7ff8de8950a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7ff8de895230"/>
        <function-ref name="getRssi" scoped="" ref="0x7ff8de8953c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7ff8de895550"/>
        <function-ref name="getPower" scoped="" ref="0x7ff8de8956e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7ff8de895870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO_RAM" ref="0x7ff8de880550" loc="68:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de880550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de8808d0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de880a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7ff8de880e00" loc="69:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de880e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de87f1c0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de87f350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Receive" ref="0x7ff8de874d40" loc="83:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7ff8de874d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de8770e0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7ff8de877270"/>
        <function-ref name="sfd" scoped="" ref="0x7ff8de877400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7ff8de89dbc0" loc="50:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7ff8de89dbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de89c020"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de89c1b0"/>
        <function-ref name="modify" scoped="" ref="0x7ff8de89c340"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de89c4d0"/>
        <function-ref name="resend" scoped="" ref="0x7ff8de89c660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ChipSpiResource" ref="0x7ff8de882d10" loc="66:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de882d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7ff8de8810e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7ff8de881270"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7ff8de881400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHTX" ref="0x7ff8de87ec60" loc="73:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de87ec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de87d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7ff8de888820" loc="62:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7ff8de888820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de888ba0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de888d30"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de886020"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de8861b0"/>
        <function-ref name="get" scoped="" ref="0x7ff8de886340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de8864d0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de886660"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de8867f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8de89fc60" loc="48:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8de89fc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de89d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7ff8de895bb0" loc="57:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de895bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de894020"/>
        <function-ref name="getHeader" scoped="" ref="0x7ff8de8941b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7ff8de894340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7ff8de889be0" loc="59:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7ff8de889be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de88f020"/>
        <function-ref name="isSet" scoped="" ref="0x7ff8de88f1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de88f340"/>
        <function-ref name="set" scoped="" ref="0x7ff8de88f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7ff8de87d3e0" loc="74:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de87d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de87d960"/>
        <function-ref name="write" scoped="" ref="0x7ff8de87daf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7ff8de882020" loc="65:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7ff8de882020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de8823a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de882530"/>
        <function-ref name="request" scoped="" ref="0x7ff8de8826c0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de882850"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de8829e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CCA" ref="0x7ff8de88e500" loc="61:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7ff8de88e500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de88e980"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de88eb10"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de88eca0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de88ee30"/>
        <function-ref name="get" scoped="" ref="0x7ff8de888020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de8881b0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de888340"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de8884d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7ff8de87a130" loc="80:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7ff8de87a130"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de87a4b0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de87a640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXNONCE" ref="0x7ff8de87a9c0" loc="81:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de87a9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de87ad40"/>
        <function-ref name="write" scoped="" ref="0x7ff8de878020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7ff8de87f6d0" loc="70:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7ff8de87f6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de87fa50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFD" ref="0x7ff8de886b40" loc="63:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7ff8de886b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de883020"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de8831b0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de883340"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de8834d0"/>
        <function-ref name="get" scoped="" ref="0x7ff8de883660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de8837f0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de883980"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de883b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7ff8de8776c0" loc="84:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7ff8de8776c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ff8de877a40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ff8de877bd0"/>
        <function-ref name="led1On" scoped="" ref="0x7ff8de877d60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ff8de876020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ff8de8761b0"/>
        <function-ref name="get" scoped="" ref="0x7ff8de876340"/>
        <function-ref name="led1Off" scoped="" ref="0x7ff8de8764d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7ff8de876b10"/>
        <function-ref name="set" scoped="" ref="0x7ff8de876660"/>
        <function-ref name="led0On" scoped="" ref="0x7ff8de8767f0"/>
        <function-ref name="led2On" scoped="" ref="0x7ff8de876980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7ff8de87c5e0" loc="77:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de87c5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de87c960"/>
        <function-ref name="write" scoped="" ref="0x7ff8de87caf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7ff8de89d320" loc="49:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7ff8de89d320"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7ff8de89d6a0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de89d830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO" ref="0x7ff8de881780" loc="67:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de881780"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de881b00"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de881c90"/>
        <function-ref name="write" scoped="" ref="0x7ff8de881e20"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de880020"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de8801b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXON" ref="0x7ff8de87fde0" loc="71:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7ff8de87fde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de87e180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXENC" ref="0x7ff8de87de80" loc="76:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7ff8de87de80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de87c220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7ff8de89a0f0" loc="53:../../../..//tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7ff8de89a0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7ff8de89a470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7ff8de7dac60" loc="69:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8de7dac60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d9210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d93a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7ff8de7e4020" loc="47:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7ff8de7e4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7ff8de7ddc70" loc="63:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8de7ddc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7dc020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7dc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7ff8de7d8670" loc="72:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de7d8670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d89f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d8b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7ff8de7d0e50" loc="86:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7ff8de7d0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7cf210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7cf3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7ff8de7d8e50" loc="73:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7ff8de7d8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d6210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7ff8de7c42f0" loc="108:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de7c42f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7c4670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c4800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7ff8de7c62f0" loc="104:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7ff8de7c62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7c6670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c6800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7ff8de7e2370" loc="50:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de7e2370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e26f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7ff8de7cc670" loc="93:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7ff8de7cc670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7cc9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7ccb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7ff8de7c72f0" loc="102:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de7c72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7c7670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c7800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7ff8de7dcc60" loc="65:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7ff8de7dcc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7db020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7db1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7ff8de7dbc60" loc="67:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de7dbc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7da020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7da1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7ff8de7d2670" loc="83:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7ff8de7d2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d29f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d2b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7ff8de7d4e50" loc="79:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7ff8de7d4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d3210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7ff8de7d6670" loc="74:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7ff8de7d6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d69f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d6b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7ff8de7e68f0" loc="42:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de7e68f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7ff8de7e6c70"/>
        <function-ref name="abortRelease" scoped="" ref="0x7ff8de7e6e00"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7ff8de7e5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7ff8de7e1d00" loc="54:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de7e1d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e00a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7ff8de7e0370" loc="55:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7ff8de7e0370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e07f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7ff8de7cba70" loc="95:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7ff8de7cba70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7cbdf0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7ca020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7ff8de7e0ac0" loc="56:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7ff8de7e0ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e0e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7ff8de7c7ad0" loc="103:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de7c7ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7c7e50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7ff8de7e1060" loc="52:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8de7e1060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e13e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7ff8de7cde50" loc="92:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7ff8de7cde50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7cc210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7cc3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7ff8de7db480" loc="66:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7ff8de7db480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7db800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7db990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7ff8de7dc480" loc="64:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de7dc480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7dc800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7dc990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7ff8de7e5940" loc="46:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7ff8de7e5940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e5cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7ff8de7cee50" loc="90:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7ff8de7cee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7cd210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7cd3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7ff8de7cf670" loc="87:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7ff8de7cf670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7cf9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7cfb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7ff8de7cd670" loc="91:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7ff8de7cd670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7cd9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7cdb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7ff8de7c5ad0" loc="107:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de7c5ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7c5e50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7ff8de7c6ad0" loc="105:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7ff8de7c6ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7c6e50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7ff8de7d3670" loc="80:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7ff8de7d3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d39f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d3b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7ff8de7cfe50" loc="88:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7ff8de7cfe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7ce210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7ce3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7ff8de7c8ad0" loc="101:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7ff8de7c8ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7c8e50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7ff8de7d5670" loc="76:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7ff8de7d5670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d59f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d5b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7ff8de7c4ad0" loc="111:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de7c4ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de7c4e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de7c2020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c21b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de7c2340"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de7c24d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7ff8de7e52f0" loc="45:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7ff8de7e52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e5670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7ff8de7dd490" loc="62:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7ff8de7dd490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7dd810"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7dd9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7ff8de7da480" loc="68:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7ff8de7da480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7da800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7da990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7ff8de7d2e50" loc="84:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7ff8de7d2e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d0210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7ff8de7d6e50" loc="75:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7ff8de7d6e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d5210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7ff8de7d0670" loc="85:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7ff8de7d0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d09f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d0b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7ff8de7d9670" loc="70:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7ff8de7d9670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d99f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d9b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7ff8de7e4670" loc="48:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7ff8de7e4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e49f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7ff8de7d9e50" loc="71:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de7d9e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d8210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8de7e7c30" loc="41:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8de7e7c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de7e6020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de7e61b0"/>
        <function-ref name="request" scoped="" ref="0x7ff8de7e6340"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de7e64d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de7e6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7ff8de7df160" loc="57:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de7df160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7df4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7ff8de7dfe00" loc="59:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7ff8de7dfe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7dd1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7ff8de7c82f0" loc="100:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7ff8de7c82f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7c8670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c8800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7ff8de7caad0" loc="99:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7ff8de7caad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7cae50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7ff8de7e16b0" loc="53:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de7e16b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e1a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7ff8de7ca2f0" loc="96:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7ff8de7ca2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7ca670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7ca800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7ff8de7c52f0" loc="106:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7ff8de7c52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7c5670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c5800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7ff8de7d3e50" loc="81:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7ff8de7d3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d2210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7ff8de7ce670" loc="89:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7ff8de7ce670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7ce9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7ceb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7ff8de7e4cc0" loc="49:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7ff8de7e4cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e20a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7ff8de7e29c0" loc="51:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7ff8de7e29c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7e2d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7ff8de7d5e50" loc="77:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7ff8de7d5e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d4210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7ff8de7df7b0" loc="58:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7ff8de7df7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7dfb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7ff8de7d4670" loc="78:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7ff8de7d4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7d49f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7d4b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7ff8de7cce50" loc="94:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7ff8de7cce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7cb610"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7cb7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7ff8de7c27a0" loc="112:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de7c27a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de7c2b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de7c2cb0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7c2e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de7c1020"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de7c11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7ff8de7b6df0" loc="42:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7ff8de7b6df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de7b31c0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7ff8de7b3350"/>
        <function-ref name="sfd" scoped="" ref="0x7ff8de7b34e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8de7b37c0" loc="43:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8de7b37c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de7b3b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7ff8de7b2020" loc="44:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7ff8de7b2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7ff8de7b23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7ff8de7b65c0" loc="41:../../../..//tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7ff8de7b65c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7ff8de7b6940"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de7b6ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFO" ref="0x7ff8de7ab380" loc="54:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7ff8de7ab380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de7ab700"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de7ab890"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de7aba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de7abbb0"/>
        <function-ref name="get" scoped="" ref="0x7ff8de7abd40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de7aa020"/>
        <function-ref name="set" scoped="" ref="0x7ff8de7aa1b0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de7aa340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7ff8de7a4b90" loc="64:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7ff8de7a4b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7ff8de7a2020"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7ff8de7a21b0"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7ff8de7a2340"/>
        <function-ref name="syncDone" scoped="" ref="0x7ff8de7a24d0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7ff8de7a2660"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7ff8de7a27f0"/>
        <function-ref name="setChannel" scoped="" ref="0x7ff8de7a2980"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7ff8de7a2b10"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7ff8de7a2ca0"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7ff8de7a2e30"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7ff8de7a1020"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7ff8de7a11b0"/>
        <function-ref name="sync" scoped="" ref="0x7ff8de7a1340"/>
        <function-ref name="getChannel" scoped="" ref="0x7ff8de7a15d0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7ff8de7a1760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveDone_task" ref="0x7ff8de78c9d0" loc="148:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveDone_task" scoped="" ref="0x7ff8de78c9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8de78cd50"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8de78b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7ff8de7a1d70" loc="65:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7ff8de7a1d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7ff8de79f330"/>
        <function-ref name="clear" scoped="" ref="0x7ff8de79fa60"/>
        <function-ref name="isValid" scoped="" ref="0x7ff8de7a0ba0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de79e210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFOP" ref="0x7ff8de7aa6b0" loc="55:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7ff8de7aa6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de7aaa30"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de7aabc0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de7aad50"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de7a9020"/>
        <function-ref name="get" scoped="" ref="0x7ff8de7a91b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de7a9340"/>
        <function-ref name="set" scoped="" ref="0x7ff8de7a94d0"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de7a9660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7ff8de79ccb0" loc="69:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de79ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de79b0a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de79b230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7ff8de79b590" loc="70:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7ff8de79b590"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de79b910"/>
        <function-ref name="write" scoped="" ref="0x7ff8de79baa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXNONCE" ref="0x7ff8de79a6d0" loc="72:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de79a6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de79aa50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de79abe0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7ff8de7a5330" loc="62:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de7a5330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7ff8de7a56b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7ff8de7a5840"/>
        <function-ref name="getRssi" scoped="" ref="0x7ff8de7a59d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7ff8de7a5b60"/>
        <function-ref name="getPower" scoped="" ref="0x7ff8de7a5cf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7ff8de7a5e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7ff8de7ae550" loc="49:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7ff8de7ae550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de7ae8d0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7ff8de7aea60"/>
        <function-ref name="sfd" scoped="" ref="0x7ff8de7aebf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SACK" ref="0x7ff8de7a63a0" loc="60:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7ff8de7a63a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7a6720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7ff8de7ac020" loc="53:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7ff8de7ac020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de7ac3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de7ac530"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de7ac6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de7ac850"/>
        <function-ref name="get" scoped="" ref="0x7ff8de7ac9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de7acb70"/>
        <function-ref name="set" scoped="" ref="0x7ff8de7acd00"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de7ab020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO_RAM" ref="0x7ff8de799020" loc="73:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de799020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de7993a0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de799530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8de7af620" loc="47:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8de7af620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de7af9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7ff8de7a41e0" loc="63:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de7a41e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de7a4560"/>
        <function-ref name="getHeader" scoped="" ref="0x7ff8de7a46f0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7ff8de7a4880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8de7ad020" loc="50:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8de7ad020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de7ad3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7ff8de7a86e0" loc="58:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7ff8de7a86e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de7a8a60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de7a8bf0"/>
        <function-ref name="request" scoped="" ref="0x7ff8de7a8d80"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de7a7020"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de7a71b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7ff8de79be00" loc="71:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7ff8de79be00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de79a1c0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de79a350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO" ref="0x7ff8de7a7530" loc="59:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de7a7530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de7a78b0"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de7a7a40"/>
        <function-ref name="write" scoped="" ref="0x7ff8de7a7bd0"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de7a7d60"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de7a6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7ff8de7998b0" loc="74:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7ff8de7998b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de799e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7ff8de7ad7c0" loc="51:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7ff8de7ad7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7ff8de7adb40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7ff8de798150" loc="76:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7ff8de798150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ff8de7984d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ff8de798660"/>
        <function-ref name="led1On" scoped="" ref="0x7ff8de7987f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ff8de798980"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ff8de798b10"/>
        <function-ref name="get" scoped="" ref="0x7ff8de798ca0"/>
        <function-ref name="led1Off" scoped="" ref="0x7ff8de798e30"/>
        <function-ref name="led2Off" scoped="" ref="0x7ff8de7974d0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de797020"/>
        <function-ref name="led0On" scoped="" ref="0x7ff8de7971b0"/>
        <function-ref name="led2On" scoped="" ref="0x7ff8de797340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7ff8de79c3e0" loc="68:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de79c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de79c760"/>
        <function-ref name="write" scoped="" ref="0x7ff8de79c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXDEC" ref="0x7ff8de79eb10" loc="67:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de79eb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de79c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptFIFOP" ref="0x7ff8de7a9a50" loc="56:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7ff8de7a9a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7ff8de7a9dd0"/>
        <function-ref name="disable" scoped="" ref="0x7ff8de7a8020"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7ff8de7a81b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7ff8de7a8340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHRX" ref="0x7ff8de7a6ad0" loc="61:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de7a6ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de7a5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7ff8de7afca0" loc="48:../../../..//tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7ff8de7afca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7ff8de7ae0a0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de7ae230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7ff8de72ca70" loc="44:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7ff8de72ca70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7ff8de72cdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7ff8de730670" loc="41:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de730670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7ff8de7309f0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7ff8de730b80"/>
        <function-ref name="getRssi" scoped="" ref="0x7ff8de730d10"/>
        <function-ref name="getNetwork" scoped="" ref="0x7ff8de72d020"/>
        <function-ref name="getPower" scoped="" ref="0x7ff8de72d1b0"/>
        <function-ref name="getLqi" scoped="" ref="0x7ff8de72d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7ff8de72b550" loc="46:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7ff8de72b550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7ff8de729b00"/>
        <function-ref name="clear" scoped="" ref="0x7ff8de7282a0"/>
        <function-ref name="isValid" scoped="" ref="0x7ff8de7293d0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de7289d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7ff8de72c0c0" loc="43:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de72c0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de72c440"/>
        <function-ref name="getHeader" scoped="" ref="0x7ff8de72c5d0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7ff8de72c760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7ff8de723480" loc="48:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7ff8de723480"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de723800"/>
        <function-ref name="isSet" scoped="" ref="0x7ff8de723990"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de723b20"/>
        <function-ref name="set" scoped="" ref="0x7ff8de723cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7ff8de727660" loc="47:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7ff8de727660"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7ff8de725ce0"/>
        <function-ref name="clear" scoped="" ref="0x7ff8de724460"/>
        <function-ref name="isValid" scoped="" ref="0x7ff8de7255b0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de724b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7ff8de72d6e0" loc="42:../../../..//tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7ff8de72d6e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7ff8de72da60"/>
        <function-ref name="noAck" scoped="" ref="0x7ff8de72dbf0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7ff8de72dd80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7ff8de71c020" loc="49:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7ff8de71c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7ff8de71c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7ff8de722d20" loc="46:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de722d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7ff8de71e0e0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7ff8de71e270"/>
        <function-ref name="getRssi" scoped="" ref="0x7ff8de71e400"/>
        <function-ref name="getNetwork" scoped="" ref="0x7ff8de71e590"/>
        <function-ref name="getPower" scoped="" ref="0x7ff8de71e720"/>
        <function-ref name="getLqi" scoped="" ref="0x7ff8de71e8b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7ff8de7134a0" loc="56:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7ff8de7134a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8de713820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8de7139b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de713b40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de713cd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8de713e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7ff8de71ca80" loc="51:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7ff8de71ca80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7ff8de71a020"/>
        <function-ref name="clear" scoped="" ref="0x7ff8de71a750"/>
        <function-ref name="isValid" scoped="" ref="0x7ff8de71b8d0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de71ae80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7ff8de71d640" loc="48:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de71d640"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de71d9c0"/>
        <function-ref name="getHeader" scoped="" ref="0x7ff8de71db50"/>
        <function-ref name="getMetadata" scoped="" ref="0x7ff8de71dce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7ff8de7158b0" loc="53:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7ff8de7158b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de715c30"/>
        <function-ref name="isSet" scoped="" ref="0x7ff8de715dc0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de713020"/>
        <function-ref name="set" scoped="" ref="0x7ff8de7131b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime32khz" ref="0x7ff8de70f820" loc="57:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime32khz" scoped="" ref="0x7ff8de70f820"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de7114c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7ff8de711b80" loc="58:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7ff8de711b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de7107d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7ff8de719af0" loc="52:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7ff8de719af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7ff8de7160d0"/>
        <function-ref name="clear" scoped="" ref="0x7ff8de716800"/>
        <function-ref name="isValid" scoped="" ref="0x7ff8de717970"/>
        <function-ref name="set" scoped="" ref="0x7ff8de715020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7ff8de71ec50" loc="47:../../../..//tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7ff8de71ec50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7ff8de71d020"/>
        <function-ref name="noAck" scoped="" ref="0x7ff8de71d1b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7ff8de71d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7ff8de6be4e0" loc="48:../../../..//tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7ff8de6be4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de6b5150"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7ff8de6b57c0" loc="49:../../../..//tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7ff8de6b57c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de6b4620"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8de6b3020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8de6b4ae0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8de6b34e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7ff8de6ad020" loc="46:../../../..//tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7ff8de6ad020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de6aa630"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de6aca60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de6ab920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de6ab4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de6a9020"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de6aaab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de6ab020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de6adc10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de6aa020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de6ac110"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de6ac5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7ff8de6a9610" loc="47:../../../..//tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7ff8de6a9610"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de6a73d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8de6af130" loc="45:../../../..//tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8de6af130"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de6af4b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7ff8de679870" loc="44:../../../..//tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7ff8de679870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de675090"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de676090"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8de676a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de676550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8de675550"/>
        <function-ref name="start" scoped="" ref="0x7ff8de6786a0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de678bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8de679020" loc="43:../../../..//tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8de679020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de6793a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7ff8dd927260" loc="44:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7ff8dd927260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8dd925b30"/>
        <function-ref name="fired" scoped="" ref="0x7ff8dd926a60"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8dd9254e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8dd925020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8dd923020"/>
        <function-ref name="start" scoped="" ref="0x7ff8dd926090"/>
        <function-ref name="stop" scoped="" ref="0x7ff8dd9265a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8dd9289d0" loc="43:../../../..//tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8dd9289d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8dd928d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7ff8dd90fa80" loc="41:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8dd90fa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8dd90fe00"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8dd90e020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8dd90e1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8dd90e340"/>
        <function-ref name="fired" scoped="" ref="0x7ff8dd90e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7ff8dd911020" loc="39:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8dd911020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8dd9113a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8dd911530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8dd9116c0"/>
        <function-ref name="get" scoped="" ref="0x7ff8dd911850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8dd9119e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8dd911b70"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8dd911d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8dd910020"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8dd9101b0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8dd910340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8dd9104d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7ff8dd910760" loc="40:../../../..//tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8dd910760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8dd910ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8dd910c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8dd910e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8dd90f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8dd90f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8dd90f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8dd90f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8dd90f660"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8dd90f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7ff8dd905760" loc="49:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7ff8dd905760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8dd905ae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8dd905c70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8dd905e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8dd904020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8dd9041b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7ff8dd908dd0" loc="47:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7ff8dd908dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8dd907180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8dd907310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8dd9074a0"/>
        <function-ref name="get" scoped="" ref="0x7ff8dd907630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8dd9077c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8dd907950"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8dd907ae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8dd907c70"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8dd907e00"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8dd906020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8dd9061b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7ff8dd90cbf0" loc="46:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7ff8dd90cbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8dd9084e0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8dd9094e0"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8dd909e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8dd9099a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8dd9089a0"/>
        <function-ref name="start" scoped="" ref="0x7ff8dd90aa80"/>
        <function-ref name="stop" scoped="" ref="0x7ff8dd909020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8dd90c360" loc="45:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8dd90c360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8dd90c6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7ff8dd906440" loc="48:../../../..//tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7ff8dd906440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8dd9067c0"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8dd906950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8dd906ae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8dd906c70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8dd906e00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8dd905020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8dd9051b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8dd905340"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8dd9054d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7ff8de699b70" loc="43:../../../..//tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7ff8de699b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de6959b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8de694360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8de695e70"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8de694820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7ff8de68db90" loc="63:../../../..//tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7ff8de68db90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de68c9d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8de68b4e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8de68b020"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8de68b9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7ff8de690610" loc="62:../../../..//tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7ff8de690610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de68e5b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8de68d020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8de68ea70"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8de68d4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7ff8dd9215f0" loc="61:../../../..//tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7ff8dd9215f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8dd91fe50"/>
        <function-ref name="fired" scoped="" ref="0x7ff8dd920e00"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8dd91f800"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8dd91f340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8dd91e340"/>
        <function-ref name="start" scoped="" ref="0x7ff8dd920430"/>
        <function-ref name="stop" scoped="" ref="0x7ff8dd920940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7ff8dd91bd20" loc="73:../../../..//tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7ff8dd91bd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df732640"/>
            <typename><typedef-ref name="T32khz" ref="0x7ff8df7329b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8dd918670"/>
        <function-ref name="fired" scoped="" ref="0x7ff8dd919550"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8dd918020"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8dd919a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8dd918b30"/>
        <function-ref name="start" scoped="" ref="0x7ff8dd91ab60"/>
        <function-ref name="stop" scoped="" ref="0x7ff8dd919090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7ff8dd91e9b0" loc="68:../../../..//tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7ff8dd91e9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8dd91d7e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8dd91b1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8dd91dca0"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8dd91b670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7ff8de6449c0" loc="74:../../../..//tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7ff8de6449c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8de644d40"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8de642020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7ff8de647850" loc="49:../../../..//tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7ff8de647850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de644090"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de645090"/>
        <function-ref name="startAt" scoped="" ref="0x7ff8de645a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de645550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7ff8de644550"/>
        <function-ref name="start" scoped="" ref="0x7ff8de6466a0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de646bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7ff8de64c2f0" loc="48:../../../..//tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8de64c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de649870"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de64be40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de64ac00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de64a780"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de6471e0"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de649cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de64a300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de64b020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de649260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de64b4f0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de64b9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7ff8de5f2a00" loc="71:../../../..//tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7ff8de5f2a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8de5f2d80"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8de5f1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7ff8de5f7640" loc="49:../../../..//tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7ff8de5f7640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de5f3c40"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de5f51e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de5f3020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de5f5ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de5f2590"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de5f2110"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de5f5660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de5f6390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de5f3630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de5f6860"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de5f6d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7ff8de5fd150" loc="48:../../../..//tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8de5fd150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de5f9700"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de5fcc30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de5faa50"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de5fa5b0"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de5f7090"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de5f9ba0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de5fa110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de5fdd60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de5f90d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de5fc2a0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de5fc790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7ff8de5ef2b0" loc="48:../../../..//tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7ff8de5ef2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de5ee020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7ff8de5ee690" loc="49:../../../..//tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7ff8de5ee690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7ff8de5ec5b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8de5eb020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8de5eca70"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8de5eb4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7ff8de5e58c0" loc="45:../../../..//tos/system/TimerMilliC.nc">
      <component-ref qname="CC2420PacketC.DummyTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8de5e58c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de5d1cf0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de5d2320"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de5d10d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de5d2c20"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de5d0660"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de5d01e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de5d27a0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de5d34e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de5d16e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de5d39b0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de5d3e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7ff8de5dc2c0" loc="49:../../../..//tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7ff8de5dc2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de5d8870"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de5dae40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de5d9c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de5d9780"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de5d71e0"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de5d8cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de5d9300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de5da020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de5d8260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de5da4f0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de5da9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7ff8de5bfc60" loc="69:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7ff8de5bfc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5be210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5be3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7ff8de5c9020" loc="47:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7ff8de5c9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c93a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7ff8de5c3c70" loc="63:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7ff8de5c3c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5c2020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5c21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7ff8de5bd670" loc="72:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7ff8de5bd670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5bd9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5bdb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7ff8de5b6e50" loc="86:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7ff8de5b6e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b5210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7ff8de5bde50" loc="73:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7ff8de5bde50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5bc210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5bc3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7ff8de5a92f0" loc="108:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7ff8de5a92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5a9670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5a9800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7ff8de5ab2f0" loc="104:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7ff8de5ab2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5ab670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5ab800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7ff8de5c8370" loc="50:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7ff8de5c8370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c86f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7ff8de5b1670" loc="93:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7ff8de5b1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b19f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b1b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7ff8de5ad2f0" loc="102:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7ff8de5ad2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5ad670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5ad800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7ff8de5c2c60" loc="65:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7ff8de5c2c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5c1020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5c11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7ff8de5c1c60" loc="67:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7ff8de5c1c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5bf020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5bf1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7ff8de5b7670" loc="83:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7ff8de5b7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b79f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b7b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7ff8de5b9e50" loc="79:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7ff8de5b9e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b8210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7ff8de5bc670" loc="74:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7ff8de5bc670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5bc9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5bcb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7ff8de5cb970" loc="42:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7ff8de5cb970"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7ff8de5cbcf0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7ff8de5cbe80"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7ff8de5ca030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7ff8de5c7d00" loc="54:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7ff8de5c7d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c50a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7ff8de5c5370" loc="55:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7ff8de5c5370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7ff8de5b0a70" loc="95:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7ff8de5b0a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b0df0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5af020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7ff8de5c5ac0" loc="56:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7ff8de5c5ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c5e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7ff8de5adad0" loc="103:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7ff8de5adad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5ade50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5ab020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7ff8de5c7060" loc="52:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7ff8de5c7060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c73e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7ff8de5b2e50" loc="92:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7ff8de5b2e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b1210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7ff8de5c1480" loc="66:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7ff8de5c1480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5c1800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5c1990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7ff8de5c2480" loc="64:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7ff8de5c2480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5c2800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5c2990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7ff8de5ca950" loc="46:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7ff8de5ca950"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5cacd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7ff8de5b4e50" loc="90:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7ff8de5b4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b2210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7ff8de5b5670" loc="87:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7ff8de5b5670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b59f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b5b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7ff8de5b2670" loc="91:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7ff8de5b2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b29f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b2b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7ff8de5aaad0" loc="107:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7ff8de5aaad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5aae50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5a9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7ff8de5abad0" loc="105:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7ff8de5abad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5abe50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5aa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7ff8de5b8670" loc="80:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7ff8de5b8670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b89f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b8b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7ff8de5b5e50" loc="88:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7ff8de5b5e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b4210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7ff8de5aead0" loc="101:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7ff8de5aead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5aee50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5ad020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7ff8de5bb670" loc="76:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7ff8de5bb670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5bb9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5bbb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7ff8de5a9ad0" loc="111:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7ff8de5a9ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de5a9e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de5a8020"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5a81b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de5a8340"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de5a84d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7ff8de5ca300" loc="45:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7ff8de5ca300"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5ca680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7ff8de5c3490" loc="62:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7ff8de5c3490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5c3810"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5c39a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7ff8de5bf480" loc="68:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7ff8de5bf480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5bf800"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5bf990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7ff8de5b7e50" loc="84:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7ff8de5b7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b6210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7ff8de5bce50" loc="75:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7ff8de5bce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5bb210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5bb3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7ff8de5b6670" loc="85:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7ff8de5b6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b69f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b6b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7ff8de5be670" loc="70:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7ff8de5be670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5be9f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5beb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7ff8de5c9670" loc="48:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7ff8de5c9670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c99f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7ff8de5bee50" loc="71:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7ff8de5bee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5bd210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5bd3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8de5ccd00" loc="41:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8de5ccd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de5cb0a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de5cb230"/>
        <function-ref name="request" scoped="" ref="0x7ff8de5cb3c0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de5cb550"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de5cb6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7ff8de5c4160" loc="57:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7ff8de5c4160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c44e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7ff8de5c4e00" loc="59:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7ff8de5c4e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c31c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7ff8de5ae2f0" loc="100:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7ff8de5ae2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5ae670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5ae800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7ff8de5afad0" loc="99:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7ff8de5afad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5afe50"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5ae020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7ff8de5c76b0" loc="53:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7ff8de5c76b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c7a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7ff8de5af2f0" loc="96:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7ff8de5af2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5af670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5af800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7ff8de5aa2f0" loc="106:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7ff8de5aa2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5aa670"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5aa800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7ff8de5b8e50" loc="81:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7ff8de5b8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b7210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b73a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7ff8de5b4670" loc="89:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7ff8de5b4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b49f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b4b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7ff8de5c9cc0" loc="49:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7ff8de5c9cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c80a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7ff8de5c89c0" loc="51:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7ff8de5c89c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c8d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7ff8de5bbe50" loc="77:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7ff8de5bbe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b9210"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b93a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7ff8de5c47b0" loc="58:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7ff8de5c47b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7ff8de5c4b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7ff8de5b9670" loc="78:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7ff8de5b9670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b99f0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b9b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7ff8de5b1e50" loc="94:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7ff8de5b1e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7ff8de5b0610"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5b07a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7ff8de5a87a0" loc="112:../../../..//tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7ff8de5a87a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7ff8de5a8b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7ff8de5a8cb0"/>
        <function-ref name="write" scoped="" ref="0x7ff8de5a8e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7ff8de5a7020"/>
        <function-ref name="readDone" scoped="" ref="0x7ff8de5a71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7ff8de57ca20" loc="46:../../../..//tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7ff8de57ca20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7ff8de57cda0"/>
        <function-ref name="rand32" scoped="" ref="0x7ff8de57b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7ff8de57a920" loc="45:../../../..//tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7ff8de57a920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de57c560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8de5809a0" loc="44:../../../..//tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8de5809a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de580d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7ff8de576a20" loc="48:../../../..//tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7ff8de576a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7ff8de576da0"/>
        <function-ref name="rand32" scoped="" ref="0x7ff8de574020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7ff8de577940" loc="47:../../../..//tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7ff8de577940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de576560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8de577080" loc="46:../../../..//tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8de577080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de577400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7ff8de57eaa0" loc="67:../../../..//tos/system/StateC.nc">
      <component-ref qname="CC2420CsmaC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7ff8de57eaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7ff8de57ee20"/>
        <function-ref name="toIdle" scoped="" ref="0x7ff8de578020"/>
        <function-ref name="isState" scoped="" ref="0x7ff8de5781b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7ff8de578340"/>
        <function-ref name="requestState" scoped="" ref="0x7ff8de5784d0"/>
        <function-ref name="forceState" scoped="" ref="0x7ff8de578660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7ff8de55e020" loc="44:../../../..//tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7ff8de55e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de55e3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de55e530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de55e6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de55e850"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de55e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7ff8de55f220" loc="40:../../../..//tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7ff8de55f220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de55f5a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de55f730"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de55f8c0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de55fa50"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de55fbe0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7ff8de55ae60" loc="45:../../../..//tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7ff8de55ae60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de559210"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de5593a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de559530"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de5596c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de559850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7ff8de55da20" loc="40:../../../..//tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7ff8de55da20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de55dda0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de55a020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de55a1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de55a340"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de55a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7ff8de5588f0" loc="47:../../../..//tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7ff8de5588f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7ff8de558c70"/>
        <function-ref name="rand32" scoped="" ref="0x7ff8de558e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8de55a750" loc="41:../../../..//tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8de55a750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de55aad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7ff8de557170" loc="48:../../../..//tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de557170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de5574f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7ff8de557680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7ff8de557810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="State" ref="0x7ff8de559ae0" loc="46:../../../..//tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7ff8de559ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7ff8de559e60"/>
        <function-ref name="toIdle" scoped="" ref="0x7ff8de558020"/>
        <function-ref name="isState" scoped="" ref="0x7ff8de5581b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7ff8de558340"/>
        <function-ref name="requestState" scoped="" ref="0x7ff8de5584d0"/>
        <function-ref name="forceState" scoped="" ref="0x7ff8de558660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7ff8de55b690" loc="67:../../../..//tos/system/StateC.nc">
      <component-ref qname="UniqueSendC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7ff8de55b690"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7ff8de55ba10"/>
        <function-ref name="toIdle" scoped="" ref="0x7ff8de55bba0"/>
        <function-ref name="isState" scoped="" ref="0x7ff8de55bd30"/>
        <function-ref name="isIdle" scoped="" ref="0x7ff8de544020"/>
        <function-ref name="requestState" scoped="" ref="0x7ff8de5441b0"/>
        <function-ref name="forceState" scoped="" ref="0x7ff8de544340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7ff8de53d950" loc="47:../../../..//tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7ff8de53d950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de53dcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8de541aa0" loc="42:../../../..//tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8de541aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de541e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7ff8de53d200" loc="43:../../../..//tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7ff8de53d200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de53d580"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7ff8de5383f0" loc="49:../../../..//tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7ff8de5383f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de538770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8de539b70" loc="45:../../../..//tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8de539b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de538020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8de53ce30" loc="43:../../../..//tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8de53ce30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de5391e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7ff8de538a70" loc="50:../../../..//tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de538a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de538df0"/>
        <function-ref name="getHeader" scoped="" ref="0x7ff8de537020"/>
        <function-ref name="getMetadata" scoped="" ref="0x7ff8de5371b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7ff8de539570" loc="44:../../../..//tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7ff8de539570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de5398f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7ff8de50a020" loc="75:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7ff8de50a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de50a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7ff8de50a6b0" loc="76:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7ff8de50a6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de50aa30"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de50abc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de50ad50"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de509020"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de5091b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7ff8de50e8e0" loc="65:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7ff8de50e8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de50ec60"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de50edf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de50d020"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de50d1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de50d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7ff8de50dc90" loc="68:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7ff8de50dc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de50c0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de50c230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de50c3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de50c550"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de50c6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8de50d5e0" loc="66:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8de50d5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de50d960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8de50fbe0" loc="64:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8de50fbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de50e020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de50e1b0"/>
        <function-ref name="request" scoped="" ref="0x7ff8de50e340"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de50e4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de50e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7ff8de50ca50" loc="69:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7ff8de50ca50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de50cdd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7ff8de50b170" loc="71:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7ff8de50b170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8de50b4f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8de50b680"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de50b810"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de50b9a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8de50bb30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7ff8de500d70" loc="58:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7ff8de500d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de4ff180"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de4ff310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de4ff4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de4ff630"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de4ff7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7ff8de4ffb10" loc="59:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7ff8de4ffb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de4fe020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantTask" ref="0x7ff8de4d1db0" loc="184:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantTask" scoped="" ref="0x7ff8de4d1db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8de4cf180"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8de4cf310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7ff8de4fe2f0" loc="60:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de4fe2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7ff8de4fe670"/>
        <function-ref name="setNetwork" scoped="" ref="0x7ff8de4fe800"/>
        <function-ref name="getRssi" scoped="" ref="0x7ff8de4fe990"/>
        <function-ref name="getNetwork" scoped="" ref="0x7ff8de4feb20"/>
        <function-ref name="getPower" scoped="" ref="0x7ff8de4fecb0"/>
        <function-ref name="getLqi" scoped="" ref="0x7ff8de4fee40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7ff8de502a20" loc="51:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7ff8de502a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de502da0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de501020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de5011b0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de501340"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de5014d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7ff8de4fdb70" loc="62:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7ff8de4fdb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7ff8de4fc020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7ff8de4fc1b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7ff8de4fc340"/>
        <function-ref name="dequeue" scoped="" ref="0x7ff8de4fc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7ff8de4fd170" loc="61:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de4fd170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de4fd4f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7ff8de4fd680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7ff8de4fd810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7ff8de502370" loc="49:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7ff8de502370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de5026f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8de5047b0" loc="46:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8de5047b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de504b30"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de504cc0"/>
        <function-ref name="request" scoped="" ref="0x7ff8de504e50"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de503020"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de5031b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7ff8de5034d0" loc="48:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7ff8de5034d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de503850"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de5039e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de503b70"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de503d00"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de502020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7ff8de501840" loc="52:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7ff8de501840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de501bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7ff8de500020" loc="54:../../../..//tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7ff8de500020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8de5003a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8de500530"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de5006c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de500850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8de5009e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8de4b1dd0" loc="44:../../../..//tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8de4b1dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de4af180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7ff8de4af410" loc="45:../../../..//tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7ff8de4af410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7ff8de4af790"/>
        <function-ref name="isEmpty" scoped="" ref="0x7ff8de4af920"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7ff8de4afab0"/>
        <function-ref name="dequeue" scoped="" ref="0x7ff8de4afc40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7ff8de4a4b80" loc="46:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7ff8de4a4b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8de4a3020"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8de4a31b0"/>
        <function-ref name="start" scoped="" ref="0x7ff8de4a3340"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de4a34d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7ff8de4a2860" loc="51:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7ff8de4a2860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de4a2be0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de4a2d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de4a1020"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de4a11b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de4a1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7ff8de4a1690" loc="52:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7ff8de4a1690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de4a1a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7ff8de4a8ce0" loc="43:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7ff8de4a8ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de4a50a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de4a5230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de4a53c0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de4a5550"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de4a56e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7ff8de4a4080" loc="45:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8de4a4080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7ff8de4a4400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7ff8de4a4590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7ff8de4a4720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7ff8de4a48b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendState" ref="0x7ff8de4a3800" loc="47:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendState" scoped="" ref="0x7ff8de4a3800"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7ff8de4a3b80"/>
        <function-ref name="toIdle" scoped="" ref="0x7ff8de4a3d10"/>
        <function-ref name="isState" scoped="" ref="0x7ff8de4a2020"/>
        <function-ref name="isIdle" scoped="" ref="0x7ff8de4a21b0"/>
        <function-ref name="requestState" scoped="" ref="0x7ff8de4a2340"/>
        <function-ref name="forceState" scoped="" ref="0x7ff8de4a24d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7ff8de4a1d90" loc="53:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7ff8de4a1d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8de4a0180"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8de4a0310"/>
        <function-ref name="start" scoped="" ref="0x7ff8de4a04a0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de4a0630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8de4a5980" loc="44:../../../..//tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8de4a5980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de4a5d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7ff8de49d2d0" loc="41:../../../..//tos/chips/cc2420/lpl/DummyLplP.nc">
      <component-ref qname="DummyLplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7ff8de49d2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7ff8de49d650"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7ff8de49d7e0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7ff8de49d970"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7ff8de49db00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7ff8de49f580" loc="67:../../../..//tos/system/StateC.nc">
      <component-ref qname="DummyLplC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7ff8de49f580"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7ff8de49f900"/>
        <function-ref name="toIdle" scoped="" ref="0x7ff8de49fa90"/>
        <function-ref name="isState" scoped="" ref="0x7ff8de49fc20"/>
        <function-ref name="isIdle" scoped="" ref="0x7ff8de49fdb0"/>
        <function-ref name="requestState" scoped="" ref="0x7ff8de49e020"/>
        <function-ref name="forceState" scoped="" ref="0x7ff8de49e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7ff8de48fd70" loc="45:../../../..//tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7ff8de48fd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de48e180"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de48e310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de48e4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de48e630"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de48e7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7ff8de493350" loc="40:../../../..//tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7ff8de493350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de4936d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de493860"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de4939f0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de493b80"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de493d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7ff8de48f020" loc="41:../../../..//tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7ff8de48f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7ff8de48f3a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7ff8de48f530"/>
        <function-ref name="getRetries" scoped="" ref="0x7ff8de48f6c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7ff8de48f850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7ff8de48f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7ff8de48a1c0" loc="44:../../../..//tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7ff8de48a1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7ff8de48a540"/>
        <function-ref name="noAck" scoped="" ref="0x7ff8de48a6d0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7ff8de48a860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7ff8de48d410" loc="40:../../../..//tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7ff8de48d410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7ff8de48d790"/>
        <function-ref name="setRetries" scoped="" ref="0x7ff8de48d920"/>
        <function-ref name="getRetries" scoped="" ref="0x7ff8de48dab0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7ff8de48dc40"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7ff8de48ddd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7ff8de46b690" loc="59:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7ff8de46b690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de46ba10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7ff8de46c860" loc="58:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7ff8de46c860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de46cbe0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de46cd70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de46b020"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de46b1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de46b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7ff8de468610" loc="62:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7ff8de468610"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7ff8de468990"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7ff8de468b20"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7ff8de468cb0"/>
        <function-ref name="syncDone" scoped="" ref="0x7ff8de468e40"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7ff8de467020"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7ff8de4671b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7ff8de467340"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7ff8de4674d0"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7ff8de467660"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7ff8de4677f0"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7ff8de467980"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7ff8de467b10"/>
        <function-ref name="sync" scoped="" ref="0x7ff8de467ca0"/>
        <function-ref name="getChannel" scoped="" ref="0x7ff8de466020"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7ff8de4661b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7ff8de46d8b0" loc="54:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7ff8de46d8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7ff8de46dc30"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7ff8de46ddc0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7ff8de46c020"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7ff8de46c1b0"/>
        <function-ref name="setCca" scoped="" ref="0x7ff8de46c340"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7ff8de46c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7ff8de46ece0" loc="53:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7ff8de46ece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7ff8de46d0a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7ff8de4651f0" loc="64:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7ff8de4651f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7ff8de465570"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7ff8de465700"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7ff8de465890"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7ff8de465a20"/>
        <function-ref name="setCca" scoped="" ref="0x7ff8de465bb0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7ff8de465d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7ff8de46fa80" loc="52:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7ff8de46fa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8de46fe00"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8de46e020"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de46e1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de46e340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8de46e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7ff8de473020" loc="48:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7ff8de473020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7ff8de4733a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de473530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de4736c0"/>
        <function-ref name="cancel" scoped="" ref="0x7ff8de473850"/>
        <function-ref name="sendDone" scoped="" ref="0x7ff8de4739e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7ff8de471df0" loc="50:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7ff8de471df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de4701c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7ff8de46bce0" loc="60:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7ff8de46bce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7ff8de46a0a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7ff8de46a230"/>
        <function-ref name="getRssi" scoped="" ref="0x7ff8de46a3c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7ff8de46a550"/>
        <function-ref name="getPower" scoped="" ref="0x7ff8de46a6e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7ff8de46a870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7ff8de4664d0" loc="63:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7ff8de4664d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7ff8de466950"/>
        <function-ref name="changed" scoped="" ref="0x7ff8de466ae0"/>
        <function-ref name="amGroup" scoped="" ref="0x7ff8de466c70"/>
        <function-ref name="setAddress" scoped="" ref="0x7ff8de466e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7ff8de46ab70" loc="61:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7ff8de46ab70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de468020"/>
        <function-ref name="getHeader" scoped="" ref="0x7ff8de4681b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7ff8de468340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8de471210" loc="49:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8de471210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de471590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7ff8de464d30" loc="67:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7ff8de464d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7ff8de4630e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7ff8de463270"/>
        <function-ref name="led1On" scoped="" ref="0x7ff8de463400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7ff8de463590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7ff8de463720"/>
        <function-ref name="get" scoped="" ref="0x7ff8de4638b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7ff8de463a40"/>
        <function-ref name="led2Off" scoped="" ref="0x7ff8de4621b0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de463bd0"/>
        <function-ref name="led0On" scoped="" ref="0x7ff8de463d60"/>
        <function-ref name="led2On" scoped="" ref="0x7ff8de462020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7ff8de470470" loc="51:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7ff8de470470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7ff8de4707f0"/>
        <function-ref name="source" scoped="" ref="0x7ff8de470980"/>
        <function-ref name="address" scoped="" ref="0x7ff8de470b10"/>
        <function-ref name="destination" scoped="" ref="0x7ff8de470ca0"/>
        <function-ref name="setSource" scoped="" ref="0x7ff8de470e30"/>
        <function-ref name="setDestination" scoped="" ref="0x7ff8de46f020"/>
        <function-ref name="type" scoped="" ref="0x7ff8de46f1b0"/>
        <function-ref name="setType" scoped="" ref="0x7ff8de46f340"/>
        <function-ref name="isForMe" scoped="" ref="0x7ff8de46f4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7ff8de46f660"/>
        <function-ref name="localGroup" scoped="" ref="0x7ff8de46f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioResource" ref="0x7ff8de4640f0" loc="66:../../../..//tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioResource" scoped="" ref="0x7ff8de4640f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de464470"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de464600"/>
        <function-ref name="request" scoped="" ref="0x7ff8de464790"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de464920"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de464ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7ff8de3be020" loc="46:../../../..//tos/system/AMReceiverC.nc">
      <component-ref qname="SendingBuffer_AppC.R_A"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7ff8de3be020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8de3be3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8de3be530"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de3be6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de3be850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8de3be9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8de3c4910" loc="45:../../../..//tos/system/AMReceiverC.nc">
      <component-ref qname="SendingBuffer_AppC.R_A"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8de3c4910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de3c4c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7ff8de3bec30" loc="47:../../../..//tos/system/AMReceiverC.nc">
      <component-ref qname="SendingBuffer_AppC.R_A"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7ff8de3bec30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7ff8de3bc020"/>
        <function-ref name="source" scoped="" ref="0x7ff8de3bc1b0"/>
        <function-ref name="address" scoped="" ref="0x7ff8de3bc340"/>
        <function-ref name="destination" scoped="" ref="0x7ff8de3bc4d0"/>
        <function-ref name="setSource" scoped="" ref="0x7ff8de3bc660"/>
        <function-ref name="setDestination" scoped="" ref="0x7ff8de3bc7f0"/>
        <function-ref name="type" scoped="" ref="0x7ff8de3bc980"/>
        <function-ref name="setType" scoped="" ref="0x7ff8de3bcb10"/>
        <function-ref name="isForMe" scoped="" ref="0x7ff8de3bcca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7ff8de3bce30"/>
        <function-ref name="localGroup" scoped="" ref="0x7ff8de3bb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7ff8de3b9970" loc="46:../../../..//tos/system/AMReceiverC.nc">
      <component-ref qname="SendingBuffer_AppC.R_B"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7ff8de3b9970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8de3b9cf0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7ff8de3b9e80"/>
        <function-ref name="getPayload" scoped="" ref="0x7ff8de3b8030"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7ff8de3b81c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7ff8de3b8350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7ff8de3b93a0" loc="45:../../../..//tos/system/AMReceiverC.nc">
      <component-ref qname="SendingBuffer_AppC.R_B"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7ff8de3b93a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7ff8de3b9720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7ff8de3b85a0" loc="47:../../../..//tos/system/AMReceiverC.nc">
      <component-ref qname="SendingBuffer_AppC.R_B"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7ff8de3b85a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7ff8de3b8920"/>
        <function-ref name="source" scoped="" ref="0x7ff8de3b8ab0"/>
        <function-ref name="address" scoped="" ref="0x7ff8de3b8c40"/>
        <function-ref name="destination" scoped="" ref="0x7ff8de3b8dd0"/>
        <function-ref name="setSource" scoped="" ref="0x7ff8de3b7020"/>
        <function-ref name="setDestination" scoped="" ref="0x7ff8de3b71b0"/>
        <function-ref name="type" scoped="" ref="0x7ff8de3b7340"/>
        <function-ref name="setType" scoped="" ref="0x7ff8de3b74d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7ff8de3b7660"/>
        <function-ref name="setGroup" scoped="" ref="0x7ff8de3b77f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7ff8de3b7980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7ff8de3b5830" loc="45:../../../..//tos/system/TimerMilliC.nc">
      <component-ref qname="SendingBuffer_AppC.Timer1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8de3b5830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de3b1cf0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de3b3300"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de3b10d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de3b3c00"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de3b0660"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de3b01e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de3b3780"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de3b4480"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de3b16e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de3b4950"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de3b4e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7ff8de3ae140" loc="45:../../../..//tos/system/TimerMilliC.nc">
      <component-ref qname="SendingBuffer_AppC.Timer2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8de3ae140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de3aa630"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de3adb70"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de3ac920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de3ac4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de3a9020"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de3aaab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de3ac020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de3aed30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de3aa020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de3ad220"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de3ad6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x7ff8de11ed30" loc="48:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="SendingBuffer_AppC.AutoAdc"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x7ff8de11ed30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7ff8de11d0e0"/>
        <function-ref name="configure" scoped="" ref="0x7ff8de11d270"/>
        <function-ref name="dataReady" scoped="" ref="0x7ff8de11d400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x7ff8de11fd70" loc="47:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="SendingBuffer_AppC.AutoAdc"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x7ff8de11fd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7ff8de11e180"/>
        <function-ref name="configureSingle" scoped="" ref="0x7ff8de11e310"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7ff8de11e4a0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7ff8de11e630"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7ff8de11e7c0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7ff8de11e950"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7ff8de11eae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x7ff8de11d650" loc="49:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="SendingBuffer_AppC.AutoAdc"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x7ff8de11d650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7ff8de11d9d0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7ff8de11db60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x7ff8de11c020" loc="51:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="SendingBuffer_AppC.AutoAdc"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x7ff8de11c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7ff8de11cc50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8de11f160" loc="46:../../../..//tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="SendingBuffer_AppC.AutoAdc"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8de11f160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de11f4e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de11f670"/>
        <function-ref name="request" scoped="" ref="0x7ff8de11f800"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de11f990"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de11fb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7ff8de3852e0" loc="42:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7ff8de3852e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7ff8de385660"/>
        <function-ref name="configure" scoped="" ref="0x7ff8de3857f0"/>
        <function-ref name="dataReady" scoped="" ref="0x7ff8de385980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7ff8de37fa70" loc="44:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7ff8de37fa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7ff8de37fdf0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de382020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7ff8de3842c0" loc="43:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7ff8de3842c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7ff8de384640"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7ff8de3847d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7ff8de387b10" loc="41:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7ff8de387b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7ff8de386020"/>
        <function-ref name="configureSingle" scoped="" ref="0x7ff8de3861b0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7ff8de386340"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7ff8de3864d0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7ff8de386660"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7ff8de3867f0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7ff8de386980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8de3897c0" loc="40:../../../..//tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8de3897c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de389b40"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de389cd0"/>
        <function-ref name="request" scoped="" ref="0x7ff8de389e60"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de387020"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de3871b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x7ff8de37b370" loc="42:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x7ff8de37b370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7ff8de37b6f0"/>
        <function-ref name="configure" scoped="" ref="0x7ff8de37b880"/>
        <function-ref name="dataReady" scoped="" ref="0x7ff8de37ba10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7ff8de36a8d0" loc="48:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7ff8de36a8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7ff8de36ac50"/>
        <function-ref name="getMCtl" scoped="" ref="0x7ff8de36ade0"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7ff8de376020"/>
        <function-ref name="isBusy" scoped="" ref="0x7ff8de3761b0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7ff8de376340"/>
        <function-ref name="getCtl1" scoped="" ref="0x7ff8de3764d0"/>
        <function-ref name="setMCtl" scoped="" ref="0x7ff8de376660"/>
        <function-ref name="startConversion" scoped="" ref="0x7ff8de3767f0"/>
        <function-ref name="setCtl0" scoped="" ref="0x7ff8de376980"/>
        <function-ref name="getMem" scoped="" ref="0x7ff8de376b10"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7ff8de376ca0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7ff8de376e30"/>
        <function-ref name="stopConversion" scoped="" ref="0x7ff8de375020"/>
        <function-ref name="enableConversion" scoped="" ref="0x7ff8de3752b0"/>
        <function-ref name="setCtl1" scoped="" ref="0x7ff8de375440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port64" ref="0x7ff8de35b540" loc="58:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7ff8de35b540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de35b8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de35ba50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8de35bbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de35bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de35a020"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8de35a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de35a340"/>
        <function-ref name="get" scoped="" ref="0x7ff8de35a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8de35a660"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8de35a7f0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de35a980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8de35ab10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8de35aca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8de359020"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de3591b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA1" ref="0x7ff8de364850" loc="53:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7ff8de364850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8de364bd0"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8de364d60"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8de363020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8de3631b0"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de363340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA0" ref="0x7ff8de368020" loc="50:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7ff8de368020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8de3683a0"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8de368530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8de3686c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8de368850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8de3689e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8de368b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8de368d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8de367020"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8de3671b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x7ff8de3781d0" loc="44:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x7ff8de3781d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7ff8de378550"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de3786e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port62" ref="0x7ff8de35f540" loc="56:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7ff8de35f540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de35f8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de35fa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8de35fbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de35fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de35e020"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8de35e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de35e340"/>
        <function-ref name="get" scoped="" ref="0x7ff8de35e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8de35e660"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8de35e7f0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de35e980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8de35eb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8de35eca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8de35d020"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de35d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x7ff8de379320" loc="43:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7ff8de379320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x7ff8de3796a0"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x7ff8de379830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port67" ref="0x7ff8de355540" loc="61:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7ff8de355540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de3558c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de355a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8de355be0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de355d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de354020"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8de3541b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de354340"/>
        <function-ref name="get" scoped="" ref="0x7ff8de3544d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8de354660"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8de3547f0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de354980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8de354b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8de354ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8de353020"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de3531b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port60" ref="0x7ff8de3636d0" loc="54:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7ff8de3636d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de363b50"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de363ce0"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8de363e70"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de362030"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de3621c0"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8de362350"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de3624e0"/>
        <function-ref name="get" scoped="" ref="0x7ff8de362670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8de362800"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8de362990"/>
        <function-ref name="set" scoped="" ref="0x7ff8de362b20"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8de362cb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8de362e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8de361120"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de3612b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8de37d020" loc="40:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8de37d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8de37d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port65" ref="0x7ff8de359540" loc="59:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7ff8de359540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de3598c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de359a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8de359be0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de359d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de358020"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8de3581b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de358340"/>
        <function-ref name="get" scoped="" ref="0x7ff8de3584d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8de358660"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8de3587f0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de358980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8de358b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8de358ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8de357020"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de3571b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerA" ref="0x7ff8de375780" loc="49:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7ff8de375780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7ff8de375b00"/>
        <function-ref name="setClockSource" scoped="" ref="0x7ff8de375c90"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8de375e20"/>
        <function-ref name="get" scoped="" ref="0x7ff8de369020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8de3691b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7ff8de369340"/>
        <function-ref name="getMode" scoped="" ref="0x7ff8de3694d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7ff8de369660"/>
        <function-ref name="overflow" scoped="" ref="0x7ff8de3697f0"/>
        <function-ref name="setMode" scoped="" ref="0x7ff8de369980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7ff8de369b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ADCArbiterInfo" ref="0x7ff8de378af0" loc="47:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCArbiterInfo" scoped="" ref="0x7ff8de378af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7ff8de378e70"/>
        <function-ref name="userId" scoped="" ref="0x7ff8de377030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA1" ref="0x7ff8de367560" loc="51:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7ff8de367560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7ff8de3678e0"/>
        <function-ref name="getControl" scoped="" ref="0x7ff8de367a70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7ff8de367c00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7ff8de367d90"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7ff8de365020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7ff8de3651b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7ff8de365340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7ff8de3654d0"/>
        <function-ref name="setControl" scoped="" ref="0x7ff8de365660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x7ff8de37dd00" loc="41:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x7ff8de37dd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x7ff8de37c0a0"/>
        <function-ref name="configureSingle" scoped="" ref="0x7ff8de37c230"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x7ff8de37c3c0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x7ff8de37c550"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x7ff8de37c6e0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x7ff8de37c870"/>
        <function-ref name="singleDataReady" scoped="" ref="0x7ff8de37ca00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port63" ref="0x7ff8de35d540" loc="57:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7ff8de35d540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de35d8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de35da50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8de35dbe0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de35dd70"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de35c020"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8de35c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de35c340"/>
        <function-ref name="get" scoped="" ref="0x7ff8de35c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8de35c660"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8de35c7f0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de35c980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8de35cb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8de35cca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8de35b020"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de35b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA0" ref="0x7ff8de3659e0" loc="52:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7ff8de3659e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7ff8de365d60"/>
        <function-ref name="setEvent" scoped="" ref="0x7ff8de364020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7ff8de3641b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7ff8de364340"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de3644d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port61" ref="0x7ff8de361640" loc="55:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7ff8de361640"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de3619c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de361b50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8de361ce0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de361e70"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de360030"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8de3601c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de360350"/>
        <function-ref name="get" scoped="" ref="0x7ff8de3604e0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8de360670"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8de360800"/>
        <function-ref name="set" scoped="" ref="0x7ff8de360990"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8de360b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8de360cb0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8de35f020"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de35f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port66" ref="0x7ff8de357540" loc="60:../../../..//tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7ff8de357540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7ff8de3578c0"/>
        <function-ref name="isInput" scoped="" ref="0x7ff8de357a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7ff8de357be0"/>
        <function-ref name="toggle" scoped="" ref="0x7ff8de357d70"/>
        <function-ref name="isOutput" scoped="" ref="0x7ff8de356020"/>
        <function-ref name="getResistor" scoped="" ref="0x7ff8de3561b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7ff8de356340"/>
        <function-ref name="get" scoped="" ref="0x7ff8de3564d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7ff8de356660"/>
        <function-ref name="getRaw" scoped="" ref="0x7ff8de3567f0"/>
        <function-ref name="set" scoped="" ref="0x7ff8de356980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7ff8de356b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7ff8de356ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7ff8de355020"/>
        <function-ref name="clr" scoped="" ref="0x7ff8de3551b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAdc12" ref="0x7ff8de2970c0" loc="46:../../../..//tos/chips/msp430/adc12/HplAdc12P.nc">
      <component-ref qname="HplAdc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7ff8de2970c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7ff8de297440"/>
        <function-ref name="getMCtl" scoped="" ref="0x7ff8de2975d0"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7ff8de297760"/>
        <function-ref name="isBusy" scoped="" ref="0x7ff8de2978f0"/>
        <function-ref name="conversionDone" scoped="" ref="0x7ff8de297a80"/>
        <function-ref name="getCtl1" scoped="" ref="0x7ff8de297c10"/>
        <function-ref name="setMCtl" scoped="" ref="0x7ff8de297da0"/>
        <function-ref name="startConversion" scoped="" ref="0x7ff8de296020"/>
        <function-ref name="setCtl0" scoped="" ref="0x7ff8de2961b0"/>
        <function-ref name="getMem" scoped="" ref="0x7ff8de296340"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7ff8de2964d0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7ff8de296660"/>
        <function-ref name="stopConversion" scoped="" ref="0x7ff8de2967f0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7ff8de296a80"/>
        <function-ref name="setCtl1" scoped="" ref="0x7ff8de296c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7ff8de2073a0" loc="86:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8de2073a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7ff8de207740"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7ff8de2078d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7ff8de205570" loc="89:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8de205570"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7ff8de205910"/>
        <function-ref name="configure" scoped="" ref="0x7ff8de205aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8de208520" loc="85:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8de208520"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de2088c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de208a50"/>
        <function-ref name="request" scoped="" ref="0x7ff8de208be0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de208d70"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de207020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7ff8de207b20" loc="87:../../../..//tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8de207b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7ff8de205020"/>
        <function-ref name="userId" scoped="" ref="0x7ff8de2051b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7ff8dd7fa3b0" loc="44:../../../..//tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7ff8dd7fa3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7ff8dd7fa730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x7ff8dd7fa9c0" loc="45:../../../..//tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RoundRobinQueue" scoped="" ref="0x7ff8dd7fa9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7ff8dd7fad40"/>
        <function-ref name="isEmpty" scoped="" ref="0x7ff8dd7f9020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7ff8dd7f91b0"/>
        <function-ref name="dequeue" scoped="" ref="0x7ff8dd7f9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7ff8dd7f7850" loc="52:../../../..//tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7ff8dd7f7850"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7ff8dd7f7bf0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7ff8dd7f7d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7ff8dd7f6910" loc="56:../../../..//tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7ff8dd7f6910"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7ff8dd7f6cb0"/>
        <function-ref name="configure" scoped="" ref="0x7ff8dd7f6e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7ff8dd7f4120" loc="57:../../../..//tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7ff8dd7f4120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7ff8dd7f44a0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7ff8dd7f4630"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7ff8dd7f47c0"/>
        <function-ref name="dequeue" scoped="" ref="0x7ff8dd7f4950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7ff8dd7f89d0" loc="51:../../../..//tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7ff8dd7f89d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8dd7f8d70"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8dd7f7020"/>
        <function-ref name="request" scoped="" ref="0x7ff8dd7f71b0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8dd7f7340"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8dd7f74d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7ff8dd7f6020" loc="53:../../../..//tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7ff8dd7f6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7ff8dd7f63a0"/>
        <function-ref name="userId" scoped="" ref="0x7ff8dd7f6530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7ff8dd7f4c20" loc="68:../../../..//tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7ff8dd7f4c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8dd7f3020"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8dd7f31b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7ff8de1e9740" loc="55:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7ff8de1e9740"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7ff8de1e33d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7ff8de1ea1d0" loc="54:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7ff8de1ea1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de1ea550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de1ea6e0"/>
        <function-ref name="request" scoped="" ref="0x7ff8de1ea870"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de1eaa00"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de1eab90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7ff8de1efd20" loc="52:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7ff8de1efd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de1eb0e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de1eb270"/>
        <function-ref name="request" scoped="" ref="0x7ff8de1eb400"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de1eb590"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de1eb720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x7ff8de1de9a0" loc="43:../../../..//tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x7ff8de1de9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x7ff8de1ded20"/>
        <function-ref name="getMCtl" scoped="" ref="0x7ff8de1dd020"/>
        <function-ref name="resetIFGs" scoped="" ref="0x7ff8de1dd1b0"/>
        <function-ref name="isBusy" scoped="" ref="0x7ff8de1dd340"/>
        <function-ref name="conversionDone" scoped="" ref="0x7ff8de1dd4d0"/>
        <function-ref name="getCtl1" scoped="" ref="0x7ff8de1dd660"/>
        <function-ref name="setMCtl" scoped="" ref="0x7ff8de1dd7f0"/>
        <function-ref name="startConversion" scoped="" ref="0x7ff8de1dd980"/>
        <function-ref name="setCtl0" scoped="" ref="0x7ff8de1ddb10"/>
        <function-ref name="getMem" scoped="" ref="0x7ff8de1ddca0"/>
        <function-ref name="setIEFlags" scoped="" ref="0x7ff8de1dde30"/>
        <function-ref name="getIEFlags" scoped="" ref="0x7ff8de1dc020"/>
        <function-ref name="stopConversion" scoped="" ref="0x7ff8de1dc1b0"/>
        <function-ref name="enableConversion" scoped="" ref="0x7ff8de1dc440"/>
        <function-ref name="setCtl1" scoped="" ref="0x7ff8de1dc5d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffTimer" ref="0x7ff8de1d6020" loc="45:../../../..//tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffTimer" scoped="" ref="0x7ff8de1d6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de1d3630"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de1d5a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de1d4920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de1d44a0"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de1d1020"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de1d3ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de1d4020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de1d6c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de1d3020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de1d5110"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de1d55e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_2_5V" ref="0x7ff8de1e0e00" loc="39:../../../..//tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7ff8de1e0e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8de1de1c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8de1de350"/>
        <function-ref name="start" scoped="" ref="0x7ff8de1de4e0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de1de670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffSettleTimer" ref="0x7ff8de1d16c0" loc="46:../../../..//tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x7ff8de1d16c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de1cec40"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de1cf1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de1ce020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de1cfae0"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de1cc590"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de1cc110"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de1cf660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de1d0390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de1ce630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de1d0860"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de1d0d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_1_5V" ref="0x7ff8de1e0240" loc="38:../../../..//tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7ff8de1e0240"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8de1e05c0"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8de1e0750"/>
        <function-ref name="start" scoped="" ref="0x7ff8de1e08e0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de1e0a70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOnTimer" ref="0x7ff8de1dca90" loc="44:../../../..//tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOnTimer" scoped="" ref="0x7ff8de1dca90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de1d8020"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de1da510"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de1d9300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de1dae10"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de1d8920"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de1d84a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de1da990"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de1db6b0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de1d9910"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de1dbb80"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de1da090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x7ff8de17d020" loc="43:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x7ff8de17d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7ff8de17dc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_2_5V" ref="0x7ff8de17f9c0" loc="42:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x7ff8de17f9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8de17fd40"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8de17e020"/>
        <function-ref name="start" scoped="" ref="0x7ff8de17e1b0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de17e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x7ff8de180030" loc="40:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x7ff8de180030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de1803b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de180540"/>
        <function-ref name="request" scoped="" ref="0x7ff8de1806d0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de180860"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de1809f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x7ff8de184cb0" loc="38:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x7ff8de184cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7ff8de1810a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7ff8de181230"/>
        <function-ref name="request" scoped="" ref="0x7ff8de1813c0"/>
        <function-ref name="granted" scoped="" ref="0x7ff8de181550"/>
        <function-ref name="isOwner" scoped="" ref="0x7ff8de1816e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="switchOff" ref="0x7ff8de17a7f0" loc="52:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="switchOff" scoped="" ref="0x7ff8de17a7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7ff8de17ab70"/>
        <function-ref name="runTask" scoped="" ref="0x7ff8de17ad00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_1_5V" ref="0x7ff8de180d80" loc="41:../../../..//tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x7ff8de180d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7ff8de17f180"/>
        <function-ref name="stopDone" scoped="" ref="0x7ff8de17f310"/>
        <function-ref name="start" scoped="" ref="0x7ff8de17f4a0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de17f630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7ff8de14b4e0" loc="45:../../../..//tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8de14b4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de148a20"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de149020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de149da0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de149920"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de1464a0"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de146020"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de1494a0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de14a110"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de148410"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de14a5e0"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de14aab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7ff8de144020" loc="45:../../../..//tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8de144020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de140630"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de143a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de142920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de1424a0"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de13f020"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de140ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de142020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de144c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de140020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de143110"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de1435e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7ff8de13eb40" loc="45:../../../..//tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7ff8de13eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df90ae00"/>
            <typename><typedef-ref name="TMilli" ref="0x7ff8df732200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7ff8de139110"/>
        <function-ref name="fired" scoped="" ref="0x7ff8de13c5b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7ff8de13b4a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7ff8de13b020"/>
        <function-ref name="getdt" scoped="" ref="0x7ff8de139a10"/>
        <function-ref name="gett0" scoped="" ref="0x7ff8de139590"/>
        <function-ref name="isRunning" scoped="" ref="0x7ff8de13ca30"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7ff8de13d750"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7ff8de13bab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7ff8de13dc20"/>
        <function-ref name="stop" scoped="" ref="0x7ff8de13c130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x7ff8dd810200" loc="44:../../../..//tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="SendingBuffer_AppC.AutoAdc.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x7ff8dd810200"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7ff8dd810e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x7ff8dd80e490" loc="45:../../../..//tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="SendingBuffer_AppC.AutoAdc.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x7ff8dd80e490"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x7ff8dd80d110"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../..//tos/interfaces/Init.nc">
      <documentation loc="34:../../../..//tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7ff8df906420" loc="62:../../../..//tos/interfaces/Init.nc">
        <documentation loc="53:../../../..//tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../..//tos/interfaces/Boot.nc">
      <documentation loc="42:../../../..//tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7ff8df907020" loc="60:../../../..//tos/interfaces/Boot.nc">
        <documentation loc="51:../../../..//tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../..//tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7ff8df8d8420" loc="48:../../../..//tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7ff8df8da700" loc="43:../../../..//tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7ff8df8d9ce0" loc="47:../../../..//tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7ff8df8da020" loc="42:../../../..//tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7ff8df8dae70" loc="45:../../../..//tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7ff8df8dc0e0" loc="40:../../../..//tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7ff8df8dc7c0" loc="41:../../../..//tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7ff8df8d95c0" loc="46:../../../..//tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../..//tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../..//tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7ff8dfa25020" loc="62:../../../..//tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../..//tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7ff8dfceac00"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7ff8df886020" loc="55:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7ff8df887cc0" loc="55:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7ff8df88a390" loc="42:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7ff8df8d1ec0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7ff8df8d0940"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7ff8df886890" loc="57:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7ff8df8857b0" loc="59:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7ff8df887560" loc="47:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7ff8df885020" loc="58:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7ff8df88ab30" loc="43:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7ff8df889350" loc="44:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7ff8df889da0" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7ff8df8d1ec0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7ff8df8d0940"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7ff8df889b20" loc="46:../../../..//tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7ff8df8d1ec0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7ff8df8d0940"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7ff8df8790e0" loc="44:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7ff8df876730" loc="84:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="75:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7ff8df8764b0" loc="84:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7ff8df8752e0" loc="91:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="86:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7ff8df875060" loc="91:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7ff8df877ca0" loc="73:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7ff8df8773e0" loc="68:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7ff8df879a90" loc="56:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7ff8df879810" loc="56:../../../..//tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../../..//tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7ff8df8803e0" loc="40:../../../..//tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7ff8df880d60" loc="41:../../../..//tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7ff8df880ae0" loc="41:../../../..//tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7ff8df87e790" loc="42:../../../..//tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7ff8df87e510" loc="42:../../../..//tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7ff8df87d2a0" loc="43:../../../..//tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7ff8df87d020" loc="43:../../../..//tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7ff8df87d990" loc="45:../../../..//tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7ff8df890810" loc="52:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7ff8df88d2a0" loc="55:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7ff8df88d020" loc="55:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7ff8df88e020" loc="53:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7ff8df896ab0" loc="45:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7ff8df88e760" loc="54:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7ff8df8929b0" loc="47:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7ff8df890120" loc="51:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7ff8df892270" loc="46:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7ff8df8910e0" loc="48:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7ff8df8919f0" loc="50:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7ff8df891770" loc="50:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7ff8df88dcb0" loc="56:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7ff8df88da30" loc="56:../../../..//tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../..//tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7ff8df84f1f0" loc="39:../../../..//tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../..//tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../..//tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7ff8df948a80" loc="85:../../../..//tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7ff8df9471f0" loc="86:../../../..//tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7ff8df9482b0" loc="79:../../../..//tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../..//tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../..//tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../..//tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7ff8dfb61810" loc="52:../../../..//tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../..//tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../..//tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../..//tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7ff8e0243020" loc="57:../../../..//tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../..//tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7ff8e0242020" loc="72:../../../..//tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../..//tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7ff8e0243790" loc="65:../../../..//tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../..//tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../..//tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7ff8e0237270" loc="67:../../../..//tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../..//tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7ff8e0237ac0" loc="75:../../../..//tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../..//tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12MultiChannel" loc="51:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
      <function command="" provided="0" name="getData" ref="0x7ff8df682d00" loc="102:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="95:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.</short>
          <long> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event dataReady() will be signalled. Otherwise no event will be signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7ff8df682020" loc="86:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="54:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Configures the ADC to perform conversion(s) on multiple channels.</short>
          <long> &#10; Configures the ADC to perform conversion(s) on multiple channels.  Any&#10; previous configuration will be overwritten.  If SUCCESS is returned&#10; calling &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>dataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config Main ADC12 configuration and configuration of the first&#10; channel &#10;&#10; @param memctl List of additional channels and respective reference&#10; voltages&#10;&#10; @param numMemctl Number of entries in the list&#10; &#10; @param buffer Buffer to store the conversion results, it must have&#10; numSamples entries. Results will be stored in the order the channels where&#10; specified.&#10;&#10; @param numSamples Total number of samples. Note: numSamples %&#10; (numMemctl+1) must be zero. For example, to sample every channel twice use&#10; numSamples = (numMemctl+1) * 2&#10;&#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;. Samples are taken equally-spaced in&#10; time iterating round-robin over the channels (different channels are  &#10; not sampled simultaneously but one after another).&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8df69ad30"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7ff8df699230"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7ff8df684a50" loc="86:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="memctl" ref="0x7ff8df684e40" loc="87:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8df69ad30"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x7ff8df699230"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="numMemctl" ref="0x7ff8df683200" loc="87:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
          <variable name="buffer" ref="0x7ff8df6835a0" loc="87:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7ff8df683950" loc="88:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7ff8df683cc0" loc="88:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x7ff8df681d40" loc="112:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="104:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Conversion results are ready.</short>
          <long> &#10; Conversion results are ready. Results are stored in the buffer in the&#10; order the channels where specified in the &#60;code>configure()&#60;/code>&#10; command, i.e. every (numMemctl+1)-th entry maps to the same channel. &#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of results stored in &#60;code>buffer&#60;/code> &#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7ff8df681720" loc="112:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7ff8df681ab0" loc="112:../../../..//tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../..//tos/interfaces/Receive.nc">
      <documentation loc="34:../../../..//tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7ff8df6ca9c0" loc="78:../../../..//tos/interfaces/Receive.nc">
        <documentation loc="58:../../../..//tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
              <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df6ca060" loc="78:../../../..//tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7ff8df6ca3b0" loc="78:../../../..//tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8df6ca6e0" loc="78:../../../..//tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../..//tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../..//tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7ff8df6b0df0" loc="113:../../../..//tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../..//tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7ff8df6b0b70" loc="113:../../../..//tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7ff8df6ad350" loc="138:../../../..//tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../..//tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7ff8df6ad0d0" loc="138:../../../..//tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7ff8df6b0190" loc="104:../../../..//tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../..//tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7ff8df6ae680" loc="130:../../../..//tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../..//tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../..//tos/interfaces/Packet.nc">
      <documentation loc="42:../../../..//tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7ff8df6ab020" loc="65:../../../..//tos/interfaces/Packet.nc">
        <documentation loc="58:../../../..//tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df6b2ca0" loc="65:../../../..//tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7ff8df6a9110" loc="78:../../../..//tos/interfaces/Packet.nc">
        <documentation loc="67:../../../..//tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df6abe10" loc="78:../../../..//tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7ff8df6a6490" loc="126:../../../..//tos/interfaces/Packet.nc">
        <documentation loc="109:../../../..//tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df6a7e50" loc="126:../../../..//tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8df6a61c0" loc="126:../../../..//tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7ff8df6a7560" loc="106:../../../..//tos/interfaces/Packet.nc">
        <documentation loc="96:../../../..//tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7ff8df6a85e0" loc="94:../../../..//tos/interfaces/Packet.nc">
        <documentation loc="80:../../../..//tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df6a8020" loc="94:../../../..//tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8df6a8350" loc="94:../../../..//tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../..//tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x7ff8df6d02c0" loc="80:../../../..//tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../..//tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7ff8df6d2940" loc="80:../../../..//tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7ff8df6d2cc0" loc="80:../../../..//tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8df6d0020" loc="80:../../../..//tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7ff8df6cd970" loc="135:../../../..//tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../..//tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df6cd370" loc="135:../../../..//tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8df6cd6a0" loc="135:../../../..//tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7ff8df6cca60" loc="123:../../../..//tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../..//tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7ff8df6cf630" loc="96:../../../..//tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../..//tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df6cf3b0" loc="96:../../../..//tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7ff8df6ceb80" loc="110:../../../..//tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../..//tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df6ce5a0" loc="110:../../../..//tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7ff8df6ce8f0" loc="110:../../../..//tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../..//tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../..//tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7ff8df7216f0" loc="53:../../../..//tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ff8df7216f0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7ff8df6bd420" loc="136:../../../..//tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../..//tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7ff8df6c2d60" loc="83:../../../..//tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../..//tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7ff8df6c0b10" loc="114:../../../..//tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../..//tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7ff8df6c0540" loc="114:../../../..//tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7ff8df6c0880" loc="114:../../../..//tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7ff8df6c1d60" loc="98:../../../..//tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../..//tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7ff8df6bc460" loc="151:../../../..//tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../..//tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7ff8df6bdbb0" loc="144:../../../..//tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../..//tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7ff8df6c1570" loc="92:../../../..//tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../..//tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7ff8df6c32a0" loc="64:../../../..//tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../..//tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7ff8df6c3020" loc="64:../../../..//tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7ff8df6beaa0" loc="129:../../../..//tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../..//tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7ff8df6be4d0" loc="129:../../../..//tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7ff8df6be810" loc="129:../../../..//tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7ff8df6c3d60" loc="73:../../../..//tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../..//tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7ff8df6c3ae0" loc="73:../../../..//tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7ff8df6c2650" loc="78:../../../..//tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../..//tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AdcConfigure" loc="45:../../../..//tos/interfaces/AdcConfigure.nc">
      <documentation loc="36:../../../..//tos/interfaces/AdcConfigure.nc">
        <short> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration.</short>
        <long> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration. &#10; &#10; @author Jan Hauer &#10; @see  Please refer to TEP 101 for more information about this interface and&#10; its intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="adc_config_t" ref="0x7ff8df69ead0" loc="45:../../../..//tos/interfaces/AdcConfigure.nc">
          <interfacedef-ref qname="AdcConfigure"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7ff8df69ead0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getConfiguration" ref="0x7ff8df6784d0" loc="58:../../../..//tos/interfaces/AdcConfigure.nc">
        <documentation loc="48:../../../..//tos/interfaces/AdcConfigure.nc">
          <short> &#10; Returns the configuration of an ADC client.</short>
          <long> &#10; Returns the configuration of an ADC client.  &#60;code>adc_config_t&#60;/code> is&#10; a hardware specific data type that contains all information necessary to&#10; configure the respective ADC hardware for the client. A client MUST always&#10; return the same configuration and, if configuration data is passed as a&#10; pointer, the ADC subsystem (HIL component) MUST NOT reference it after the&#10; return of this command.&#10;  &#10; @return chip specific configuration.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AdcConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x7ff8df69ead0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../../..//tos/interfaces/Leds.nc">
      <documentation loc="33:../../../..//tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7ff8df7295b0" loc="61:../../../..//tos/interfaces/Leds.nc">
        <documentation loc="58:../../../..//tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7ff8df729d60" loc="67:../../../..//tos/interfaces/Leds.nc">
        <documentation loc="63:../../../..//tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7ff8df7285a0" loc="72:../../../..//tos/interfaces/Leds.nc">
        <documentation loc="69:../../../..//tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7ff8df727510" loc="83:../../../..//tos/interfaces/Leds.nc">
        <documentation loc="79:../../../..//tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7ff8df726c60" loc="100:../../../..//tos/interfaces/Leds.nc">
        <documentation loc="96:../../../..//tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7ff8df7244d0" loc="117:../../../..//tos/interfaces/Leds.nc">
        <documentation loc="103:../../../..//tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7ff8df728d30" loc="77:../../../..//tos/interfaces/Leds.nc">
        <documentation loc="74:../../../..//tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7ff8df7230b0" loc="134:../../../..//tos/interfaces/Leds.nc">
        <documentation loc="120:../../../..//tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7ff8df724dc0" loc="134:../../../..//tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7ff8df72bdf0" loc="56:../../../..//tos/interfaces/Leds.nc">
        <documentation loc="53:../../../..//tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7ff8df727cf0" loc="89:../../../..//tos/interfaces/Leds.nc">
        <documentation loc="86:../../../..//tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7ff8df7264b0" loc="94:../../../..//tos/interfaces/Leds.nc">
        <documentation loc="91:../../../..//tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../..//tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../..//tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7ff8df6a4b80" loc="59:../../../..//tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../..//tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df6a4900" loc="59:../../../..//tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7ff8df67cd70" loc="71:../../../..//tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../..//tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df67caf0" loc="71:../../../..//tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7ff8df67a020" loc="85:../../../..//tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../..//tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df67dce0" loc="85:../../../..//tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../..//tos/interfaces/Resource.nc">
      <documentation loc="63:../../../..//tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7ff8df6a19c0" loc="120:../../../..//tos/interfaces/Resource.nc">
        <documentation loc="104:../../../..//tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7ff8df6a2990" loc="97:../../../..//tos/interfaces/Resource.nc">
        <documentation loc="90:../../../..//tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7ff8df6a2020" loc="88:../../../..//tos/interfaces/Resource.nc">
        <documentation loc="78:../../../..//tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7ff8df6a11f0" loc="102:../../../..//tos/interfaces/Resource.nc">
        <documentation loc="99:../../../..//tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7ff8df69f470" loc="128:../../../..//tos/interfaces/Resource.nc">
        <documentation loc="122:../../../..//tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../..//tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../..//tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7ff8df5328a0" loc="44:../../../..//tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7ff8df531020" loc="45:../../../..//tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7ff8df534a40" loc="42:../../../..//tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7ff8df531e80" loc="47:../../../..//tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7ff8df532190" loc="43:../../../..//tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7ff8df531740" loc="46:../../../..//tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7ff8df537c40" loc="40:../../../..//tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7ff8df534350" loc="41:../../../..//tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../..//tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7ff8df507880" loc="78:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7ff8df506020" loc="80:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7ff8df502b10" loc="110:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7ff8df502890" loc="110:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7ff8df508120" loc="58:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7ff8df505020" loc="87:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7ff8df501490" loc="117:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7ff8df506760" loc="85:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7ff8df5070e0" loc="73:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7ff8df503770" loc="99:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7ff8df5088c0" loc="66:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7ff8df50a270" loc="48:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7ff8df5057a0" loc="92:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7ff8df502020" loc="101:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7ff8df503020" loc="94:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7ff8df50a9a0" loc="53:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../../..//tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../..//tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../..//tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7ff8df2bf840" loc="177:../../../..//tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../..//tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7ff8df6e4180"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7ff8df2bf5c0" loc="177:../../../..//tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7ff8df2c9400" loc="88:../../../..//tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../..//tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7ff8df2c9180" loc="88:../../../..//tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7ff8df2cb840" loc="68:../../../..//tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../..//tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7ff8df2ca350" loc="78:../../../..//tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../..//tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7ff8df2ca0d0" loc="78:../../../..//tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7ff8df2c5d00" loc="121:../../../..//tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../..//tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7ff8df2c5720" loc="121:../../../..//tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7ff8df2c5a70" loc="121:../../../..//tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7ff8df2c8800" loc="103:../../../..//tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../..//tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7ff8df2c8220" loc="103:../../../..//tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7ff8df2c8570" loc="103:../../../..//tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7ff8df2c22e0" loc="147:../../../..//tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../..//tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7ff8df2c2060" loc="147:../../../..//tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7ff8df2c1680" loc="162:../../../..//tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../..//tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7ff8df2c10d0" loc="162:../../../..//tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7ff8df2c13f0" loc="162:../../../..//tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7ff8df6e5d50"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7ff8df2c30b0" loc="136:../../../..//tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../..//tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7ff8df2c6e00" loc="136:../../../..//tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7ff8df2bdd00" loc="187:../../../..//tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../..//tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7ff8df6e4180"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7ff8df2bd720" loc="187:../../../..//tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7ff8df2bda70" loc="187:../../../..//tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7ff8df6e4180"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7ff8df2bcb50" loc="195:../../../..//tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../..//tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7ff8df6e4180"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../..//tos/interfaces/Send.nc">
      <documentation loc="34:../../../..//tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7ff8df2ad020" loc="75:../../../..//tos/interfaces/Send.nc">
        <documentation loc="57:../../../..//tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df2b0a30" loc="75:../../../..//tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8df2b0d60" loc="75:../../../..//tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7ff8df2a9660" loc="125:../../../..//tos/interfaces/Send.nc">
        <documentation loc="115:../../../..//tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df2a9060" loc="125:../../../..//tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8df2a9390" loc="125:../../../..//tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7ff8df2a8790" loc="112:../../../..//tos/interfaces/Send.nc">
        <documentation loc="102:../../../..//tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7ff8df2ac350" loc="89:../../../..//tos/interfaces/Send.nc">
        <documentation loc="77:../../../..//tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df2ac0d0" loc="89:../../../..//tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7ff8df2aa870" loc="100:../../../..//tos/interfaces/Send.nc">
        <documentation loc="91:../../../..//tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df2aa290" loc="100:../../../..//tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7ff8df2aa5e0" loc="100:../../../..//tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../../..//tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7ff8df238920" loc="35:../../../..//tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ff8df238920"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7ff8df238b60" loc="35:../../../..//tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df238b60"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7ff8df232970" loc="63:../../../..//tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../../..//tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df238b60"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df2326f0" loc="63:../../../..//tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7ff8df231b40" loc="70:../../../..//tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../../..//tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df2318c0" loc="70:../../../..//tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7ff8df235750" loc="49:../../../..//tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../../..//tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df2354d0" loc="49:../../../..//tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7ff8df233020" loc="78:../../../..//tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../../..//tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df238b60"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df2308a0" loc="78:../../../..//tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7ff8df230c00" loc="78:../../../..//tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df238b60"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../../..//tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../../..//tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7ff8df223030" loc="65:../../../..//tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../../..//tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df2259e0" loc="65:../../../..//tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7ff8df225d70" loc="65:../../../..//tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7ff8df2222a0" loc="71:../../../..//tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../../..//tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df222020" loc="71:../../../..//tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7ff8df2251f0" loc="57:../../../..//tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../../..//tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7ff8df2267f0" loc="52:../../../..//tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../../..//tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7ff8df226570" loc="52:../../../..//tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioBackoff" loc="54:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <short>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.</short>
        <long>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.  &#10; &#10; This is because of fan-out issues with multiple components wanting to&#10; affect backoffs for whatever they're interested in:&#10; If you signal out an *event* to request an initial backoff and&#10; several components happen to be listening, then those components&#10; would be required to return a backoff value.  We don't want that&#10; behavior.&#10; With this strategy, components can listen for the requests and then&#10; decide if they want to affect the behavior.  If the component wants to&#10; affect the behavior, it calls back using the setXYZBackoff(..) command.&#10; If several components call back, then the last component to get its &#10; word in has the final say. &#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="requestCca" ref="0x7ff8df1fc430" loc="95:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="90:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on whether or not to use CCA on the outbound packet.</short>
          <long>&#10; Request for input on whether or not to use CCA on the outbound packet.&#10; Replies should come in the form of setCca(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df1fc1b0" loc="95:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestInitialBackoff" ref="0x7ff8df1fe720" loc="81:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="76:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; </short>
          <long>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df1fe4a0" loc="81:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCongestionBackoff" ref="0x7ff8df201dc0" loc="66:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="62:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestCongestionBackoff event&#10; </short>
          <long>&#10; Must be called within a requestCongestionBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7ff8df201b40" loc="66:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInitialBackoff" ref="0x7ff8df2012a0" loc="60:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="56:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestInitialBackoff event&#10; </short>
          <long>&#10; Must be called within a requestInitialBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7ff8df201020" loc="60:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCca" ref="0x7ff8df200880" loc="73:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="68:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Enable CCA for the outbound packet.</short>
          <long>&#10; Enable CCA for the outbound packet.  Must be called within a requestCca&#10; event&#10; @param ccaOn TRUE to enable CCA, which is the default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ccaOn" ref="0x7ff8df200600" loc="73:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestCongestionBackoff" ref="0x7ff8df1fd5e0" loc="88:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="83:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; </short>
          <long>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df1fd360" loc="88:../../../..//tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../../..//tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../../..//tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7ff8df1f0e60" loc="59:../../../..//tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../../..//tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7ff8df1f0850" loc="59:../../../..//tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7ff8df1f0bd0" loc="59:../../../..//tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Packet" loc="40:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <function command="" provided="0" name="setPower" ref="0x7ff8df20b0c0" loc="56:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="49:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Set transmission power for a given packet.</short>
          <long>&#10; Set transmission power for a given packet. Valid ranges are&#10; between 0 and 31.&#10;&#10; @param p_msg the message.&#10; @param power transmission power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7ff8df20caa0" loc="56:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="power" ref="0x7ff8df20cdf0" loc="56:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setNetwork" ref="0x7ff8df2076d0" loc="77:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7ff8df2070d0" loc="77:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="networkId" ref="0x7ff8df207440" loc="77:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRssi" ref="0x7ff8df20bba0" loc="64:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="58:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get rssi value for a given packet.</short>
          <long>&#10; Get rssi value for a given packet. For received packets, it is&#10; the received signal strength when receiving that packet. For sent&#10; packets, it is the received signal strength of the ack if an ack&#10; was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0x7ff8e055a110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7ff8df20b920" loc="64:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNetwork" ref="0x7ff8df208600" loc="75:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7ff8df208380" loc="75:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPower" ref="0x7ff8df20c2a0" loc="47:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="42:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get transmission power setting for current packet.</short>
          <long>&#10; Get transmission power setting for current packet.&#10;&#10; @param the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7ff8df20c020" loc="47:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLqi" ref="0x7ff8df209720" loc="72:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="66:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get lqi value for a given packet.</short>
          <long>&#10; Get lqi value for a given packet. For received packets, it is the&#10; link quality indicator value when receiving that packet. For sent&#10; packets, it is the link quality indicator value of the ack if an&#10; ack was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7ff8df2094a0" loc="72:../../../..//tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../../..//tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../../..//tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7ff8df1f4630" loc="65:../../../..//tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../../..//tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df1f43b0" loc="65:../../../..//tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7ff8df1f86f0" loc="46:../../../..//tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../../..//tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df1f80d0" loc="46:../../../..//tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7ff8df1f8460" loc="46:../../../..//tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7ff8df1f55f0" loc="59:../../../..//tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../../..//tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df1f5370" loc="59:../../../..//tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7ff8df1f7af0" loc="53:../../../..//tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../../..//tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df1f74d0" loc="53:../../../..//tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7ff8df1f7860" loc="53:../../../..//tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7ff8df1f3630" loc="71:../../../..//tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../../..//tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df1f33b0" loc="71:../../../..//tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../../..//tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../../..//tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7ff8df2030b0" loc="47:../../../..//tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../../..//tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df206de0" loc="47:../../../..//tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Transmit" loc="42:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <short>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7ff8df1c93a0" loc="51:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="44:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send a message&#10;&#10; </short>
          <long>&#10; Send a message&#10;&#10; @param p_msg message to send.&#10; @param useCca TRUE if this Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7ff8df1cddc0" loc="51:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="useCca" ref="0x7ff8df1c9110" loc="51:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7ff8df1c76a0" loc="65:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="60:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Cancel sending of the message.</short>
          <long>&#10; Cancel sending of the message.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="modify" ref="0x7ff8df1c5e70" loc="84:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="75:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Modify the contents of a packet.</short>
          <long>&#10; Modify the contents of a packet. This command can only be used&#10; when an SFD capture event for the sending packet is signalled.&#10;&#10; @param offset in the message to start modifying.&#10; @param buf to data to write&#10; @param len of bytes to write&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7ff8df1c5060" loc="84:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7ff8df1c58a0" loc="84:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8df1c5bd0" loc="84:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7ff8df1c6840" loc="73:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="67:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Signal that a message has been sent&#10;&#10; </short>
          <long>&#10; Signal that a message has been sent&#10;&#10; @param p_msg message to send.&#10; @param error notifaction of how the operation went.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7ff8df1c6260" loc="73:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7ff8df1c65b0" loc="73:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resend" ref="0x7ff8df1c9e30" loc="58:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="53:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send the previous message again&#10; </short>
          <long>&#10; Send the previous message again&#10; @param useCca TRUE if this re-Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="useCca" ref="0x7ff8df1c9bb0" loc="58:../../../..//tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../../..//tos/interfaces/Random.nc">
      <documentation loc="34:../../../..//tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7ff8df1c00e0" loc="52:../../../..//tos/interfaces/Random.nc">
        <documentation loc="48:../../../..//tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7ff8df1ca870" loc="46:../../../..//tos/interfaces/Random.nc">
        <documentation loc="42:../../../..//tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../..//tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../..//tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7ff8df1d3a40" loc="95:../../../..//tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../..//tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7ff8df1cb270" loc="105:../../../..//tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../..//tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420PacketBody" loc="37:../../../..//tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <short>&#10; Internal interface for the CC2420 to get portions of a packet.</short>
        <long>&#10; Internal interface for the CC2420 to get portions of a packet.&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="getPayload" ref="0x7ff8df1bb2e0" loc="49:../../../..//tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="45:../../../..//tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the payload region of the message, after any headers&#10;    works with extended addressing mode&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df1bb020" loc="49:../../../..//tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeader" ref="0x7ff8df1bc710" loc="42:../../../..//tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="39:../../../..//tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_header_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_header_t" ref="0x7ff8df71f720"/>
              <typename><typedef-ref name="cc2420_header_t" ref="0x7ff8df71c090"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df1bc410" loc="42:../../../..//tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMetadata" ref="0x7ff8df1b9620" loc="53:../../../..//tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="50:../../../..//tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_metadata_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_metadata_t" ref="0x7ff8df71cb90"/>
              <typename><typedef-ref name="cc2420_metadata_t" ref="0x7ff8df71a4f0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8df1b9320" loc="53:../../../..//tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Power" loc="42:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio power operations (e.g. voltage&#10; regulator, oscillator, etc). However, it does not include&#10; transmission power, see the CC2420Config interface.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="startOscillator" ref="0x7ff8df1d16e0" loc="71:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="65:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the oscillator.</short>
          <long>&#10; Start the oscillator. On SUCCESS, &#60;code>startOscillator&#60;/code>&#10; will be signalled when the oscillator has been started.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rfOff" ref="0x7ff8df1cf840" loc="97:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="92:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Disable RX.</short>
          <long>&#10; Disable RX.&#10;&#10; @return SUCCESS if receive mode has been disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxOn" ref="0x7ff8df1cf070" loc="90:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="85:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Enable RX.</short>
          <long>&#10; Enable RX.&#10;&#10; @return SUCCESS if receive mode has been enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startVReg" ref="0x7ff8df1d6e20" loc="51:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="44:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the voltage regulator on the CC2420.</short>
          <long>&#10; Start the voltage regulator on the CC2420. On SUCCESS,&#10; &#60;code>startVReg()&#60;/code> will be signalled when the voltage&#10; regulator is fully on.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopVReg" ref="0x7ff8df1d2e80" loc="63:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="58:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the voltage regulator immediately.</short>
          <long>&#10; Stop the voltage regulator immediately.&#10;&#10; @return SUCCESS always&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startOscillatorDone" ref="0x7ff8df1d0020" loc="76:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="73:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the oscillator has been started.</short>
          <long>&#10; Signals that the oscillator has been started.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopOscillator" ref="0x7ff8df1d0840" loc="83:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="78:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the oscillator.</short>
          <long>&#10; Stop the oscillator.&#10;&#10; @return SUCCESS if the oscillator was stopped, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startVRegDone" ref="0x7ff8df1d26c0" loc="56:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="53:../../../..//tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the voltage regulator has been started.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="State" loc="38:../../../..//tos/interfaces/State.nc">
      <documentation loc="33:../../../..//tos/interfaces/State.nc">
        <short>&#10; State machine interface&#10; </short>
        <long>&#10; State machine interface&#10; @author David Moss - dmm@rincon.com&#10;</long>
      </documentation>
      <function command="" provided="0" name="getState" ref="0x7ff8df1b4d00" loc="71:../../../..//tos/interfaces/State.nc">
        <documentation loc="68:../../../..//tos/interfaces/State.nc">
          <short>&#10; Get the current state&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toIdle" ref="0x7ff8df1b6350" loc="56:../../../..//tos/interfaces/State.nc">
        <documentation loc="53:../../../..//tos/interfaces/State.nc">
          <short>&#10; Set the current state back to S_IDLE&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isState" ref="0x7ff8df1b4530" loc="66:../../../..//tos/interfaces/State.nc">
        <documentation loc="63:../../../..//tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in the given state&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="myState" ref="0x7ff8df1b42b0" loc="66:../../../..//tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isIdle" ref="0x7ff8df1b6ac0" loc="61:../../../..//tos/interfaces/State.nc">
        <documentation loc="58:../../../..//tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in S_IDLE&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requestState" ref="0x7ff8df1b7020" loc="45:../../../..//tos/interfaces/State.nc">
        <documentation loc="40:../../../..//tos/interfaces/State.nc">
          <short>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.</short>
          <long>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.&#10; @return SUCCESS if the state is change, FAIL if it isn't&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7ff8df1bec90" loc="45:../../../..//tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="forceState" ref="0x7ff8df1b7ad0" loc="51:../../../..//tos/interfaces/State.nc">
        <documentation loc="47:../../../..//tos/interfaces/State.nc">
          <short>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.</short>
          <long>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7ff8df1b7850" loc="51:../../../..//tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Config" loc="46:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio configurations. All get() and set()&#10; commands are single-phase. After setting some values, a call to&#10; sync() is required for the changes to propagate to the cc2420&#10; hardware chip. This interface allows setting multiple parameters&#10; before calling sync().&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/06/16 15:33:32 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setAutoAck" ref="0x7ff8df159870" loc="106:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="100:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync must be called for acknowledgement changes to take effect&#10; </short>
          <long>&#10; Sync must be called for acknowledgement changes to take effect&#10; @param enableAutoAck TRUE to enable auto acknowledgements&#10; @param hwAutoAck TRUE to default to hardware auto acks, FALSE to&#10;     default to software auto acknowledgements&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAutoAck" ref="0x7ff8df159290" loc="106:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
          <variable name="hwAutoAck" ref="0x7ff8df1595e0" loc="106:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAddressRecognitionEnabled" ref="0x7ff8df15a1f0" loc="93:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="90:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddressRecognition" ref="0x7ff8df15c880" loc="87:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="81:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @param enableAddressRecognition TRUE to turn address recognition on&#10; @param useHwAddressRecognition TRUE to perform address recognition first&#10;     in hardware. This doesn't affect software address recognition. The&#10;     driver must sync with the chip after changing this value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAddressRecognition" ref="0x7ff8df15c210" loc="87:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
          <variable name="useHwAddressRecognition" ref="0x7ff8df15c5f0" loc="87:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x7ff8df162c10" loc="55:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7ff8df162990" loc="55:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAddressRecognitionDefault" ref="0x7ff8df15aa70" loc="98:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="95:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is performed first in hardware.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShortAddr" ref="0x7ff8df15e730" loc="72:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7ff8df15e4b0" loc="72:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7ff8df161d30" loc="61:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7ff8df161ab0" loc="61:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAutoAckEnabled" ref="0x7ff8df158ae0" loc="117:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="114:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if auto acks are enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPanAddr" ref="0x7ff8df15d9c0" loc="78:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7ff8df15d740" loc="78:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAutoAckDefault" ref="0x7ff8df1582b0" loc="112:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="108:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if hardware auto acks are the default, FALSE if software&#10;     acks are the default&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getExtAddr" ref="0x7ff8df15f4d0" loc="66:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="63:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Get the long address of the radio: set in hardware&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7ff8df220670"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7ff8df220dd0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShortAddr" ref="0x7ff8df15fcc0" loc="71:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="68:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the short address of the radio.</short>
          <long>&#10; Change the short address of the radio.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x7ff8df1621f0" loc="54:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="48:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync configuration changes with the radio hardware.</short>
          <long>&#10; Sync configuration changes with the radio hardware. This only&#10; applies to set commands below.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7ff8df161390" loc="60:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="57:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the channel of the radio, between 11 and 26&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPanAddr" ref="0x7ff8df15d020" loc="77:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="74:../../../..//tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the PAN address of the radio.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../../..//tos/interfaces/Read.nc">
      <documentation loc="33:../../../..//tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7ff8df1554b0" loc="49:../../../..//tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7ff8df1554b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7ff8df155d70" loc="55:../../../..//tos/interfaces/Read.nc">
        <documentation loc="50:../../../..//tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7ff8df152ae0" loc="63:../../../..//tos/interfaces/Read.nc">
        <documentation loc="57:../../../..//tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7ff8df1554b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7ff8df152530" loc="63:../../../..//tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7ff8df152850" loc="63:../../../..//tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7ff8df1554b0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Register" loc="47:../../../..//tos/chips/cc2420/interfaces/CC2420Register.nc">
      <documentation loc="33:../../../..//tos/chips/cc2420/interfaces/CC2420Register.nc">
        <short>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio.</short>
        <long>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio. The return values (when appropriate) refer to the&#10; status byte returned on the CC2420 SO pin. A full list of RW&#10; registers can be found on page 61 of the CC2420 datasheet (rev&#10; 1.2). Page 25 of the same document describes the protocol for&#10; interacting with these registers over the CC2420 SPI bus.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7ff8df129c10" loc="55:../../../..//tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="49:../../../..//tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Read a 16-bit data word from the register.</short>
          <long>&#10; Read a 16-bit data word from the register.&#10;&#10; @param data pointer to place the register value.&#10; @return status byte from the read.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7ff8df72e8b0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8df129990" loc="55:../../../..//tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7ff8df127710" loc="63:../../../..//tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="57:../../../..//tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Write a 16-bit data word to the register.</short>
          <long>&#10; Write a 16-bit data word to the register.&#10; &#10; @param data value to write to register.&#10; @return status byte from the write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7ff8df72e8b0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8df127490" loc="63:../../../..//tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalIeeeEui64" loc="43:../../../..//tos/interfaces/LocalIeeeEui64.nc">
      <documentation loc="39:../../../..//tos/interfaces/LocalIeeeEui64.nc">
        <short>&#10; Interface to read the 64-bit IEEE EUI.</short>
        <long>&#10; Interface to read the 64-bit IEEE EUI.&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="getId" ref="0x7ff8df148c50" loc="48:../../../..//tos/interfaces/LocalIeeeEui64.nc">
        <documentation loc="44:../../../..//tos/interfaces/LocalIeeeEui64.nc">
          <short>&#10; Get the 64-bit IEEE EUI.</short>
          <long>&#10; Get the 64-bit IEEE EUI.&#10; @returns the 64-bit IEEE EUI type, defined in tos/types/IeeeEui64.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalIeeeEui64"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7ff8df220670"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7ff8df220dd0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../..//tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../..//tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7ff8df144020" loc="56:../../../..//tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ff8df144020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7ff8df144260" loc="56:../../../..//tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df144260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7ff8df140e00" loc="109:../../../..//tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../..//tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df144260"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7ff8df143e40" loc="78:../../../..//tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../..//tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7ff8df140460" loc="103:../../../..//tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../..//tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df144260"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df144260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7ff8df141e60" loc="103:../../../..//tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df144260"/></type-var>
          </variable>
          <variable name="dt" ref="0x7ff8df1401d0" loc="103:../../../..//tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df144260"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7ff8df141640" loc="88:../../../..//tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../..//tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7ff8df13f620" loc="116:../../../..//tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../..//tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df144260"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7ff8df144dc0" loc="66:../../../..//tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../..//tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df144260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7ff8df144b40" loc="66:../../../..//tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df144260"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7ff8df143680" loc="73:../../../..//tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../..//tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../../..//tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../../..//tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7ff8df131560" loc="50:../../../..//tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../../..//tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7ff8df1304f0" loc="60:../../../..//tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../../..//tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7ff8df131d40" loc="55:../../../..//tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../../..//tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7ff8df6e4180"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7ff8df132cd0" loc="45:../../../..//tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../../..//tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7ff8df6e4180"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7ff8df1326f0" loc="45:../../../..//tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7ff8df6e4180"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7ff8df132a40" loc="45:../../../..//tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7ff8df6e4560"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Strobe" loc="44:../../../..//tos/chips/cc2420/interfaces/CC2420Strobe.nc">
      <documentation loc="33:../../../..//tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <short>&#10; Interface representing one of the CC2420 command strobe registers.</short>
        <long>&#10; Interface representing one of the CC2420 command strobe registers.&#10; Writing to one of these registers enacts a command on the CC2420,&#10; such as power-up, transmission, or clear a FIFO.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="strobe" ref="0x7ff8df124e40" loc="53:../../../..//tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <documentation loc="46:../../../..//tos/chips/cc2420/interfaces/CC2420Strobe.nc">
          <short>&#10; Send a command strobe to the register.</short>
          <long>&#10; Send a command strobe to the register. The return value is the&#10; CC2420 status register. Table 5 on page 27 of the CC2420&#10; datasheet (v1.2) describes the contents of this register.&#10; &#10; @return Status byte from the CC2420.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Strobe"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7ff8df72e8b0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Ram" loc="41:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <short>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7ff8df12de80" loc="52:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="43:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Read data from a RAM.</short>
          <long>&#10; Read data from a RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7ff8df72e8b0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7ff8df12d020" loc="52:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7ff8df12d890" loc="52:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7ff8df12dbe0" loc="52:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7ff8df12b610" loc="63:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="54:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Write data to RAM.</short>
          <long>&#10; Write data to RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7ff8df72e8b0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7ff8df12c770" loc="63:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7ff8df12b020" loc="63:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7ff8df12b370" loc="63:../../../..//tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../../..//tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../../..//tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7ff8df134c30" loc="68:../../../..//tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../../..//tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7ff8df134470" loc="61:../../../..//tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../../..//tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x7ff8df136ce0" loc="54:../../../..//tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x7ff8df136420" loc="53:../../../..//tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../../..//tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../..//tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../..//tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7ff8df01f4f0" loc="57:../../../..//tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ff8df01f4f0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7ff8df01f730" loc="57:../../../..//tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df01f730"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7ff8df01e070" loc="64:../../../..//tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../..//tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8df01f730"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7ff8df01c190" loc="76:../../../..//tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../..//tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7ff8df01e8f0" loc="71:../../../..//tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../..//tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7ff8df01c8f0" loc="82:../../../..//tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../..//tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../../..//tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../../..//tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7ff8def57020" loc="54:../../../..//tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7ff8def551f0" loc="66:../../../..//tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../../..//tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7ff8def579c0" loc="61:../../../..//tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../../..//tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7ff8def57740" loc="61:../../../..//tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7ff8def58770" loc="53:../../../..//tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../../..//tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="37:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="33:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7ff8def31020" loc="52:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="49:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
          <long> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7ff8def30ac0" loc="72:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
          <long>&#10; Signalled when an interrupt occurs on a port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7ff8def327c0" loc="47:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="44:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7ff8def302a0" loc="67:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="61:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Sets whether the edge should be high to low or low to high.</short>
          <long> &#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7ff8def30020" loc="67:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7ff8def32020" loc="42:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="39:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7ff8def31820" loc="59:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="54:../../../..//tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current value of the input voltage of a port.</short>
          <long> &#10; Gets the current value of the input voltage of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ChipSpiResource" loc="17:../../../..//tos/chips/cc2420/interfaces/ChipSpiResource.nc">
      <documentation loc="2:../../../..//tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <short>&#10; Interface for the SPI resource for an entire chip.</short>
        <long>&#10; Interface for the SPI resource for an entire chip.  The chip accesses&#10; the platform SPI resource one time, but can have multiple clients &#10; using the SPI bus on top.  When all of the clients are released, the&#10; chip will normally try to release itself from the platforms SPI bus.&#10; In some cases, this isn't desirable - so even though upper components&#10; aren't actively using the SPI bus, they can tell the chip to hold onto&#10; it so they can have immediate access when they need. &#10;&#10; Any component that aborts a release MUST attempt the release at a later&#10; time if they don't acquire and release the SPI bus naturally after the&#10; abort.&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="releasing" ref="0x7ff8dee1e270" loc="24:../../../..//tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="19:../../../..//tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; The SPI bus is about to be automatically released.</short>
          <long>&#10; The SPI bus is about to be automatically released.  Modules that aren't&#10; using the SPI bus but still want the SPI bus to stick around must call&#10; abortRelease() within the event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="abortRelease" ref="0x7ff8dee1eac0" loc="31:../../../..//tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="27:../../../..//tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Abort the release of the SPI bus.</short>
          <long>&#10; Abort the release of the SPI bus.  This must be called only with the&#10; releasing() event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="attemptRelease" ref="0x7ff8dee1d350" loc="39:../../../..//tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="33:../../../..//tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Release the SPI bus if there are no objections&#10; </short>
          <long>&#10; Release the SPI bus if there are no objections&#10; @return SUCCESS if the SPI bus is released from the chip.&#10;      FAIL if the SPI bus is already in use.&#10;      EBUSY if some component aborted the release.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Fifo" loc="40:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <short>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="continueRead" ref="0x7ff8dedf7b60" loc="62:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="53:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Continue reading from the FIFO without having to send the address&#10; byte again.</short>
          <long>&#10; Continue reading from the FIFO without having to send the address&#10; byte again. The &#60;code>readDone&#60;/code> event will be signalled&#10; upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8dedf7580" loc="62:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7ff8dedf78d0" loc="62:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7ff8dedf2dd0" loc="91:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="84:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a write operation.</short>
          <long>&#10; Signals the completion of a write operation.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes written.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8dedf2490" loc="91:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7ff8dedf27e0" loc="91:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7ff8dedf2b30" loc="91:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7ff8dedf36b0" loc="82:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="73:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start writing the FIFO.</short>
          <long>&#10; Start writing the FIFO. The &#60;code>writeDone&#60;/code> event will be&#10; signalled upon completion.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7ff8df72e8b0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8dedf30d0" loc="82:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7ff8dedf3420" loc="82:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="beginRead" ref="0x7ff8dedf8730" loc="51:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="42:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start reading from the FIFO.</short>
          <long>&#10; Start reading from the FIFO. The &#60;code>readDone&#60;/code> event will&#10; be signalled upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7ff8df72e8b0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8dedf8150" loc="51:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7ff8dedf84a0" loc="51:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7ff8dedf42c0" loc="71:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="64:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a read operation.</short>
          <long>&#10; Signals the completion of a read operation.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes read.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8dedf6930" loc="71:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7ff8dedf6c80" loc="71:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7ff8dedf4020" loc="71:../../../..//tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../../..//tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../../..//tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7ff8dedd8df0" loc="76:../../../..//tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../../..//tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7ff8dedd8480" loc="76:../../../..//tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7ff8dedd8810" loc="76:../../../..//tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8dedd8b50" loc="76:../../../..//tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7ff8dedd53c0" loc="88:../../../..//tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../../..//tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7ff8dedd46a0" loc="88:../../../..//tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7ff8dedd4a30" loc="88:../../../..//tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8dedd4d70" loc="88:../../../..//tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7ff8dedd5110" loc="89:../../../..//tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../../..//tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../../..//tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7ff8deddcc90" loc="45:../../../..//tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../../..//tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7ff8deddca10" loc="45:../../../..//tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../..//tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../..//tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7ff8decee6f0" loc="53:../../../..//tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../..//tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7ff8deced070" loc="61:../../../..//tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../..//tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430SpiConfigure" loc="38:../../../..//tos/chips/msp430/usart/Msp430SpiConfigure.nc">
      <documentation loc="31:../../../..//tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7ff8dece6710" loc="39:../../../..//tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <interfacedef-ref qname="Msp430SpiConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7ff8ded2a020"/>
              <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7ff8ded2a440"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../../..//tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../../..//tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7ff8deceb2a0" loc="62:../../../..//tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../../..//tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8deceb020" loc="62:../../../..//tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7ff8decea680" loc="74:../../../..//tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../../..//tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8decea400" loc="74:../../../..//tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7ff8decebb10" loc="68:../../../..//tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../../..//tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7ff8dece82a0" loc="81:../../../..//tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../../..//tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8dece8020" loc="81:../../../..//tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../..//tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../..//tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7ff8dece0ca0" loc="65:../../../..//tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../..//tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7ff8dece0480" loc="59:../../../..//tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../..//tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../..//tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../../..//tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7ff8decd72a0" loc="54:../../../..//tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../..//tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8decd7020" loc="54:../../../..//tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7ff8decd8780" loc="49:../../../..//tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../..//tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../../..//tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7ff8decb4af0" loc="213:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7ff8decbf790" loc="143:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7ff8deccc610" loc="50:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8ded46080"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7ff8ded468c0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7ff8deccc390" loc="50:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8ded46080"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7ff8ded468c0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7ff8decc2870" loc="123:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7ff8decc9a90" loc="70:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8ded41080"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7ff8ded418c0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7ff8decc9810" loc="70:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8ded41080"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7ff8ded418c0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7ff8decb9e70" loc="180:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7ff8decb5480" loc="197:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7ff8decc9070" loc="65:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8ded44020"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7ff8ded447b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7ff8decc82b0" loc="75:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8ded41080"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7ff8ded418c0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7ff8decc4020" loc="97:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7ff8decc5d30" loc="97:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7ff8decc5610" loc="95:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7ff8decb9740" loc="179:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7ff8deccb840" loc="60:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8ded44020"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7ff8ded447b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7ff8deccb5c0" loc="60:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8ded44020"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7ff8ded447b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7ff8decc7420" loc="85:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7ff8decb85d0" loc="181:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7ff8decc7e00" loc="90:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7ff8decc7b80" loc="90:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7ff8decc3910" loc="113:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7ff8decc20e0" loc="118:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7ff8decba840" loc="177:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7ff8decbd790" loc="163:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7ff8decc07e0" loc="133:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7ff8decb9020" loc="178:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7ff8decbe020" loc="148:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7ff8decb8cf0" loc="182:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7ff8decc4800" loc="103:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7ff8ded4cdd0"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7ff8ded48680"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7ff8decb64c0" loc="187:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7ff8decb4350" loc="207:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7ff8decc8c50" loc="80:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7ff8decc89d0" loc="80:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7ff8decb24d0" loc="224:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8decb2250" loc="224:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7ff8decccdf0" loc="55:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8ded46080"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7ff8ded468c0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7ff8decc0020" loc="128:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7ff8decbe770" loc="153:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7ff8decba020" loc="174:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7ff8ded18e70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7ff8ded172b0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7ff8decbbcf0" loc="174:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7ff8ded18e70"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7ff8ded172b0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7ff8decbb2a0" loc="168:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7ff8ded2a020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7ff8ded2a440"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7ff8decbb020" loc="168:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7ff8ded2a020"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7ff8ded2a440"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7ff8decb2d90" loc="231:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7ff8decb6cb0" loc="192:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7ff8decc3070" loc="108:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7ff8decb5be0" loc="202:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7ff8decbd020" loc="158:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7ff8decbf020" loc="138:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../..//tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../..//tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../..//tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7ff8dec4b600" loc="39:../../../..//tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
      <documentation loc="31:../../../..//tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableOwnAddress" ref="0x7ff8dec24070" loc="80:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7ff8dec37b10" loc="31:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7ff8dec2cd50" loc="62:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7ff8dec2cad0" loc="62:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7ff8dec3f270" loc="11:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7ff8dec28350" loc="71:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7ff8dec31cf0" loc="49:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7ff8dec38c50" loc="28:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7ff8dec369c0" loc="34:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7ff8dec3ac00" loc="25:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7ff8dec3a980" loc="25:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7ff8dec3b120" loc="21:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7ff8dec33790" loc="41:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7ff8dec2ac80" loc="66:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7ff8dec258f0" loc="78:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7ff8dec2c390" loc="61:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7ff8dec20b60" loc="91:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7ff8dec1b270" loc="100:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7ff8dec3d0e0" loc="14:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7ff8dec33020" loc="38:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7ff8dec32910" loc="45:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7ff8dec38500" loc="27:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7ff8dec40020" loc="7:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7ff8dec2dba0" loc="58:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7ff8dec2d920" loc="58:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7ff8dec437e0" loc="6:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7ff8dec29b80" loc="69:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7ff8dec247d0" loc="81:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7ff8dec1e350" loc="94:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7ff8dec1ca90" loc="97:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7ff8dec26270" loc="74:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7ff8dec23020" loc="83:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7ff8dec2a520" loc="65:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7ff8dec21bb0" loc="87:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7ff8dec3d800" loc="15:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7ff8dec2e020" loc="53:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7ff8dec21020" loc="86:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7ff8dec25190" loc="77:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7ff8dec31520" loc="46:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7ff8dec312a0" loc="46:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7ff8dec1eaf0" loc="95:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7ff8dec2d1f0" loc="57:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7ff8dec28ac0" loc="72:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7ff8dec40aa0" loc="8:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7ff8ded04b90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7ff8ded03020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7ff8dec40820" loc="8:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7ff8ded04b90"/>
                <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7ff8ded03020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7ff8dec34870" loc="37:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7ff8dec3c980" loc="19:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7ff8dec3c700" loc="19:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7ff8dec32120" loc="42:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8dec33e70" loc="42:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7ff8dec203b0" loc="90:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7ff8dec3a270" loc="24:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7ff8dec3c020" loc="18:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7ff8dec2e9e0" loc="54:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7ff8dec2e760" loc="54:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7ff8dec3f9a0" loc="12:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7ff8dec23740" loc="84:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7ff8dec269e0" loc="75:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7ff8dec29420" loc="68:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7ff8dec2f740" loc="50:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7ff8dec2f4c0" loc="50:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7ff8dec34120" loc="35:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7ff8dec373b0" loc="29:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7ff8dec1c2b0" loc="96:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7ff8dec3baa0" loc="22:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7ff8dec3b820" loc="22:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7ff8dec1f350" loc="92:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7ff8dec36270" loc="32:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7ff8dec1fb10" loc="93:../../../..//tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../..//tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../..//tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7ff8deb7e780" loc="90:../../../..//tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../..//tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7ff8deb7c020" loc="98:../../../..//tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../..//tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7ff8deb47900" loc="56:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7ff8deb46a20" loc="73:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7ff8deb47070" loc="46:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7ff8deb461f0" loc="65:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7ff8deb45390" loc="81:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../../..//tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../..//tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../..//tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7ff8deb3bb50" loc="79:../../../..//tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../..//tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7ff8deb43b30"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7ff8deb3b8d0" loc="79:../../../..//tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7ff8deb43b30"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7ff8deb3fb80" loc="53:../../../..//tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../..//tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7ff8deb3c6b0" loc="62:../../../..//tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../..//tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7ff8deb43b30"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7ff8deb3c430" loc="62:../../../..//tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7ff8deb43b30"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7ff8deb3b020" loc="70:../../../..//tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../..//tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7ff8deb43b30"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadId48" loc="8:../../../..//tos/chips/ds2411/ReadId48.nc">
      <documentation loc="4:../../../..//tos/chips/ds2411/ReadId48.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7ff8de9375e0" loc="13:../../../..//tos/chips/ds2411/ReadId48.nc">
        <interfacedef-ref qname="ReadId48"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7ff8de937360" loc="13:../../../..//tos/chips/ds2411/ReadId48.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="OneWireReadWrite" loc="9:../../../..//tos/lib/onewire/OneWireReadWrite.nc">
      <documentation loc="5:../../../..//tos/lib/onewire/OneWireReadWrite.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7ff8de924b00" loc="10:../../../..//tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7ff8de9241c0" loc="10:../../../..//tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7ff8de924530" loc="10:../../../..//tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8de924860" loc="10:../../../..//tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7ff8de922880" loc="11:../../../..//tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7ff8de9222c0" loc="11:../../../..//tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7ff8de9225f0" loc="11:../../../..//tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../../..//tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../../..//tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7ff8de90a530" loc="59:../../../..//tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ff8de90a530"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7ff8de90a770" loc="59:../../../..//tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8de90a770"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7ff8de9092e0" loc="66:../../../..//tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../../..//tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8de90a770"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7ff8de909060" loc="66:../../../..//tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7ff8de90a770"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveIndicator" loc="37:../../../..//tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <short>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; </short>
        <long>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="isReceiving" ref="0x7ff8de8a6580" loc="43:../../../..//tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <documentation loc="39:../../../..//tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the indicator is showing we are actively receiving at this&#10; level&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveIndicator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Receive" loc="42:../../../..//tos/chips/cc2420/interfaces/CC2420Receive.nc">
      <documentation loc="32:../../../..//tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <short>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2008-06-17 07:28:24 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7ff8de8749e0" loc="63:../../../..//tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="57:../../../..//tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Signals that a message has been received.</short>
          <long>&#10; Signals that a message has been received.&#10;&#10; @param type of the message received.&#10; @param message pointer to message received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x7ff8de874020" loc="63:../../../..//tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
          <variable name="message" ref="0x7ff8de874750" loc="63:../../../..//tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd_dropped" ref="0x7ff8de8757f0" loc="55:../../../..//tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="51:../../../..//tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that the packet has been dropped by the radio&#10; (e.g.</short>
          <long>&#10; Notification that the packet has been dropped by the radio&#10; (e.g. due to address rejection).&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd" ref="0x7ff8de875020" loc="49:../../../..//tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="44:../../../..//tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that an SFD capture has occured.</short>
          <long>&#10; Notification that an SFD capture has occured.&#10;&#10; @param time at which the capture happened.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7ff8de878d30" loc="49:../../../..//tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeSyncOffset" loc="43:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
      <function command="" provided="0" name="get" ref="0x7ff8de88c3d0" loc="58:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="52:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns the offset of where the timesync timestamp is sotred in a&#10; CC2420 packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8de88c150" loc="58:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7ff8de88d3d0" loc="50:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="45:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns TRUE if the current message should be timestamped.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8de88d150" loc="50:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7ff8de889350" loc="72:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="67:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10; Cancels any pending requests to timestamp the message in MAC.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8de8890d0" loc="72:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7ff8de88a390" loc="65:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="60:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10;  Sets the current message to be timestamped in the MAC layer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7ff8de88a110" loc="65:../../../..//tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:136" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7ff8df6d4ab0"/>
                <typename><typedef-ref name="message_t" ref="0x7ff8df6d2180"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../..//tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../..//tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7ff8de712910" loc="53:../../../..//tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7ff8de712910"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7ff8de70f270" loc="61:../../../..//tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../..//tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7ff8e0559920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../../..//tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../../..//tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7ff8de57d5e0" loc="53:../../../..//tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7ff8de57d5e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7ff8de57a2a0" loc="64:../../../..//tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../../..//tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7ff8de57d5e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7ff8de57a020" loc="64:../../../..//tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7ff8de57d5e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12SingleChannel" loc="69:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
      <documentation loc="36:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <short> &#10; &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample a single adc channel once or repeatedly (one event is&#10; signalled per conversion result) or perform multiple conversions for a&#10; single channel once or repeatedly (one event is signalled per multiple&#10; conversion results). It cannot be used to sample different adc channels with&#10; a single command (use the Msp430Adc12MultiChannel interface instead).&#10; Sampling a channel requires calling a sequence of two commands, configureX()&#10; and getData(), where X is either 'Single', 'SingleRepeat', 'Multiple' or&#10; 'MultipleRepeat'. Conversion results will be signalled by the&#10; dataReadySingle() or dataReadyMultiple() event, depending on the previous&#10; configuration, i.e. there are four possible sequences:&#10; &#10; &#60;p> configureSingle()          -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureSingleRepeat()    -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureMultiple()        -> ( getData() -> multipleDataReady() )*&#10; &#60;p> configureMultipleRepeat()  -> getData() -> multipleDataReady()&#10;&#10; &#60;p> where configureX() and getData() are commands called by the client and&#10; singleDataReady() and multipleDataReady() are events signalled back to the&#10; client by the adc subsystem. Note that a configuration is valid until the&#10; client reconfigures or releases the ADC (using the Resource interface),&#10; except for configureMultipleRepeat(), which is only valid for a single call&#10; to getData(). This means that after a successful configuration with, for&#10; example, configureSingle() the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface).&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x7ff8de395df0" loc="189:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="180:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.</short>
          <long> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event singleDataReady() or multipleDataReady() will be signalled&#10; (depending on the previous configuration). Otherwise no such event will be&#10; signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingle" ref="0x7ff8de39e740" loc="84:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="72:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC to perform a single conversion.</short>
          <long> &#10; Configures the ADC to perform a single conversion. Any previous&#10; configuration will be overwritten.  If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>singleDataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config ADC12 configuration data.  &#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7ff8de39e4c0" loc="84:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingleRepeat" ref="0x7ff8de39cc40" loc="106:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="86:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for repeated single channel conversion mode.</short>
          <long> &#10; Configures the ADC for repeated single channel conversion mode. Any&#10; previous configuration will be overwritten. If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start sampling the adc channel periodically&#10; (the first conversion is started immediately).  The sampling period is&#10; specified by the &#60;code>jiffies&#60;/code> parameter, which defines the time&#10; between successive conversions in terms of clock ticks of clock source&#10; &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34; as specified in the&#10; &#60;code>config&#60;/code> parameter. If jiffies is zero successive conversions&#10; are performed as quickly as possible.  Conversion result are signalled&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>singleDataReady()&#60;/code> event handler.&#10; &#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34; and&#10; input divider &#34;sampcon_id&#34;.&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7ff8de39c640" loc="106:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="jiffies" ref="0x7ff8de39c9b0" loc="106:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultipleRepeat" ref="0x7ff8de3969c0" loc="177:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="140:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.</short>
          <long> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.  Any&#10; previous configuration will be overwritten. In contrast to the&#10; &#60;code>configureSingleRepeat()&#60;/code> command this configuration means that&#10; an event with &#60;code>numSamples&#60;/code> conversion results will be&#10; signalled, where 0 &#60; &#60;code>numSamples&#60;/code> &#60;= 16. In contrast to the&#10; &#60;code>configureMultiple()&#60;/code> command, this configuration means that&#10; &#60;code>numSamples&#60;/code> conversion results will be signalled repeatedly&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler. &#10;&#10; If &#60;code>configureMultipleRepeat()&#60;/code> returns SUCCESS calling&#10; &#60;code>getData()&#60;/code> will start the the first conversion immediately.&#10; The sampling period is specified by the &#60;code>jiffies&#60;/code> parameter,&#10; which defines the time between successive conversions in terms of clock&#10; ticks of clock source &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34;&#10; as specified in the &#60;code>config&#60;/code> parameter. If jiffies is zero&#10; successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with &#60;code>numSamples&#60;/code>&#10; conversion results. If the client returns &#60;code>SUCCESS&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler, &#60;code>numSamples&#60;/code>&#10; new conversions will be performed, otherwise not.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples to take, 0 &#60;&#10; &#60;code>numSamples&#60;/code> &#60;= 16&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7ff8de398700" loc="177:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7ff8de396020" loc="177:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7ff8de3963a0" loc="177:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7ff8de396710" loc="177:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="multipleDataReady" ref="0x7ff8de392770" loc="227:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="208:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Multiple ADC conversion results are ready.</short>
          <long> &#10; Multiple ADC conversion results are ready.  If the ADC was configured&#10; with the &#60;code>configureMultiple()&#60;/code> command, then the return value&#10; is ignored. If the ADC was configured with the&#10; &#60;code>configureMultipleRepeat()&#60;/code> command then the returned pointer&#10; defines where to store the next &#60;code>numSamples&#60;/code>&#10; conversion results (the client must make sure that the buffer is big&#10; enough!).  Returning a null pointer means that the repeated conversion&#10; mode will be stopped.&#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of samples stored in &#60;code>buffer&#60;/code> &#10;&#10; @return&#10; A null pointer stops a repeated conversion mode. Any non-zero value is&#10; interpreted as the next buffer, which must have at least&#10; &#60;code>numSamples&#60;/code> entries. The return value is ignored if the ADC&#10; was configured with &#60;code>configureMultiple()&#60;/code>.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x7ff8de3920d0" loc="227:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7ff8de392460" loc="227:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultiple" ref="0x7ff8de3992d0" loc="138:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="109:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period.</short>
          <long> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period. Any previous configuration will be&#10; overwritten.  In contrast to the &#60;code>configureSingleRepeat()&#60;/code>&#10; command, this configuration means that only one event will be signalled&#10; after all samples have been taken (which is useful for high-frequency&#10; sampling). If SUCCESS is returned calling &#60;code>getData()&#60;/code> will&#10; start sampling the adc channel &#60;code>numSamples&#60;/code> times and the first&#10; conversion is started immediately. Conversion results are stored in a&#10; buffer allocated by the client (the &#60;code>buffer&#60;/code>&#10; parameter). The sampling period is specified by the &#60;code>jiffies&#60;/code>&#10; parameter, which defines the time between successive conversions in terms&#10; of clock ticks of clock source &#34;sampcon_ssel&#34; and clock input divider&#10; &#34;sampcon_id&#34; as specified in the &#60;code>config&#60;/code> parameter. If jiffies&#10; is zero successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with the conversion results.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7ff8de39a020" loc="138:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x7ff8df69a020"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x7ff8df69b610"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x7ff8de39a8c0" loc="138:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x7ff8de39ac50" loc="138:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x7ff8de399020" loc="138:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="singleDataReady" ref="0x7ff8de394ad0" loc="206:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="191:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; A single ADC conversion result is ready.</short>
          <long> &#10; A single ADC conversion result is ready. If the ADC was configured with&#10; the &#60;code>configureSingle()&#60;/code> command, then the return value is&#10; ignored. If the ADC was configured with the&#10; &#60;code>configureSingleRepeat()&#60;/code> command then the return value tells&#10; whether another conversion should be performed (&#60;code>SUCCESS()&#60;/code>) or&#10; not (&#60;code>FAIL&#60;/code>).&#10; &#10; @param data Conversion result (lower 12 bit).  &#10;&#10; @return If this event is signalled as response to a call to&#10; &#60;code>configureSingleRepeat()&#60;/code> then &#60;code>SUCCESS&#60;/code> results in&#10; another sampling and &#60;code>FAIL&#60;/code> stops the repeated sampling.&#10; Otherwise the return value is ignored.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7ff8de394850" loc="206:../../../..//tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12Overflow" loc="44:../../../..//tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
      <documentation loc="36:../../../..//tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <short> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.</short>
        <long> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function event="" provided="0" name="memOverflow" ref="0x7ff8de38e2b0" loc="49:../../../..//tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="46:../../../..//tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; An ADC12MEMx overflow condition has occured.</short>
          <long> &#10; An ADC12MEMx overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionTimeOverflow" ref="0x7ff8de38ead0" loc="54:../../../..//tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="51:../../../..//tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; A conversion time overflow condition has occured.</short>
          <long> &#10; A conversion time overflow condition has occured.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../..//tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../..//tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7ff8de3807b0" loc="95:../../../..//tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../..//tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7ff8de37f030" loc="105:../../../..//tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../..//tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7ff8e023ec20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAdc12" loc="45:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
      <documentation loc="36:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getCtl0" ref="0x7ff8de3732d0" loc="63:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="59:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Returns the ADC12 control register ADC12CTL0.&#10; @return ADC12CTL0&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df6885f0"/>
            <typename><typedef-ref name="adc12ctl0_t" ref="0x7ff8df687090"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMCtl" ref="0x7ff8de3703f0" loc="82:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="77:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @return memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8df69ad30"/>
            <typename><typedef-ref name="adc12memctl_t" ref="0x7ff8df699230"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7ff8de370170" loc="82:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetIFGs" ref="0x7ff8de36eb10" loc="106:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="103:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Resets the ADC12 interrupt flag register, ADC12IFG.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isBusy" ref="0x7ff8de36cd70" loc="118:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="114:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 BUSY flag.</short>
          <long> &#10; Returns the ADC12 BUSY flag.&#10; @return ADC12BUSY &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7ff8e0247090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionDone" ref="0x7ff8de36c5b0" loc="112:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="108:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Signals a conversion result.</short>
          <long> &#10; Signals a conversion result. &#10; @param iv ADC12 interrupt vector value 0x6, 0x8, ... , 0x24&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="iv" ref="0x7ff8de36c330" loc="112:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtl1" ref="0x7ff8de373af0" loc="68:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="65:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> Returns the ADC12 control register ADC12CTL1.</short>
          <long> Returns the ADC12 control register ADC12CTL1. &#10;  @return ADC12CTL1&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df686710"/>
            <typename><typedef-ref name="adc12ctl1_t" ref="0x7ff8df684020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMCtl" ref="0x7ff8de3718d0" loc="75:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="70:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @param memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8df69ad30"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7ff8df699230"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7ff8de371280" loc="75:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
          <variable name="memControl" ref="0x7ff8de371640" loc="75:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7ff8df69ad30"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x7ff8df699230"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x7ff8de36be00" loc="128:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="125:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Starts a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl0" ref="0x7ff8de374020" loc="51:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="47:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL0.&#10; @param control0 ADC12CTL0 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df6885f0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7ff8df687090"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control0" ref="0x7ff8de377d60" loc="51:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df6885f0"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x7ff8df687090"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMem" ref="0x7ff8de36f020" loc="89:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="84:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory register ADC12MEMx.</short>
          <long> &#10; Returns the ADC12 conversion memory register ADC12MEMx.&#10; @param idx The register index (the 'x' in ADC12MEMx) [0..15] &#10; @return ADC12MEMx &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x7ff8de370c40" loc="89:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7ff8e0559160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIEFlags" ref="0x7ff8de36faa0" loc="95:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="91:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Sets the ADC12 interrupt enable register, ADC12IE.&#10; @param mask Bitmask (0 means interrupt disabled, 1 menas interrupt enabled) &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x7ff8de36f820" loc="95:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIEFlags" ref="0x7ff8de36e350" loc="101:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="97:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Returns the ADC12 interrupt enable register, ADC12IE.&#10; @return ADC12IE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7ff8e0559520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x7ff8de36b570" loc="123:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="120:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Stops a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableConversion" ref="0x7ff8de36a5d0" loc="133:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="130:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Enables conversion (sets the ENC bit).</short>
          <long>&#10; Enables conversion (sets the ENC bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl1" ref="0x7ff8de374a80" loc="57:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="53:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL1.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL1. &#10; @param control1 ADC12CTL1 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df686710"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7ff8df684020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control1" ref="0x7ff8de374800" loc="57:../../../..//tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7ff8df686710"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x7ff8df684020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
