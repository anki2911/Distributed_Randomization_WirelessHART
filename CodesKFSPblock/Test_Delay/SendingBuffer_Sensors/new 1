#include "Timer.h"
#include "Permute.h"

module RelayC @safe() 
{
  
    uses interface Leds;
    uses interface Boot;
  
    uses interface AMSend;
    uses interface Receive;
    uses interface Timer<TMilli> as Timer1;
    uses interface Timer<TMilli> as Timer2;
    //uses interface Timer<TMilli> as Timer3;
    //uses interface Timer<TMilli> as Timer4;
    uses interface SplitControl as AMControl;
    uses interface Packet;

}
implementation 
{
    int key_length = 4;
    int COLS = 4; 
    int ROWS = 16;
    Flow_t F[10];
    //Cluster Declaration
    Cluster_t C[10];

    int unused_slots;
    int total_hops = 0;

    message_t packet_s;
    message_t packet_r;
    
    message_t* recvBuf;
    message_t* sendBuf;

    radio_count_msg_t* rcm;
    radio_count_msg_t* rcv;

    uint16_t timeslot = 0;
    
    enum state {TX, RX} mode;

    slot_info_t BaseSchedule[64]; 

    uint8_t counter = 0;
	
	static float P_k[4][4];

	P_k[0][0] = 10.0;
	P_k[0][1] = 0.0;
	P_k[0][2] = 0.0;
	P_k[0][3] = 0.0;	
	P_k[1][0] = 0.0;	
	P_k[1][1] = 10.0;
	P_k[1][2] = 0.0;
	P_k[1][3] = 0.0;
	P_k[2][0] = 0.0;
	P_k[2][1] = 0.0;
	P_k[2][2] = 10.0;
	P_k[2][3] = 0.0;
	P_k[3][0] = 0.0;
	P_k[3][1] = 0.0;
	P_k[3][2] = 0.0;
	P_k[3][3] = 10.0;
	
	static float X_k[4];
	
	X_k[0] = 0.0;
	X_k[1] = 0.0;
	X_k[2] = 0.0;
	X_k[3] = 0.0;

	static float K[4];
	
	K[0] = 1.9393;
	K[1] = -13.1373;
	K[2] = 0.0842;
	K[3] = -13.0264;

    task void initializeFlow();
    task void assignFlowstoSlots();
    task void initializeSchedule();

    event void Boot.booted() 
    {
        call AMControl.start();
    }

    event void AMControl.startDone(error_t err) 
    {
        if (err == SUCCESS) 
        {
            post initializeFlow();
            post assignFlowstoSlots();
            post initializeSchedule();
            call Timer1.startPeriodic(15);
            call Timer2.startPeriodic(180);
        }
        else 
        {
            call AMControl.start();
        }
    }

    event void AMControl.stopDone(error_t err) 
    {
        // do nothing
    }

    task void initializeFlow()
    {
        //FLOW 1
        F[0].flow_id = 1;
        F[0].cluster_id = 1;
        F[0].n_hops = 3;
        F[0].period = 12;
        F[0].route[0][0] = 1;
        F[0].route[0][1] = 5;
        F[0].route[1][0] = 5;
        F[0].route[1][1] = 7;
        F[0].route[2][0] = 7;
        F[0].route[2][1] = 9;

        //FLOW 2
        F[1].flow_id = 2;
        F[1].cluster_id = 1;
        F[1].n_hops = 3;
        F[1].period = 12;
        F[1].route[0][0] = 2;
        F[1].route[0][1] = 5;
        F[1].route[1][0] = 5;
        F[1].route[1][1] = 8;
        F[1].route[2][0] = 8;
        F[1].route[2][1] = 9;

        //FLOW 3
        F[2].flow_id = 3;
        F[2].cluster_id = 1;
        F[2].n_hops = 3;
        F[2].period = 12;
        F[2].route[0][0] = 3;
        F[2].route[0][1] = 6;
        F[2].route[1][0] = 6;
        F[2].route[1][1] = 7;
        F[2].route[2][0] = 7;
        F[2].route[2][1] = 9;

        //FLOW 4
        F[3].flow_id = 4;
        F[3].cluster_id = 1;
        F[3].n_hops = 3;
        F[3].period = 12;
        F[3].route[0][0] = 4;
        F[3].route[0][1] = 6;
        F[3].route[1][0] = 6;
        F[3].route[1][1] = 8;
        F[3].route[2][0] = 8;
        F[3].route[2][1] = 9;

    }

    task void assignFlowstoSlots()
    {
        C[0].util = 12;
        C[0].slots[0] = 1;
        C[0].slots[1] = 2;
        C[0].slots[2] = 3;
        C[0].slots[3] = 4;
        C[0].slots[4] = 1;
        C[0].slots[5] = 2;
        C[0].slots[6] = 3;
        C[0].slots[7] = 4;
        C[0].slots[8] = 1;
        C[0].slots[9] = 2;
        C[0].slots[10] = 3;
        C[0].slots[11] = 4;
    }

    task void initializeSchedule()
    {
        atomic
        {
            int i, j, k;
            nx_uint16_t temp, count;
            for (i = 0;i < HYPERPERIOD;i++)
            {
                BaseSchedule[i].s = -1;
                BaseSchedule[i].r = -1;
                BaseSchedule[i].fid = -1;
                BaseSchedule[i].rate = -1;
            }

            for (i = 0;i < NUM_OF_CLUSTERS;i++)
            {
                for (j = 0;j < NUM_OF_FLOWS;j++)
                {
                    temp = 0;
                    count = 0;
                    for (k = 0;k < HYPERPERIOD;k++)
                    {
                        if (C[i].slots[k] == j+1)
                        {
                            BaseSchedule[k].fid = j+1;
                            BaseSchedule[k].s = F[j].route[temp][0];
                            BaseSchedule[k].r = F[j].route[temp][1];
                            BaseSchedule[k].rate = F[j].period;
                            temp = temp + 1;
                            count = count + 1;
                            
                            if (count%F[j].period == 0)
                            {
                                temp = 0;
                            }
                        }
                    }
                }
            }      
        }
    }

    event void Timer1.fired()
    {
        if (BaseSchedule[timeslot].s == TOS_NODE_ID)
        {
            mode = TX;
            rcm = (radio_count_msg_t*)call Packet.getPayload(&packet_s, sizeof(radio_count_msg_t));
            if (rcm == NULL) 
            {
                return;
            }
            else
            {
                rcm->Mantissa = Buffer1[(BaseSchedule[timeslot].fid)];
                rcm->Exponent = Buffer2[(BaseSchedule[timeslot].fid)];
                rcm->fid = BaseSchedule[timeslot].fid;
                if (call AMSend.send(BaseSchedule[timeslot].r, &packet_s, sizeof(radio_count_msg_t)) == SUCCESS) 
                {
	                dbg("RadioCountToLedsC", "RadioCountToLedsC: packet sent.\n", counter);	
                }
            }
        }
        else if (BaseSchedule[timeslot].r == TOS_NODE_ID)
        {
            mode = RX;
            rcv = (radio_count_msg_t*)call Packet.getPayload(&packet_r, sizeof(radio_count_msg_t));
            recvBuf = signal Receive.receive(&packet_r, rcv, sizeof(radio_count_msg_t));
        }
        timeslot = timeslot + 1;
        if (timeslot == HYPERPERIOD)
        {
            timeslot = 0;
        }

    }

    event void AMSend.sendDone(message_t* bufPtr, error_t error) 
    {
        
        if (&packet_s == bufPtr) 
        {
        }
    }
  
    event message_t* Receive.receive(message_t* bufPtr, void* payload, uint8_t len) 
    {
        radio_count_msg_t * r1 = (radio_count_msg_t*)payload;
        val1 = r1->Mantissa;
        val2 = r1->Exponent;
        index = r1->fid;
        Buffer1[index] = val1;
        Buffer2[index] = val2;

        if (len != sizeof(radio_count_msg_t)) 
        {
            return bufPtr;
        }
        else 
        {
            return bufPtr;            
        }
    }  
	
	event void Timer2.fired()
	{
		nx_float A[4][4];
		nx_float B[4];
		A[0][0] = 1.0;
		A[0][1] = 0.157;
		A[0][2] = 0.00694;
		A[0][3] = 0.01431;
		A[1][0] = 0.0;
		A[1][1] = 0.7625;
		A[1][2] = 0.07133;
		A[1][3] = 0.1496;
		A[2][0] = 0.0;
		A[2][1] = 0.02082;
		A[2][2] = 0.993;
		A[2][3] = 0.1656;
		A[3][0] = 0.0;	
		A[3][1] = 0.214;
		A[3][2] = -0.07237;
		A[3][3] = 0.8483;

		B[0] = 0.001536;
		B[1] = 0.01583;
		B[2] = -0.001388;
		B[3] = -0.01427;
		
		
		
	
	}
}	











%B = [0.02683;0.03761;-0.02342;-0.03164];
K = [-1.9393 -13.1373 0.0842 -13.0264];
H = [1 0 0 0];
N_r = 2.5;
Q = 1.5*eye(4);
K_k = zeros(4,1);
X_Est = zeros(4,1);
Y_Est = 0.0;

%if t == 10
%Predicted State Estimate
%X_k = F * X_k + B * U;
X_k_3 = (F - B*K) * X_k_3 + B * U;


%Predicted Error Covariance
P_k_3 = F * P_k_3 * F' + Q;

%Measurement Residual
y_k = Y - H * X_k_3;

%Kalman Gain
K_k = (P_k_3 * H')/(N_r + H * P_k_3 * H');

%Updated State Estimate
X_k_3 = X_k_3 + K_k * y_k;
%Updated Error Covariance
P_k_3 = (eye(4) - K_k * H) * P_k_3;

%X_Est = X_k;
%t = 0;
%else 
 %   t = t + 1;
    %if t == 10
    %    t = 0;
    %end
%end
%X_k = X_u;
X_Est = X_k_3;
disp(X_Est);
Y_Est = H * X_Est;
U_Est = K * X_Est;
    %t1 = 0;
%else
%    t1 = t1 + 1;
%    X_Est = X;
end



